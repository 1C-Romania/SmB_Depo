
////////////////////////////////////////////////////////////////////////////////
// PROCEDURES - EVENTS PROCESSING OF THE FORM

Procedure OnOpen()
	If NotValid = False Then
		Controls.Code.Mask = GetAccountMask();
	EndIf;
	
	If IsNew() Then
		
		If Parent.IsEmpty() Then
			
			BalanceSide = Enums.AccountBalanceSides.DrCr;
			
		Else
			
			SetAttributesFromParent();
			CurrentControl = Controls.Code;
			
		EndIf;
		
		FinancialYearsBegin = CommonAtServer.GetLastFinancialYear();
		FinancialYearsBeginOnChange(Undefined);
		
	EndIf;
	
	Updatedialog();
	
EndProcedure

////////////////////////////////////////////////////////////////////////////////
// PROCEDURES - EVENTS PROCESSING OF ATTRIBUTES OF HEADER

Procedure ParentOnChange(Control)
	
	Controls.Code.Mask = GetAccountMask();
	SetAttributesFromParent();
	
EndProcedure

Procedure DescriptionStartListChoice(Control, StandardProcessing)
	
	Control.ChoiceList.Clear();
	If Not Parent.IsEmpty() Then
		Control.ChoiceList.Add(Parent.Description);
	EndIf;
	
EndProcedure

Procedure PurposeOnChange(Control)
	
	SetAttributesByPurpose();
	
EndProcedure

Procedure CurrencyOnChange(Control)
	
	Updatedialog();
	
	// set default value
	For Each Item In ExtDimensionTypes Do
		Item.Currency = Currency;
	EndDo;
	
EndProcedure

Procedure ExtDimension1TypeOnChange(Control)
	
	ExtDimension1Mandatory = Not ExtDimension1Type.IsEmpty();
	
EndProcedure

Procedure ExtDimension1TypeOpening(Control, StandardProcessing)
	
	StandardProcessing = False;
	OpenExtDimensionValues(ExtDimension1Type);
	
EndProcedure

Procedure ExtDimension2TypeOnChange(Control)
	
	ExtDimension2Mandatory = Not ExtDimension2Type.IsEmpty();
	
EndProcedure

Procedure ExtDimension2TypeOpening(Control, StandardProcessing)
	
	StandardProcessing = False;
	OpenExtDimensionValues(ExtDimension2Type);
	
EndProcedure

Procedure ExtDimension3TypeOnChange(Control)
	
	ExtDimension3Mandatory = Not ExtDimension3Type.IsEmpty();
	
EndProcedure

Procedure ExtDimension3TypeOpening(Control, StandardProcessing)
	
	StandardProcessing = False;
	OpenExtDimensionValues(ExtDimension3Type);
	
EndProcedure

////////////////////////////////////////////////////////////////////////////////
// PROCEDURES - EVENTS PROCESSING OF EXT DIMENSIONS LIST

Procedure ExtDimensionTypesSelection(Control, RowSelected, Column, StandardProcessing)
	
	If Column <> Control.Columns.OpenExtDimension Then
		Return;
	EndIf;
	
	SelectedExtDimension = RowSelected.ExtDimensionType;
	
	If ValueIsNotFilled(SelectedExtDimension) Then
		Return;
	EndIf;
	
	TypesArray = SelectedExtDimension.ValueType.Types();
	TypesValueList = New ValueList;
	
	For Each ArrayElement In TypesArray Do
		
		ObjectRef = New(ArrayElement);
		
		If Catalogs.AllRefsType().ContainsType(ArrayElement) Then
			ExtDimensionTypePresentation = NStr("en='Catalog';pl='Katalog';ru='Справочник'") + " " + ObjectRef.Metadata().Synonym;
		ElsIf Documents.AllRefsType().ContainsType(ArrayElement) Then
			ExtDimensionTypePresentation = NStr("en='Documents';pl='Dokumenty';ru='Документы'") + " " + ObjectRef.Metadata().Synonym;
		ElsIf Enums.AllRefsType().ContainsType(ArrayElement) Then
			ExtDimensionTypePresentation = NStr("en='Enumeration';pl='Enumeracja';ru='Перечисление'") + " " + ObjectRef.Metadata().Synonym;
		EndIf;
		
		TypesValueList.Add(ArrayElement, ExtDimensionTypePresentation);
		
	EndDo;
	
	If TypesValueList.Count() = 1 Then
		ValueListItem = TypesValueList[0];
	Else
		ValueListItem = ChooseFromMenu(TypesValueList);
	EndIf;
	
	If ValueListItem = Undefined Then
		Return;
	EndIf;
	
	ExtDimensionType = ValueListItem.Value;
	
	ObjectRef = New(ExtDimensionType);
	ObjectName = ObjectRef.Metadata().Name;
	
	If Catalogs.AllRefsType().ContainsType(ExtDimensionType) Then
		ListForm = Catalogs[ObjectName].GetListForm();
		If ExtDimensionType = TypeOf(Catalogs.BookkeepingAccountsExtraDimensionsValues.EmptyRef()) Then
			ListForm.CatalogList.Filter.Owner.Set(SelectedExtDimension);
		EndIf;
	ElsIf Documents.AllRefsType().ContainsType(ExtDimensionType) Then
		ListForm = Documents[ObjectName].GetListForm();
	ElsIf Enums.AllRefsType().ContainsType(ExtDimensionType) Then
		ListForm = Enums[ObjectName].GetListForm();
	EndIf;
	
	ListForm.Open();
	
EndProcedure

Procedure ExtDimensionTypesOnStartEdit(Control, NewRow, Clone)
	
	If NewRow And Not Clone Then
		
		LinesRow = Control.CurrentData;
		LinesRow.Mandatory = True;
		
	EndIf;
	
EndProcedure

Procedure ExtDimensionTypesOnRowOutput(Control, RowAppearance, RowData)
	
	RowAppearance.Cells.OpenExtDimension.SetText(NStr("en = 'Open ext dimension'; pl = 'Otwórz analitykę'"));
	
EndProcedure

////////////////////////////////////////////////////////////////////////////////
// OTHER PROCEDURES AND FUNCTIONS

Procedure Updatedialog()
	
	ReadOnlyStatus = Not Parent.IsEmpty();
	Controls.BalanceType.ReadOnly = ReadOnlyStatus;
	Controls.Purpose.ReadOnly = ReadOnlyStatus;
	Controls.Currency.Enabled = Not ReadOnlyStatus;
	Controls.Code.Enabled = Not NotValid;
	
EndProcedure

Procedure OpenExtDimensionValues(SelectedExtDimension)
	
	If ValueIsNotFilled(SelectedExtDimension) Then
		Return;
	EndIf;
	
	TypesArray = SelectedExtDimension.ValueType.Types();
	TypesValueList = New ValueList;
	
	For Each ArrayElement In TypesArray Do
		
		ObjectRef = New(ArrayElement);
		
		If Catalogs.AllRefsType().ContainsType(ArrayElement) Then
			ExtDimensionTypePresentation = NStr("en='Catalog';pl='Katalog';ru='Справочник'") + " " + ObjectRef.Metadata().Synonym;
		ElsIf Documents.AllRefsType().ContainsType(ArrayElement) Then
			ExtDimensionTypePresentation = NStr("en='Documents';pl='Dokumenty';ru='Документы'") + " " + ObjectRef.Metadata().Synonym;
		ElsIf Enums.AllRefsType().ContainsType(ArrayElement) Then
			ExtDimensionTypePresentation = NStr("en='Enumeration';pl='Enumeracja';ru='Перечисление'") + " " + ObjectRef.Metadata().Synonym;
		EndIf;
		
		TypesValueList.Add(ArrayElement, ExtDimensionTypePresentation);
		
	EndDo;
	
	If TypesValueList.Count() = 1 Then
		ValueListItem = TypesValueList[0];
	Else
		ValueListItem = ChooseFromMenu(TypesValueList);
	EndIf;
	
	If ValueListItem = Undefined Then
		Return;
	EndIf;
	
	ExtDimensionType = ValueListItem.Value;
	
	ObjectRef = New(ExtDimensionType);
	ObjectName = ObjectRef.Metadata().Name;
	
	FormPath = "";	
	Parameters = New Structure();
	If Catalogs.AllRefsType().ContainsType(ExtDimensionType) Then
		FormPath = "Catalog."+ObjectName+".ListForm";
		If ExtDimensionType = Type("CatalogRef.BookkeepingAccountsExtraDimensionsValues") Then
			Filter = New Structure("Owner",SelectedExtDimension);
			Parameters.Insert("Filter",Filter);
		EndIf;
	ElsIf Documents.AllRefsType().ContainsType(ExtDimensionType) Then
		FormPath = "Document."+ObjectName+".ListForm";
	ElsIf Enums.AllRefsType().ContainsType(ExtDimensionType) Then
		FormPath = "Enum."+ObjectName+".ListForm";
	EndIf;
	
	OpenForm(FormPath,Parameters,ThisForm);
	
EndProcedure

Procedure GenerateCode()
	If NotValid Then
		StrValue = ?(Left(Code, 1) = "*" , "", "*") + Code;
		If Find(StrValue, " (") > 0 Then
			StrValue = Left(StrValue, Find(StrValue, " (") - 1);
		EndIf;
		//StrValue = StrValue + ?(ValueIsFilled(FinancialYearsEnd), Format(FinancialYearsEnd.DateTo,"DF=' (yyyy)'"),"");
		StrValue = StrValue + ?(ValueIsFilled(FinancialYearsEnd), " (" + TrimAll(FinancialYearsEnd.Description) + ")","");
		Controls.Code.Mask = "";
		Controls.Code.Value = StrValue;
		//Controls.Code.Mask = GetAccountMask();
		
	Else
		
		Controls.Code.Mask = GetAccountMask();
		If Left(Code, 1) = "*" Then
			Code = Right(Code, StrLen(Code) - 1);
		EndIf;
		If Find(Code, " (") > 0 Then
			Code = Left(Code, Find(Code, " (") - 1);
		EndIf;
	EndIf;
EndProcedure

Procedure ValidOnChange(Control)
	Controls.Code.Enabled = Not Control.Value;
	Controls.FinancialYearsEnd.Enabled = Control.Value;
	If NotValid Then
		FinancialYearsEnd = CommonAtServer.GetLastFinancialYear();
		FinancialYearsEndOnChange(Undefined);
	Else
		FinancialYearsEnd = "";
	EndIf;
	GenerateCode();
EndProcedure

Procedure CodeOnChange(Control)
	//If Left(Control.Value, 1) = "*" And Not NotValid Then
	//	Control.Value = Right(Control.Value, StrLen(Control.Value) - 1);
	//EndIf;
	If Not NotValid Then
		Presentation = Control.Value;
	EndIf;
EndProcedure

Procedure FinancialYearsBeginOnChange(Control)
	If ValueIsFilled(FinancialYearsBegin) Then
		If Not IsNew() Then
			BeginUsingAccount = GetDateUsingAccount(Ref).BeginUsing;
			If ValueIsFilled(BeginUsingAccount) Then
				If FinancialYearsBegin.DateFrom > BeginUsingAccount Then
					Message(Alerts.ParametrizeString(NStr("en='The account is used since %P1!';pl='Konto jest używane od %P1 roku!';ru='Счет уже используется с %P1 года!'"), New Structure("P1", Format(BeginUsingAccount,"DF=yyyy"))), MessageStatus.VeryImportant);
					FinancialYearsBegin = "";
				EndIf;
			EndIf;
		EndIf;
	EndIf;
EndProcedure

Procedure FinancialYearsEndOnChange(Control)
	If ValueIsFilled(FinancialYearsEnd) Then
		If Not IsNew() Then
			EndUsingAccount = GetDateUsingAccount(Ref).EndUsing;
			If ValueIsFilled(EndUsingAccount) Then
				If FinancialYearsEnd.DateTo < EndUsingAccount Then
					Message(Alerts.ParametrizeString(NStr("en='The account is used to %P1!';pl='Konto jest używane do %P1 roku!';ru='Счет уже используется в %P1 году!'"), New Structure("P1", Format(EndUsingAccount,"DF=yyyy"))), MessageStatus.VeryImportant);
					FinancialYearsEnd = "";
				EndIf;
			EndIf;
		EndIf;
	EndIf;
	GenerateCode();
EndProcedure

Function GetDateUsingAccount(Account)
	
	ResStructure = New Structure("BeginUsing, EndUsing", Undefined, Undefined);
	
	Query = New Query;
	Query.Text = "SELECT
	             |	MIN(BookkeepingTurnovers.Period) AS BeginUsing,
	             |	MAX(BookkeepingTurnovers.Period) AS EndUsing
	             |FROM
	             |	AccountingRegister.Bookkeeping.Turnovers(, , Month, Account = &Account, , ) AS BookkeepingTurnovers";
	
	Query.SetParameter("Account", Account);
	
	Result = Query.Execute();
	Selection = Result.Select();
	
	If Selection.Next() Then
	
		ResStructure.BeginUsing = Selection.BeginUsing;
		ResStructure.EndUsing = Selection.EndUsing;
	
	EndIf;
	
	Return ResStructure;
	
EndFunction

Procedure FormActionsAction4(Button)
	If Not IsNew() Then
		DataProcessorsAnalyzesUsingAccount = DataProcessors.AnalyzesUsingAccount.Create();
		If ValueIsFilled(FinancialYearsEnd) Then
			DataProcessorsAnalyzesUsingAccount.Date = FinancialYearsEnd.DateTo + 1;
		Else 
			DataProcessorsAnalyzesUsingAccount.Date = GetServerDate();
		EndIf;
		DataProcessorsAnalyzesUsingAccount.Account = Ref;
		Form = DataProcessorsAnalyzesUsingAccount.GetForm();
		Form.Open();
	EndIf;
EndProcedure
