////////////////////////////////////////////////////////////////////////////////
// PROCEDURES - EVENTS PROCESSING OF THE FORM

Procedure OnOpen()
	
	Company = CommonAtServer.GetUserSettingsValue("Company");
	
	// Restore user's saved values.
	RestoredMarkAccountsInColor = RestoreValue("ChartOfAccountPrintOut_MarkAccountsInColor");
	MarkAccountsInColor = ?(RestoredMarkAccountsInColor = Undefined, True, RestoredMarkAccountsInColor);
	PrintRemarks = RestoreValue("ChartOfAccountPrintOut_PrintRemarks");
	PrintDeletionMarked = RestoreValue("ChartOfAccountPrintOut_PrintDeletionMarked");
	
EndProcedure

////////////////////////////////////////////////////////////////////////////////
// PROCEDURES - EVENTS PROCESSING OF ATTRIBUTES OF HEADER

Procedure FormMainActionsGenerate(Button)
	
	If Company.IsEmpty() Then
		DoMessageBox(NStr("en='Please, choose the company.';pl='Wypełnij firmę przed drukowaniem planu kont.';ru='Заполните поле Организация перед печатью плана счетов.'"));
		Return;
	EndIf;
	
	// Save values every time when user generates report.
	SaveValue("ChartOfAccountPrintOut_MarkAccountsInColor", MarkAccountsInColor);
	SaveValue("ChartOfAccountPrintOut_PrintRemarks", PrintRemarks);
	SaveValue("ChartOfAccountPrintOut_PrintDeletionMarked", PrintDeletionMarked);
	
	Spreadsheet = New SpreadsheetDocument;
	
	LanguageCode = Common.GetDefaultLanguageCodeAndDescription().LanguageCode;
	
	GenerationDate = CurrentDate(); // fixing generation time
	
	// Getting templates
	Template = ChartsOfAccounts.Bookkeeping.GetTemplate("PrintOutTemplate");
	Template.TemplateLanguageCode = LanguageCode;
	
	Header = Template.GetArea("Header");
	AccountHeader = Template.GetArea("AccountHeader");
	
	CompanyVATNumber = Taxes.GetBusinessPartnerVATNumberDescription(CurrentDate(),Company,LanguageCode);
	CompanyName      = InformationRegisters.BusinessPartnersAttributesHistory.GetLast(CurrentDate(), New Structure("BusinessPartner, Attribute", Company, Enums.BusinessPartnersAttributesTypes.LongDescription)).Description;
	
	CompanyAddressRecord = InformationRegisters.BusinessPartnersAttributesHistory.GetLast(CurrentDate(), New Structure("BusinessPartner, Attribute", Company, Enums.BusinessPartnersAttributesTypes.LegalAddress));
	
	Header.Drawings.CompanyLogo.Picture = CommonAtServer.GetCompanyLogo(Company);
	Header.Parameters.CompanyName      = CompanyName;
	Header.Parameters.CompanyAddress   = CompanyAddressRecord.Description;
	Header.Parameters.CompanyVATNumber = CompanyVATNumber;
	
	Spreadsheet.Put(Header);
	Spreadsheet.Put(AccountHeader);
	
	SpreadSheet.RepeatOnRowPrint = Spreadsheet.Area(Spreadsheet.TableHeight, , Spreadsheet.TableHeight);
	
	Query = New Query;
	Query.Text = "SELECT
	             |	Bookkeeping.Ref,
	             |	Bookkeeping.Code AS Code,
	             |	Bookkeeping.Description,
	             |	Bookkeeping.Parent,
	             |	Bookkeeping.BalanceType AS BalanceType,
	             |	REFPRESENTATION(Bookkeeping.BalanceType) AS BalanceTypePresentation,
	             |	Bookkeeping.Remarks,
	             |	Bookkeeping.Currency,
	             |	Bookkeeping.ExtDimensionTypes.(
	             |		LineNumber AS LineNumber,
	             |		ExtDimensionType.Presentation AS ExtDimensionType,
	             |		Mandatory,
	             |		TurnoversOnly
	             |	)
	             |FROM
	             |	ChartOfAccounts.Bookkeeping AS Bookkeeping
	             |WHERE
	             |	Bookkeeping.DeletionMark IN (&DeletionMarkTrue, &DeletionMarkFalse)
	             |
	             |ORDER BY
	             |	Code,
	             |	LineNumber";
	
	Query.SetParameter("DeletionMarkTrue", PrintDeletionMarked);
	Query.SetParameter("DeletionMarkFalse", False);
	
	LineNumber = 0;
	ParentsStack = New Array;
	ParentsStack.Add(ChartsOfAccounts.Bookkeeping.EmptyRef());
	CurrentLevel = 0;
	RemarksIsPrinted = False;
	
	Spreadsheet.StartRowAutoGrouping();
	
	Selection = Query.Execute().Select();
	While Selection.Next() Do
		
		LineNumber = LineNumber + 1;
		
		AccountRow = Template.GetArea("AccountRow");
		AccountRowRemarks = Template.GetArea("AccountRowRemarks");
		
		ParentsStackIndex = ParentsStack.Find(Selection.Parent);
		If ParentsStackIndex = Undefined Then // new parent, new level
			CurrentLevel = CurrentLevel + 1;
			ParentsStack.Add(Selection.Parent);
			Spreadsheet.Area(Spreadsheet.TableHeight - RemarksIsPrinted, 1, Spreadsheet.TableHeight, Spreadsheet.TableWidth).Font = New Font(Spreadsheet.Area(Spreadsheet.TableHeight, 2).Font, , , True);
		ElsIf ParentsStackIndex = ParentsStack.UBound() Then // current level
			// Nothing to do.
		Else
			CurrentLevel = ParentsStackIndex;
			While ParentsStack.UBound() > ParentsStackIndex Do
				ParentsStack.Delete(ParentsStack.UBound());
			EndDo;
		EndIf;
		AccountRow.Parameters.LineNumber = LineNumber;
		AccountRow.Parameters.Ref = Selection.Ref;
		AccountRow.Parameters.Code = Selection.Code;
		AccountRow.Parameters.Description = Selection.Description;
		AccountRow.Parameters.BalanceType = Selection.BalanceTypePresentation;
		AccountRow.Parameters.Currency = Format(Selection.Currency, "BF=; BT=+");
				
		ExtDimensionsSelection = Selection.ExtDimensionTypes.Select();
		While ExtDimensionsSelection.Next() Do
			
			ExtDimensionPresentation = ExtDimensionsSelection.ExtDimensionType;
			
			If Not ExtDimensionsSelection.Mandatory Or ExtDimensionsSelection.TurnoversOnly Then
				
				ExtDimensionPresentation = ExtDimensionPresentation + " (";
				
				If Not ExtDimensionsSelection.Mandatory Then
					ExtDimensionPresentation = ExtDimensionPresentation + NStr("en='not mandatory';pl='nie wymagana';ru='необязательная'", LanguageCode) + ", ";
				EndIf;
				
				If ExtDimensionsSelection.TurnoversOnly Then
					ExtDimensionPresentation = ExtDimensionPresentation + NStr("en='turnovers only';pl='tylko obroty';ru='только обороты'", LanguageCode) + ", ";
				EndIf;
				
				ExtDimensionPresentation = Left(ExtDimensionPresentation, StrLen(ExtDimensionPresentation) - 2);
				ExtDimensionPresentation = ExtDimensionPresentation + ")";
				
			EndIf;
			
			AccountRow.Parameters["ExtDimension" + ExtDimensionsSelection.LineNumber] = ExtDimensionPresentation;
			
		EndDo;
		
		Spreadsheet.Put(AccountRow, CurrentLevel);
		
		If PrintRemarks And Not IsBlankString(Selection.Remarks) Then
			
			AccountRowRemarks.Parameters.Ref = Selection.Ref;
			AccountRowRemarks.Parameters.Remarks = Selection.Remarks;
			
			Spreadsheet.Put(AccountRowRemarks, CurrentLevel);
			RemarksIsPrinted = True;
			
		Else
			
			RemarksIsPrinted = False;
			
		EndIf;
		
		Spreadsheet.Area(Spreadsheet.TableHeight, 1, Spreadsheet.TableHeight, 2).BottomBorder = New Line(SpreadsheetDocumentCellLineType.Dotted);
		
		If MarkAccountsInColor Then
			If Selection.BalanceType = Enums.AccountBalanceTypes.Result Then
				Spreadsheet.Area(Spreadsheet.TableHeight - RemarksIsPrinted, 1, Spreadsheet.TableHeight, Spreadsheet.TableWidth).BackColor = StyleColors.BlueColor;
			ElsIf Selection.BalanceType = Enums.AccountBalanceTypes.OffBalance Then
				Spreadsheet.Area(Spreadsheet.TableHeight - RemarksIsPrinted, 1, Spreadsheet.TableHeight, Spreadsheet.TableWidth).BackColor = StyleColors.YellowColor;
			EndIf;
		EndIf;
		
	EndDo;
	
	Spreadsheet.Area(Spreadsheet.TableHeight, 1, Spreadsheet.TableHeight, Spreadsheet.TableWidth).BottomBorder = New Line(SpreadsheetDocumentCellLineType.Solid);
	
	Spreadsheet.EndRowAutoGrouping();
	
	// Printing parameters.
	Spreadsheet.PageOrientation = PageOrientation.Landscape;
	Spreadsheet.FitToPage = True;
	
	// Header and footer values.
	Spreadsheet.Header.Enabled   = True;
	Spreadsheet.Footer.Enabled   = True;
	
	Spreadsheet.Header.LeftText  = Nstr("en='Company';pl='Firma';ru='Организация'", LanguageCode)+": " + CompanyName + " " + CompanyVATNumber;
	Spreadsheet.Header.RightText = Nstr("en='Chart of account';pl='Plan kont';ru='План счетов'", LanguageCode)+". " + Nstr("en='Generated';pl='Wygenerowany';ru='Сформированный'", LanguageCode)+": " + GenerationDate;
	
	Spreadsheet.Footer.LeftText  = CommonAtServer.GetGeneratedByText();
	Spreadsheet.Footer.RightText = NStr("en='Page [&PageNumber] from [&PagesTotal]';pl='Strona [&PageNumber] z [&PagesTotal]';ru='Страница [&PageNumber] из [&PagesTotal]'");
	
	GeneralPrintoutForm = Printouts.GetGeneralPrintoutForm();
	If GeneralPrintoutForm.IsOpen() Then
		GeneralPrintoutForm.Controls.ReportsPanel.Pages.Delete(1);
	EndIf;	
	Printouts.PrintSpreadsheet(Spreadsheet,GeneralPrintoutForm,Enums.PrintMode.Form,Metadata.ChartsOfAccounts.Bookkeeping.Synonym,1);
	GeneralPrintoutForm.Open();
	Close();
	
EndProcedure
