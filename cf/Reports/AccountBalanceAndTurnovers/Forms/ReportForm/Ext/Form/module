Procedure BeforeOpen(Cancel, StandardProcessing)
		
	If Not IsDetailProcessing 
	   AND Not SettingsSaving.FillSettingsOnReportOpening(ReportObject) Then
		ReportInitialization();
		InitPeriodValue();
	EndIf;

	TemplateReports.AssignToFormUniqueID(ThisForm);
	TemplateReports.UpdateTemplateReportFormOnComposer(ReportObject, ThisForm);
	TemplateReports.TemplateReportFormControlsPresentationManging(ReportObject, ThisForm);
	
EndProcedure

Procedure OnOpen()
	
	If GenerateOnOpen Then
		SettingsComposer.LoadSettings(SettingsOfComposerOnOpenData);
		InitPeriodValue();
		TemplateReports.UpdateTemplateReportFormOnComposer(ReportObject, ThisForm);
		RefreshReport();
		GenerateOnOpen = False;
	EndIf;	

	RefreshFilterOnFormOnChange();
	
EndProcedure

Procedure FormActionsSettings(Button)
	
	If TemplateReports.EditTemplateReportSettings(ReportObject, ThisForm) Then
		RefreshReport();
	EndIf;
	
EndProcedure

Procedure FormActionsGenerate(Button)
		
	RefreshReport();
	
EndProcedure

Procedure CompanyOnChange(Control)
	
	CompanyParameter = SettingsComposer.Settings.DataParameters.FindParameterValue(New DataCompositionParameter("Company"));
	CompanyParameter.Use = True;
	CompanyParameter.Value = Company;

EndProcedure

Function GetPeriodPresentation(BeginPeriod, EndPeriod)
	
	If TypeOf(BeginPeriod) = Type("StandardBeginningDate") Then
		BeginPeriod = BeginPeriod.Date;
	EndIf;	
	
	If TypeOf(EndPeriod) = Type("StandardBeginningDate") Then
		EndPeriod = EndPeriod.Date;
	EndIf;	
	
	If BeginPeriod = '00010101' And EndPeriod = '00010101' Then
		
		Return NStr("en = 'Period is not setted'; pl = 'Okres nie jest ustawiony!'");
		
	ElsIf BeginPeriod = '00010101' Or EndPeriod = '00010101' Then
		
		Return Format(BeginPeriod, "DF=dd.MM.yyyy; DE=...") + " - " + Format(EndPeriod, "DF=dd.MM.yyyy; DE=...");
		
	ElsIf BeginPeriod <= EndPeriod Then
		
		Return PeriodPresentation(BegOfDay(BeginPeriod), EndOfDay(EndPeriod), "FP = True");
		
	Else
		
		Return NStr("en='Incorrect period!';pl='Niepoprawny okres!';ru='Недопустимый период!'");
		
	EndIf;
	
EndFunction // GetPeriodPresentation()

Procedure FormActionsHeader(Button)
	
	Button.Check = Not Button.Check;
	TemplateReports.TemplateReportFormControlsPresentationManging(ReportObject, ThisForm);
	TemplateReports.TemplateReportHeaderPresentationManaging(ReportObject, ThisForm.Controls.Result);
	
EndProcedure

Procedure FormActionsOpenInNewWindow(Button)
	
	TemplateReports.OpenTemplateReportInNewWindow(ReportObject, ThisForm);
	
EndProcedure

Procedure FormActionsRestoreSettings(Button)
	
	SettingsSaving.SelectFormSetting(SavedSetting, ThisForm, "ReportObject." + ReportObject.Metadata().Name, False);
	TemplateReports.UpdateTemplateReportFormOnComposer(ReportObject, ThisForm);
	TemplateReports.UpdateTemplateReportHeader(ReportObject, ThisForm);
	
EndProcedure

Procedure FormActionsSaveValues(Button)
	
	SettingsSaving.SelectFormSetting(SavedSetting, ThisForm, "ReportObject." + ReportObject.Metadata().Name, True);
	TemplateReports.UpdateTemplateReportHeader(ReportObject, ThisForm);
	
EndProcedure

Procedure FormActionsFilter(Button)
	
	Button.Check = Not Button.Check;
	ShowQuickFilter = Button.Check;
	TemplateReports.TemplateReportFormControlsPresentationManging(ReportObject, ThisForm);
	TemplateReports.TemplateReportChangesProcessingInFormReport(ReportObject, ThisForm);
	
EndProcedure

Procedure RefreshDisplay()
	
	TemplateReports.UpdateTemplateReportHeader(ReportObject, ThisForm);
	
EndProcedure

Procedure ButtonPeriodSettingClick(Control)
	
	TemplateReports.SetupPeriod(PeriodSettings, BeginPeriod, EndPeriod);
	TemplateReports.UpdatePeriodParametersOnForm(SettingsComposer, ThisForm);
	TemplateReports.TemplateReportChangesProcessingInFormReport(ReportObject, ThisForm);
	
EndProcedure

Procedure TextBoxPeriodOnChange(Control)
	
	TemplateReports.UpdatePeriodParametersOnForm(SettingsComposer, ThisForm);
	TemplateReports.TemplateReportChangesProcessingInFormReport(ReportObject, ThisForm);
	
EndProcedure

Procedure ResultDetailProcessing(Control, Details, StandardProcessing)
	
	TemplateReports.TemplateReportDetailsProcessing(Details, StandardProcessing, ReportObject, ThisForm);
	
EndProcedure

Procedure FormActionsPrint(Button)
	
	TemplateReports.PrintTemplateReport(Controls.Result);
	
EndProcedure

Procedure RefreshReport() Export
	
	If Company.IsEmpty() Then
		DoMessageBox(NStr("en = 'Please input ''Company'''; pl = 'Wypełnij pole ''Firma'''"));
		Return;
	EndIf;
	
	CompanyParameter = SettingsComposer.Settings.DataParameters.FindParameterValue(New DataCompositionParameter("Company"));
	CompanyParameter.Use = True;
	CompanyParameter.Value = Company;
	
	Spreadsheet = Controls.Result;
	
	LanguageCode = Common.GetDefaultLanguageCodeAndDescription().LanguageCode;
	
	GenerationDate = CurrentDate();
		
	BeginPeriodParameterValue = SettingsComposer.Settings.DataParameters.FindParameterValue(New DataCompositionParameter("BeginOfPeriod"));
	EndPeriodParameterValue = SettingsComposer.Settings.DataParameters.FindParameterValue(New DataCompositionParameter("EndOfPeriod"));

	GenerateReport(ThisForm.Controls.Result, ThisForm.DetailsData);
	
	Spreadsheet.Header.Enabled   = True;
	Spreadsheet.Footer.Enabled   = True;
	
	Spreadsheet.Header.LeftText  = Nstr("pl='Firma';ru='Организация'",LanguageCode)+": " + Common.GetLongDescription(Company) + " " + Nstr("en='TIN';pl='NIP';ru='ИНН'",LanguageCode)+": " + Taxes.GetVATNumberPresentation(Company.VATNumber);
	Spreadsheet.Header.RightText = Metadata().Synonym + ". " + GetPeriodPresentation(BeginPeriodParameterValue.Value, EndPeriodParameterValue.Value) + " "+Nstr("pl='Wygenerowany';ru='Сформированный'",LanguageCode)+": " + GenerationDate;
	
	Spreadsheet.Footer.LeftText  = CommonAtServer.GetGeneratedByText();
	Spreadsheet.Footer.RightText = Nstr("pl='Strona [&PageNumber] z [&PagesTotal]';ru='Страница [&PageNumber] из [&PagesTotal]'",LanguageCode);
	
EndProcedure

Procedure TableBoxFilterOnEditEnd(Control, NewRow, CancelEditing)
	
	TemplateReports.TemplateReportChangesProcessingInFormReport(ReportObject, ThisForm);
	
EndProcedure

Procedure InitPeriodValue()
	
	BeginOfPeriod_Param = TemplateReports.SetParameter(SettingsComposer,"BeginOfPeriod");
	If BeginOfPeriod_Param <> Undefined AND BeginOfPeriod_Param.Value = '00010101' Then
		TemplateReports.SetParameter(SettingsComposer,"BeginOfPeriod",CommonAtServer.GetUserSettingsValue("ReportsGeneralStartDate",SessionParameters.CurrentUser));
	EndIf;	
	
	TemplateReports.SetParameter(SettingsComposer,"EndOfPeriod");
	TemplateReports.SetParameter(SettingsComposer,"Period");	
	
EndProcedure

Procedure RefreshFilterOnFormOnChange()	
	
	CompanyParameter = SettingsComposer.Settings.DataParameters.FindParameterValue(New DataCompositionParameter("Company"));
	If CompanyParameter.Use Then
		Company = CompanyParameter.Value;
	EndIf;	
	
EndProcedure	

Procedure FormActionsSendReportByEmail(Button)
	
	Printouts.SendReportByEMail(Nstr("en='Report';pl='Raport'") + " " + ReportObject.SettingsComposer.Settings.OutputParameters.FindParameterValue(New DataCompositionParameter("Title")).Value,Nstr("en='Report';pl='Raport'") + " " + ReportObject.SettingsComposer.Settings.OutputParameters.FindParameterValue(New DataCompositionParameter("Title")).Value,Controls.Result);
	
EndProcedure

Procedure FormActionsSaveAndOpenAsXLS(Button)
	TempXLSFile = Printouts.SaveReportAsXLS(Controls.Result,Nstr("en='Report';pl='Raport'") + " " +ThisForm.Caption);
	If NOT IsBlankString(TempXLSFile) Then
		RunApp(TempXLSFile,,False);
	EndIf;	
EndProcedure

Procedure FormActionsSaveAsXLS(Button)
	TempXLSFile = Printouts.SaveReportAsXLS(Controls.Result,Nstr("en='Report';pl='Raport'") + " " +ThisForm.Caption,,True);
EndProcedure


Procedure FormActionsSaveAndOpenAsPDF(Button)
	Printouts.SaveReportAsPDF(Controls.Result,Nstr("en='Report';pl='Raport'") + " " +ThisForm.Caption,,,True);
EndProcedure


Procedure FormActionsSaveAsPDF(Button)
	Printouts.SaveReportAsPDF(Controls.Result,Nstr("en='Report';pl='Raport'") + " " +ThisForm.Caption,,True);
EndProcedure


Procedure TableBoxFilterDragCheck(Control, DragParameters, StandardProcessing, Row, Column)
	TemplateReports.FilterDragCheck(SettingsComposer, Control, DragParameters, StandardProcessing, Row, Column);
EndProcedure

Procedure TableBoxFilterDrag(Control, DragParameters, StandardProcessing, Row, Column)
	TemplateReports.FilterDrag(SettingsComposer,Control, DragParameters, StandardProcessing, Row, Column);
EndProcedure


