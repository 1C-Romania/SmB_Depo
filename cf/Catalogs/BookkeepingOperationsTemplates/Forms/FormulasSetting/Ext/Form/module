
////////////////////////////////////////////////////////////////////////////////
// GENERAL PURPOSE PROCEDURES AND FUNCTIONS


// Insert into formula from given row an expression
//
// Parameters:
//  Str            - String - formula expression
//  VTRow       - ValueTable row to which will be added expression
// 
Procedure InsertToText(Str, VTRow=Undefined) Export

	If VTRow <> Undefined Then
		
		VTRow.Formula = TrimAll(Str);

	EndIf;

EndProcedure

// Set form caption
//
Procedure SetFormCaption()

	RecNo        = 1 + FormOwner.Controls.Records.Value.Indexof(TableRow);
	ThisForm.Caption = Nstr("en = 'Record Nr'; pl = 'Zapis nr'")+" " + RecNo + ". "+ Nstr("en = 'Formulas for attributes values calculation'; pl = 'Wzory dla wyliczenia wartości atrybutów'");

EndProcedure

////////////////////////////////////////////////////////////////////////////////
// TABLEBOX FormulasTable EVENTS HANDLERS

Procedure FormulasTableBeforeAddRow(Control, Cancel, Copying)

	Cancel = True;

EndProcedure

Procedure FormulasTableBeforeDeleteRow(Control, Cancel)

	Cancel = True;

EndProcedure

Procedure FormulasTableFormulaStartChoice(Control, StandardProcessing)

	StandardProcessing = False;

	Tab = TableBox;

	VTRow    = Controls.FormulasTable.CurrentData;
	ColumnName  = VTRow.Name;
	ColumnTypes = Accounting.GetAccountingRecordsColumnType(FormOwner.Metadata(), Tab, TableRow, ColumnName);

	SelectionForm = Catalogs.BookkeepingOperationsTemplates.GetForm("EditFormula", FormOwner);

	SelectionForm.FilterByType     = True;
	SelectionForm.ColumnTypes     = ColumnTypes;
	SelectionForm.ColumnName      = ColumnName;
	SelectionForm.CurrentRecord = TableRow;
	SelectionForm.DocumentBase = FormOwner.DocumentBase;
	SelectionForm.TableBox = TableBox;
	SelectionForm.AlternateFormOwner = FormOwner;
	SelectionForm.Formula = VTRow.Formula;
	
	SelectionForm.FillParametersTree();
	SelectionForm.Caption = Nstr("en = 'Choose parameter'; pl = 'Wybierz parametr'");

	ReturnFormula = SelectionForm.DoModal();

	If ReturnFormula = Undefined Then
		Return
	EndIf;

	InsertToText(ReturnFormula, VTRow);

EndProcedure

////////////////////////////////////////////////////////////////////////////////
// FORMS ACTIONS HANDLERS

Procedure OnOpen()

	SetFormCaption();

EndProcedure

Procedure ObjectActivationProcessing(ActiveObject, Source)

	SetFormCaption();

EndProcedure

////////////////////////////////////////////////////////////////////////////////
// CONTROLS EVENTS HANDLERS

Procedure ButtonOKOnClick(Control)

	For each Row In Controls.FormulasTable.Value Do
		FormOwner.SetFormula(TableBox,TableRow, Row.Name, Row.Formula);
	EndDo;
	
	Close();

EndProcedure
