Var SuitableOperationsList;

Procedure SetFilterByDocument(Document, CurrentItem = Undefined) Export
	
	If ValueIsFilled(Document) Then
		SuitableOperationsList = BookkeepingCommon.GetListOfAvailableBookkeepingOperationTemplates(Document);
	EndIf;
	
	If Document = Undefined Then
		CurFilter = Filter.DocumentBase;
		CurFilter.ComparisonType = ComparisonType.NotEqual;
		CurFilter.Value = Undefined;
		CurFilter.Use = True;
	Else
		Filter.DocumentBase.Set(Documents[Document.Metadata().Name].EmptyRef());
	EndIf;
	
	If CurrentItem <> Undefined AND CurrentItem <> Catalogs.BookkeepingOperationsTemplates.EmptyRef() Then
		Controls.List.CurrentRow = CurrentItem;
	EndIf;
	
	Controls.List.HierarchicalView = False;
	
EndProcedure

Procedure SetFilter(Document, FilterStructure) Export
	
	For Each KeyAndValue In FilterStructure Do
		Filter[KeyAndValue.Key].Set(KeyAndValue.Value);
	EndDo;
	
	If Document <> Undefined Then
		Controls.List.CurrentRow = Document;
	EndIf;
	
EndProcedure

Procedure ListOnDataGet(Control, RowAppearances)
	
	For Each RowAppearance In RowAppearances Do
		
		If Not RowAppearance.RowData.IsFolder Then
			
			If RowAppearance.RowData.DocumentBase <> Undefined Then
				RowAppearance.Cells.DocumentBase.Text = RowAppearance.RowData.DocumentBase.Metadata().Synonym;
			EndIf;
			
			If SuitableOperationsList.FindByValue(RowAppearance.RowData.Ref) = Undefined Then
				RowAppearance.Cells.Description.SetPicture(PictureLib.YellowAlertSmall);
			Else
				RowAppearance.Cells.Description.SetPicture(PictureLib.Commit);
			EndIf;
			
		EndIf;
		
	EndDo;
	
EndProcedure

SuitableOperationsList = New ValueList;