
////////////////////////////////////////////////////////////////////////////////
// PROCEDURES AND FUNCTIONS EXPORT

Procedure FillParametersTree() Export

	Object.FillParametersTree(Controls.Parameters,TableKind,TableName,False,Undefined,TableBox,CurrentRecord,ColumnName,,True);
	
EndProcedure // FillParametersTree()

////////////////////////////////////////////////////////////////////////////////
// GENERAL PURPOSE PROCEDURES AND FUNCTIONS

// Closes form, and returns selected formulas Parameter
//
Procedure SetFormula()

	CurrentData = Controls.Parameters.CurrentData;
	If CurrentData <> Undefined Then
		Controls.FormulaField.SelectedText = GetCurrentParameter(CurrentData);
	EndIf;	
	
EndProcedure

////////////////////////////////////////////////////////////////////////////////
// FORM ACTIONS HANDLER

Procedure OnOpen()

	//Controls.InformationText.Value = Nstr("en = 'Formula should contain text on built-in language.
	//								|CurrentField - variable name which returns current field value;
	//								|CurrentRecord - current record in the records set;
	//								|RecordsSet - set of records generated by document''s data (or set of all records in case when template does not have document base);
	//								|ParametersSet.<ParameterName> - Parameters set. Parameter name specified parameter in set;'; pl = 'Wzór musi zawierać tekst na wbudowanym języku.
	//								|CurrentField - zmienna która zwraca wartość bieżącego pola;
	//								|CurrentRecord - bieżący zapis w zestawie zapisów;
	//								|RecordsSet - zestaw zapisów wygenerowanych na podstawie danych dokumentu (lub cały zestaw zapisów dla schematu bez dokumentu podstawy);
	//								|ParametersSet.<ParameterName> - Zestaw parametrów. ParameterName określa parameter w zestawie;'");
	
	CurrentControl = Controls.Parameters;
	
	Controls.FormulaField.SetText(Formula);

EndProcedure

////////////////////////////////////////////////////////////////////////////////
// CONTROLS ACTIONS HANDLERS

Procedure ButtonSelectOnClick(Control)

	Formula = Controls.FormulaField.GetText();
	
	//Notify("ParameterSelection", Formula, "ParameterSelectionForm");

	Close(True);

EndProcedure

Procedure FilterByTypeOnChange(Control)

	FillParametersTree();

EndProcedure

Function OpenParameterSelectionForm(Caption,SourceFormula,IsFormula=True)
	//
	//If IsFormula Then
	//	SelectionForm = Catalogs.BookkeepingOperationsTemplates.GetForm("EditFormula", ThisForm);
	//Else
	//	SelectionForm = Catalogs.BookkeepingOperationsTemplates.GetForm("ParameterSelection", ThisForm);
	//EndIf;	
	//SelectionForm.DocumentBase = DocumentBase;
	//SelectionForm.FilterByType = FilterByType;
	//SelectionForm.Caption   = Caption;
	//SelectionForm.Controls.FilterByType.Visible = Controls.FilterByType.Visible;
	//SelectionForm.Formula = SourceFormula;
	//SelectionForm.TableBox = TableBox;
	//SelectionForm.AlternateFormOwner = AlternateFormOwner;

	//SelectionForm.FillParametersTree();

	//Return SelectionForm.DoModal();
	
EndFunction	


////////////////////////////////////////////////////////////////////////////////
// TABLE BOX PARAMETERS HANDLERS

Procedure ParametersSelection(Control, SelectedRow, Column, StandardProcessing)

	StandardProcessing = False;

	SetFormula();

EndProcedure

Procedure ParametersOnActivateRow(Control)
	
	CurrentData = Controls.Parameters.CurrentData;
	Controls.CommandBarParameters.Buttons.Edit.Enabled = CurrentData <> Undefined AND Find(Controls.Parameters.CurrentData.ParameterName,".") = 0 AND CurrentData.Rows.Count()=0;
	
EndProcedure

Procedure CommandBarParametersNewParameter(Button)
	
	Param = Object.NewParameter(TableBox, , , ThisForm);
	If Param<>Undefined Then
		FillParametersTree();
	EndIf;	
	
EndProcedure

Procedure CommandBarParametersEdit(Button)
	
	If Controls.Parameters.CurrentData<>Undefined Then
		Object.EditParameter(Controls.Parameters.CurrentData.ParameterName);
		FillParametersTree();
	EndIf;
	
EndProcedure

Procedure CommandBarParametersSelect(Button)
	SetFormula();
EndProcedure

Procedure ParametersDragStart(Control, DragParameters, StandardProcessing)
	
	DragParameters.Value = GetCurrentParameter(DragParameters.Value);	
	DragParameters.Action = DragAction.Copy;
	
EndProcedure

Function GetCurrentParameter(CurrentData)
	
	FoundDot = Find(CurrentData.ParameterName,".");
	If Find(CurrentData.ParameterName,".")=0 Then
		Return  "ParametersSet." + CurrentData.ParameterName;
	Else
		Return "RecordsSet[" + String(Number(Left(CurrentData.ParameterName,FoundDot-1))-1) + "]" + Mid(CurrentData.ParameterName,FoundDot);
	EndIf;	
	
EndFunction	









