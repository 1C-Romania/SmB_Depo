Var DCS;
Var SystemDataCompositionDataSchema;
Var NeedToSetSelectionAvailableFields;
Var TableOfTables;
Var DocumentTableSynonym;

Procedure OnOpen()

	// global data initializing
	NeedToSetSelectionAvailableFields = False;
	DocumentTableSynonym = Nstr("en = 'Document''s data'; pl = 'Dane dokumentu'");
	TableOfTables = Object.GetTableOfTables(DocumentTableSynonym);
	SystemDataCompositionDataSchema = Object.GetTemplate("SystemData");
	SystemDataDataCompositionSettingsComposer.Initialize(New DataCompositionAvailableSettingsSource(SystemDataCompositionDataSchema));

	If DocumentBase = Undefined Then
		
		If LinkByType <> "" Then
			TypeSelectionMethod = 1;
		Else
			TypeSelectionMethod = 0;
		EndIf;
		
		If Parameter=Undefined Then
			// new parameter
			Type = TypeRestriction;
		EndIf;	
		
		TypeOnChange(Controls.Value);
		TypesSelectionMethodOnChange(Controls.TypeSelectionMethod);
					
	Else
		
		Controls.ValueWithDocumentBase.TypeRestriction = TypeRestriction;
		Controls.ValueWithDocumentBase.ChooseType = TypeRestriction.Types().Count()<>1;
		Value = TypeRestriction.AdjustValue(Value);
				
	EndIf;	
	
	If TableKind = Enums.BookkeepingOperationTemplateTableKind.EmptyRef() Then
		
		TableKind = Enums.BookkeepingOperationTemplateTableKind.DocumentRecords;
		
	EndIf;
	
	If ParameterKind = Enums.BookkeepingOperationTemplateParameterKinds.EmptyRef() Then
		
		ParameterKind = Enums.BookkeepingOperationTemplateParameterKinds.NotLinked;
		Presentation = GetValueWithDocumentBaseParameterPresentation(Value);
		
	EndIf;	
	
	If DocumentBase <> Undefined Then
		DataCompositionSettingsComposer = Object.ApplyDocumentBaseTableChange(TableName,TableKind,DCS);	
	EndIf;		
	
	If ParameterKind = Enums.BookkeepingOperationTemplateParameterKinds.SystemData Then
		
		FoundField = SystemDataDataCompositionSettingsComposer.Settings.SelectionAvailableFields.FindField(New DataCompositionField(ParameterFormula));
		If FoundField = Undefined Then
			Alerts.AddAlert(Alerts.ParametrizeString(Nstr("en='Field with such nam %P1 is not found in table %P2!';pl='Pole o nazwie %P1 nie znaleziono w tabeli %P2!'"),New Structure("P1, P2",ParameterFormula,TableName)));
		Else	
			ParameterFormulaPresentation = FoundField.Title;
			NeedToSetSelectionAvailableFields = True;
		EndIf;	
		
	ElsIf ParameterKind = Enums.BookkeepingOperationTemplateParameterKinds.LinkedToDocumentBase Then
		
		If NOT IsBlankString(ParameterFormula) Then
			FoundField = DataCompositionSettingsComposer.Settings.SelectionAvailableFields.FindField(New DataCompositionField(ParameterFormula));
			If FoundField = Undefined Then
				Alerts.AddAlert(Alerts.ParametrizeString(Nstr("en='Field with such nam %P1 is not found in table %P2!';pl='Pole o nazwie %P1 nie znaleziono w tabeli %P2!'"),New Structure("P1, P2",ParameterFormula,TableName)));
			Else	
				ParameterFormulaPresentation = FoundField.Title;
				NeedToSetSelectionAvailableFields = True;
			EndIf;
		EndIf;
		
	EndIf;	
	
	SetTablePresentation();
	
	If DocumentBase = Undefined Then
		Controls.PanelParameterKindSelection.CurrentPage = Controls.PanelParameterKindSelection.Pages.KindsForParameterWithoutDocumentBase;
	Else
		Controls.PanelParameterKindSelection.CurrentPage = Controls.PanelParameterKindSelection.Pages.KindsForParameterWithDocumentBase;
	EndIf;		
		
	UpdateDialog();
	
EndProcedure

////////////////////////////////////////////////////////////////////////////////
// GENERAL PURPOSE PROCEDURES AND FUNCTIONS

// Parses metadata objects collection and adds corresponding refs types to array
//
// Parameters:
//  MDCollection    - metadata objects collection
//
// Return Value:
//  Metadata collection types array
// 
Function MetadataCollectionTypesArray(MDCollection)

	TypesArray = New Array;

	For each MDObject In MDCollection Do

		Try
			TypesArray.Add(TypeOf(Catalogs[MDObject.Name].EmptyRef()));
		Except
			TypesArray.Add(TypeOf(ChartsOfCharacteristicTypes[MDObject.Name].EmptyRef()));
		EndTry;

	EndDo;

	Return TypesArray;

EndFunction

// Find types, which are owners of given as Typedescription
//
// Parameters:
//  TypeDescription  - TypeDescription object
//
// Return Value:
//  TypeDescription object, contains types of possible object's owners 
Function GetPossibleOwnersTypes(TypeDescription)

	Types = New TypeDescription();

	For each MDObject In Metadata.Catalogs Do

		If MDObject.Owners = Undefined Then
			Continue
		EndIf;

		If Types.ContainsType(TypeOf(Catalogs[MDObject.Name].EmptyRef())) Then
			Types = New TypeDescription(Types, MetadataCollectionTypesArray(MDObject.Owners));
		EndIf;

	EndDo;

	Return Types;

EndFunction

////////////////////////////////////////////////////////////////////////////////
// CONTROLS HANDLERS

Procedure ButtonOKOnClick(Control)

	If TrimAll(Presentation) = "" Then
		Domessagebox(Nstr("en = 'There is no parameter''s presentation!'; pl = 'Brak przedstawienia parametru!'"));
		Return;
	Else
		FoundRows = Object.Parameters.FindRows(New Structure("TableName, TableKind, Presentation",TableName, TableKind, Presentation));
		If FoundRows.Count()>1
			OR (FoundRows.Count() = 1 AND FoundRows[0]<>Parameter) Then
			DoMessageBox(Alerts.ParametrizeString(Nstr("en = 'Parameter with name %P1 already exists in current bookkeeping operation template for table %P2!'; pl = 'Parameter z nazwą %P1 już istnieje w schemacie dla tabeli %P2!'"),New Structure("P1, P2",Presentation,TablePresentation)));
			Return;
		EndIf;	
	EndIf;

	If ParameterKind = Enums.BookkeepingOperationTemplateParameterKinds.NotLinked Then
		FieldName = "";
		If DocumentBase = Undefined Then
			If TypeSelectionMethod = 1 Then
				If TrimAll(LinkByType) = "" Then
					Domessagebox(Nstr("en = 'Not specified parameter-account!'; pl = 'Nie został wskazany parametr-konto!'"));
					Return;
				EndIf;
			Else
				If Type = Undefined OR Type.Types().Count() = 0 Then
					Domessagebox(Nstr("en = 'Parameter''s value type is not specified!'; pl = 'Typ wartości parametru nie został wskazany!'"));
					Return;
				EndIf;
			EndIf;
		Else
			
			If Value = Undefined Then
				Domessagebox(Nstr("en = 'Parameter''s value is not specified!'; pl = 'Wartość parametru nie została wskazana!'"));
				Return;
			EndIf;
			
		EndIf;	
		
	ElsIf ParameterKind = Enums.BookkeepingOperationTemplateParameterKinds.LinkedToDocumentBase Then
		
		FoundField = DCS.DataSets.DataSet1.Fields.Find(ParameterFormula);
		If FoundField = Undefined Then
			FieldName = StrReplace(ParameterFormula,".","");
		Else
			FieldName = FoundField.Field;
		EndIf;	

		If IsBlankString(ParameterFormula) Then
			Domessagebox(Nstr("en = 'Field of document base which should be linked with parameter is not specified!'; pl = 'Pole dokumentu podstawy, które ma być powiązane z parametrem nie zostało wskazane!'"));
			Return;
		Else
			If Find(ParameterFormula,".")=0 Then
				
				If FoundField = Undefined OR TypeOf(FoundField) <> Type("DataCompositionSchemaDataSetField") Then
					
					Domessagebox(Nstr("en = 'Selected field could not be used in parameter!'; pl = 'Wybrane pole nie może być użyte w parametrze!'"));
					Return;
				EndIf;	
			EndIf;
		EndIf;	
		
		
	ElsIf ParameterKind = Enums.BookkeepingOperationTemplateParameterKinds.SystemData Then	
		
		FoundField = SystemDataCompositionDataSchema.DataSets.SystemData.Fields.Find(ParameterFormula);
		If FoundField = Undefined Then
			FieldName = StrReplace(ParameterFormula,".","");
		Else
			FieldName = FoundField.Field;
		EndIf;	
		
		If IsBlankString(ParameterFormula) Then
			
			Domessagebox(Nstr("en = 'Field of system data which should be linked with parameter is not specified!'; pl = 'Pole danych systemowych, które ma być powiązane z parametrem nie zostało wskazane!'"));
			Return;
			
		Else
			
			If Find(ParameterFormula,".")=0 Then
				
				If FoundField = Undefined OR TypeOf(FoundField) <> Type("DataCompositionSchemaDataSetField") Then
					
					Domessagebox(Nstr("en = 'Selected field could not be used in parameter!'; pl = 'Wybrane pole nie może być użyte w parametrze!'"));
					Return;
					
				EndIf;	
				
			EndIf;
			
		EndIf;	
		
	EndIf;	

	If Parameter = Undefined Then
		Parameter = Object.Parameters.Add();
		Parameter.Name = GetNewParameterName();
	EndIf;

	Parameter.ParameterKind = ParameterKind;
	Parameter.ParameterFormula = ParameterFormula;
	If ParameterKind = Enums.BookkeepingOperationTemplateParameterKinds.NotLinked Then
		If DocumentBase = Undefined Then
			Parameter.Type = New ValueStorage(Type)
		Else	
			TempArray = New Array();
			TempArray.Add(TypeOf(Value));
			Parameter.Type = New ValueStorage(New TypeDescription(TempArray));
		EndIf;	
	Else	
		Parameter.Type = New ValueStorage(ParameterFormulaTypeDescription);
	EndIf;
	Parameter.Presentation    = Presentation;
	Parameter.Value         = Value;
	Parameter.NotRequest    = NotRequest;
	Parameter.LinkByOwner = LinkByOwner;
	Parameter.LinkByType      = LinkByType;
	Parameter.TableName = TableName;
	Parameter.TableKind = TableKind;
	Parameter.FieldName = FieldName;

	If Not IsBlankString(LinkByType) Then
		Parameter.ExtDimensionNumber = ?(ExtDimensionNumber=0, 1, ExtDimensionNumber);
	Else
		Parameter.ExtDimensionNumber = 0;
	EndIf;

	Parameter.LongDescription        = LongDescription;
	Parameter.Obligatory     = Obligatory;

	Close(Parameter.Name);

EndProcedure // ButtonOKOnClick()

Procedure ValueStartChoice(Control, StandardProcessing)

	Control.ChooseType     = TypeRestriction.Types().Count() > 1;
	Control.TypeRestriction = TypeRestriction;

EndProcedure

Procedure LinkByOwnerStartListChoice(Control, StandardProcessing)

	Control.ChoiceList.Clear();
	
	Control.ChoiceList = Object.GetParametersValueList(GetPossibleOwnersTypes(Type));

	Control.ChoiceListHeight = Control.ChoiceList.Count();

EndProcedure

Procedure LinkByTypeStartListChoice(Control, StandardProcessing)

	Control.ChoiceList.Clear();

	TypesArray = New Array;
	TypesArray.Add(TypeOf(ChartsOfAccounts.Bookkeeping.EmptyRef()));
	TypeDescription = New TypeDescription(TypesArray);
	
	Control.ChoiceList = Object.GetParametersValueList(TypeDescription);

	Control.ChoiceListHeight = Control.ChoiceList.Count();

EndProcedure

Procedure ValueClearing(Control, StandardProcessing)

	StandardProcessing = False;
	Value = TypeRestriction.AdjustValue(Undefined);

EndProcedure

Procedure ValueWithDocumentBaseOnChange(Control)
	
	Presentation = GetValueWithDocumentBaseParameterPresentation(Value);
	
EndProcedure

Procedure ValueWithDocumentBaseClearing(Control, StandardProcessing)
	
	Presentation = GetValueWithDocumentBaseParameterPresentation(Value);
	
EndProcedure

Procedure TypeOnChange(Control)

	If Type = Undefined Then
		Return;
	EndIf;
	
	Value = Type.AdjustValue(Value);
	If Type.Types().Count() = 1 Then

		If Type.ContainsType(Type("Number")) Then
			Controls.Value.Format = "ND=" + Type.NumberQualifiers.Digits
			                              + "; NFD=" + Type.NumberQualifiers.FractionDigits;
		EndIf;

	EndIf;

EndProcedure

Procedure TypeStartChoice(Control, StandardProcessing)
	
	StandardProcessing = False;
	TypeChoiceForm = Object.GetForm("TypeChoiceForm");
	TypeChoiceForm.TypeDescription = Type;
	If TypeChoiceForm.DoModal() = True Then
		Type = TypeChoiceForm.TypeDescription;
		TypeOnChange(Control);
	EndIf;	
	
EndProcedure

Procedure ParameterKindOnChange(Control)
	
	Type = Undefined;
	ParameterFormulaTypeDescription = Undefined;
	ParameterFormula = "";	
	ParameterFormulaPresentation = "";
	UpdateDialog();
	
EndProcedure

Procedure TypesSelectionMethodOnChange(Control)

	If TypeSelectionMethod = 0 Then

		Controls.LinkByType.Enabled      = False;
		Controls.ExtDimensionNumber.Enabled    = False;

		Controls.Type.Enabled              = True;
		Controls.LinkByOwner.Enabled = True;
		Controls.Value.Enabled         = True;

		LinkByType = "";

	ElsIf TypeSelectionMethod = 1 Then

		Controls.LinkByType.Enabled      = True;
		Controls.ExtDimensionNumber.Enabled    = True;

		Controls.Type.Enabled              = False;
		Controls.LinkByOwner.Enabled = False;
		Controls.Value.Enabled         = False;

		Type              = Undefined;
		LinkByOwner = "";
		Value         = Undefined;

		TypesArray = New Array;
		TypesArray.Add(Type("ChartOfAccountsRef.Bookkeeping"));

		TypeDescription    = New TypeDescription(TypesArray);
		ParametersArray = FormOwner.GetParametersArray(TypeDescription);

		If ParametersArray.Count() > 0 Then
			LinkByType = StrReplace(ParametersArray[0], "Parameters.", "");
		EndIf;

	EndIf;

EndProcedure // TypesSelectionMethodOnChange()

Procedure TablePresentationStartChoice(Control, StandardProcessing)
	
	TablesList = Object.GetListOfAvailableTables(,DocumentTableSynonym,TableKindFilter,TableName);
	ChoiceForm = Object.GetForm("TableChoiceForm",ThisForm,ThisForm);
	ChoiceForm.TablesList = TablesList;
	ChoiceForm.DontAllowToCheckBoxShowOnlyAvailable = True;
	ChoiceForm.GoToCurrentRow = True;
	ChoiceForm.TableKind = TableKind;
	ChoiceForm.TableName = TableName;
	
	ReturnStructure = ChoiceForm.DoModal();

	If ReturnStructure <> Undefined Then
		
		TableName = ReturnStructure.TableName;
		TableKind = ReturnStructure.TableKind;
		TablePresentation = ReturnStructure.TableSynonym;
		DataCompositionSettingsComposer =  Object.ApplyDocumentBaseTableChange(TableName, TableKind,DCS);
		
	EndIf;	
	
	SetTablePresentation();
	
EndProcedure


Procedure PopupMenuAvailableFieldsSelect(Button)
		
	AvailableFieldSelect(Controls.SelectionAvailableFields.CurrentRow, ParameterFormulaPresentation, DCS.DataSets.DataSet1.Fields);
	
EndProcedure

Procedure SelectionAvailableFieldsOnActivateRow(Control)
	
	If NeedToSetSelectionAvailableFields Then
		NeedToSetSelectionAvailableFields = False;
		Controls.SelectionAvailableFields.CurrentRow = DataCompositionSettingsComposer.Settings.SelectionAvailableFields.FindField(New DataCompositionField(ParameterFormula));
	EndIf;	
	
	AvailableFieldSelect(Controls.SelectionAvailableFields.CurrentRow, ParameterFormulaPresentation, DCS.DataSets.DataSet1.Fields);
	
EndProcedure


Procedure PopupMenuAvailableFields1Select(Button)
	
	AvailableFieldSelect(Controls.SelectionAvailableFields1.CurrentRow, ParameterFormulaPresentation, SystemDataCompositionDataSchema.DataSets.SystemData.Fields);
	
EndProcedure

Procedure SelectionAvailableFields1OnActivateRow(Control)
	
	If NeedToSetSelectionAvailableFields Then
		NeedToSetSelectionAvailableFields = False;
		Controls.SelectionAvailableFields1.CurrentRow = SystemDataDataCompositionSettingsComposer.Settings.SelectionAvailableFields.FindField(New DataCompositionField(ParameterFormula));
	EndIf;	
	
	AvailableFieldSelect(Controls.SelectionAvailableFields1.CurrentRow, ParameterFormulaPresentation, SystemDataCompositionDataSchema.DataSets.SystemData.Fields);
	
EndProcedure

// Procedure select field from DCS available fields
// CurrentRow in table of available fields
// CurrentSelectedField - returns name of selected parameter
// DataCompositionSchema - current DataCompositionSchema data set fields
Procedure AvailableFieldSelect(CurrentRow, CurrentSelectedField, DataCompositionSchemaDataSetFields)
	
	If CurrentRow <> Undefined Then
		CurrentSelectedField = CurrentRow.Title;
		ParameterFormula = String(CurrentRow.Field);
		ParameterFormulaTypeDescription = CurrentRow.Type;
		Presentation = CurrentSelectedField;
	EndIf;	
	
EndProcedure	

// Returns presentation and name of parameter
Procedure GenerateParameterNameAndPresentation(Presentation,Name)
	
	
EndProcedure	

////////////////////////////////////////////////////////////////////////////////
// FORM ACTIONS HANDLERS

Procedure UpdateDialog()
	
	If DocumentBase = Undefined Then
		PageToSet = Controls.PanelParametersKinds.Pages.NotLinked;
	Else
		PageToSet = Controls.PanelParametersKinds.Pages.NotLinkedWithDocumentBase;
	Endif;	
	If ParameterKind = Enums.BookkeepingOperationTemplateParameterKinds.LinkedToDocumentBase Then
		PageToSet = Controls.PanelParametersKinds.Pages.LinkedToDocumentBase;
	ElsIf ParameterKind = Enums.BookkeepingOperationTemplateParameterKinds.SystemData Then
		PageToSet = Controls.PanelParametersKinds.Pages.SystemData;	
	EndIf;	
	
	Controls.PanelParametersKinds.CurrentPage = PageToSet;
		
EndProcedure	

Procedure SetTablePresentation()
	
	If ParameterKind = Enums.BookkeepingOperationTemplateParameterKinds.LinkedToDocumentBase Then
		FoundRow = Common.FindTabularPartRow(TableOfTables, New Structure("TableName, TableKind",TableName, TableKind));
		If FoundRow = Undefined Then
			Controls.TablePresentation.Picture = New Picture;
			Controls.TablePresentation.Value = "";
		Else	
			Controls.TablePresentation.Picture = FoundRow.TablePicture;
			Controls.TablePresentation.Value = FoundRow.TableSynonym;
		EndIf;
	EndIf;	
	
EndProcedure	

Function InitTablesList()
	
	TableChoiceList = Object.GetListOfAvailableTables(,Nstr("en = 'Document''s data'; pl = 'Dane dokumentu'"));
	//TableChoiceList = New ValueList;
	//TableChoiceList.Add("",Nstr("en = 'Document''s data'; pl = 'Dane dokumentu'"));
	//
	//MetadataObject = DocumentBase.Metadata();
	//
	//For Each TabularPart In MetadataObject.TabularSections Do
	//	TableChoiceList.Add(TabularPart.Name, TabularPart.Synonym);
	//EndDo;
	
	Controls.TableStructure.ChoiceList = TableChoiceList;
	
	Return TableChoiceList;

EndFunction

Procedure SelectionAvailableFieldsOnDataGet(Control, RowAppearances)
	
	DisabledColor = New Color(128,128,128);
	
	For Each RowAppearanceItem In RowAppearances Do
		
		SystemFields = New DataCompositionField("SystemFields");
		
		If RowAppearanceItem.RowData.Field = SystemFields
			Or (RowAppearanceItem.RowData.Parent <> Undefined AND RowAppearanceItem.RowData.Parent.Field = SystemFields) Then
			
			For Each Cell In RowAppearanceItem.Cells Do
				
				Cell.TextColor = DisabledColor;
				
			EndDo;	
			
		EndIf;	
		
	EndDo;	
	
EndProcedure

Procedure NotLinkedOnChange(Control)
	Type = Undefined;
	ParameterFormulaTypeDescription = Undefined;
	ParameterFormula = "";	
	ParameterFormulaPresentation = "";
	SetTablePresentation();
	UpdateDialog();
EndProcedure

Procedure LinkedToDocumentBaseOnChange(Control)
	// Wstaw zawartość procedury obsługi zdarzeń.
EndProcedure

Function GetNewParameterName()
	
	NamesTable = Object.Parameters.Unload(,"Name");
	NamesTable.Sort("Name Desc");
	
	MaxParameterNumber = 0;
	
	For Each Row In NamesTable Do
		
		RowName = TrimAll(Row.Name);
		Prefix = Mid(RowName,1,1);
		ParameterNumberAsString = Mid(RowName,2);
		
		If Prefix = "P" Then
			
			Try 
				ParameterNumber = Number(ParameterNumberAsString);
			Except
				Continue;
			EndTry;	
			
			If ParameterNumber>MaxParameterNumber Then
				MaxParameterNumber = ParameterNumber;
			EndIf;	
			
		EndIf;	
		
	EndDo;	
	
	Return "P"+String(MaxParameterNumber+1);
	
EndFunction 	

Function GetValueWithDocumentBaseParameterPresentation(CurrentValue)
	
	If CurrentValue = Undefined Then
		Return Nstr("en = 'Value: Undefined'; pl = 'Wartość: Undefined'");
	ElsIf ValueIsNotFilled(CurrentValue) Then
		Return Alerts.ParametrizeString(Nstr("en = 'Value: Empty value of type %P1'; pl = 'Wartość: Pusta wartość typu %P1'"),New Structure("P1",String(TypeOf(Value))));
	Else	
		Return Alerts.ParametrizeString(Nstr("en = 'Value: %P1'; pl = 'Wartość: %P1'"),New Structure("P1",String(Value)));
	EndIf;	
	
EndFunction	


