<ExchangeRules>
	<FormatVersion CompatibilityMode="CompatibilityModeWithSSL20">2.01</FormatVersion>
	<ID>032d879b-93ad-4b0a-a178-d23fe2a48b9e    </ID>
	<Description>SmallBusiness --&gt; EnterpriseAccounting</Description>
	<CreationDateTime>2015-01-13T12:17:20</CreationDateTime>
	<Source PlatformVersion="8.0" ConfigurationVersion="1.5.3.24" ConfigurationSynonym="Small Business, version 1.5">SmallBusiness</Source>
	<Receiver PlatformVersion="8.0" ConfigurationVersion="2.0.64.4" ConfigurationSynonym="Company accounting, edition 2.0">EnterpriseAccounting</Receiver>
	<BeforeGetChangedObjects>Parameters.Insert("NodeForExchangeRef", NodeForExchange);
Parameters.Insert("ManualExchange", 		  NodeForExchange.ManualExchange);</BeforeGetChangedObjects>
	<BeforeDataExport>
Parameters.Insert("NationalCurrency", Constants.NationalCurrency.Get());

NewParameter = ParametersSettingsTable.Add();
NewParameter.Name = "ManualExchange";
NewParameter.Description = "ManualExchange";
NewParameter.PassParameterOnExport = True;
NewParameter.Value = NodeForExchange.ManualExchange;

NewParameter = ParametersSettingsTable.Add();
NewParameter.Name = "ImportDocumentsFromEnterprisesAccounting";
NewParameter.Description = "ImportDocumentsFromEnterprisesAccounting";
NewParameter.PassParameterOnExport = True;
NewParameter.Value = NodeForExchange.ImportDocumentsFromEnterprisesAccounting;</BeforeDataExport>
	<AfterDataExport>If Parameters.ManualExchange Then
	
	ExchangePlanName = DataExchangeReUse.GetExchangePlanName(Parameters.NodeForExchangeRef);
	ExchangePlanContent = Metadata.ExchangePlans[ExchangePlanName].Content;
	
	For Each ExchangePlanContentItem IN ExchangePlanContent Do
		If CommonUse.ThisIsDocument(ExchangePlanContentItem.Metadata) Then
			ExchangePlans.DeleteChangeRecords(Parameters.NodeForExchangeRef, ExchangePlanContentItem.Metadata);
		EndIf;
	EndDo;
	
EndIf;</AfterDataExport>
	<BeforeDataImport>Parameters.Insert("CurrencyOfRegulatedAccounting", Constants.CurrencyOfRegulatedAccounting.Get());
Parameters.Insert("PricesTypePlannedPrimecost", Constants.PricesTypePlannedPrimecostProductsAndServices.Get());
Parameters.Insert("MainCompany", UserManagement.GetDefaultValue(glVariableValue("glCurrentUser"), "MainCompany"));</BeforeDataImport>
	<AftertObjectImport>If ObjectTypeName = "Document" AND Not ObjectFound Then
	Execute(Algorithms.FillDocumentAttributes);
EndIf;</AftertObjectImport>
	<OnGetDeletionInfo>ObjectMetadata = Object.Metadata();

If Metadata.Catalogs.Contains(ObjectMetadata) Then

	Cancel  = True;

	SetObjectDeletionMark(Object, True, "Catalog");

ElsIf Metadata.Documents.Contains(ObjectMetadata) Then

	Cancel  = True;

	If Object.Posted Then

		UndoObjectPostingInIB(Object, TypeOf(Object));

	EndIf;

	SetObjectDeletionMark(Object, True, "Document");

ElsIf Metadata.ChartsOfCharacteristicTypes.Contains(ObjectMetadata) Then

	Cancel  = True;

	SetObjectDeletionMark(Object, True, "ChartOfCharacteristicTypes");

EndIf;</OnGetDeletionInfo>
	<AfterParametersImport>ManualExchange = ExchangeNodeForDataImport.ManualExchange;
ImportDocumentsFromEnterprisesAccounting = ExchangeNodeForDataImport.ImportDocumentsFromEnterprisesAccounting;

HasChanges = False;

If Parameters.Property("ManualExchange")
	AND Parameters.ManualExchange &lt;&gt; ManualExchange Then
	
	ManualExchange = Parameters.ManualExchange;
	HasChanges = True;
EndIf;

If Parameters.Property("ImportDocumentsFromEnterprisesAccounting")
	AND Parameters.ImportDocumentsFromEnterprisesAccounting &lt;&gt; ImportDocumentsFromEnterprisesAccounting Then
	
	ImportDocumentsFromEnterprisesAccounting = Parameters.ImportDocumentsFromEnterprisesAccounting;
	HasChanges = True;
EndIf;

If HasChanges Then
	NodeForExchangeObject = ExchangeNodeForDataImport.GetObject();
	NodeForExchangeObject.ManualExchange = ManualExchange;
	NodeForExchangeObject.ImportDocumentsFromEnterprisesAccounting = ImportDocumentsFromEnterprisesAccounting;
	NodeForExchangeObject.AdditionalProperties.Insert("Import");
	Try
		NodeForExchangeObject.Write();
	Except
	EndTry;
EndIf;</AfterParametersImport>
	<Parameters/>
	<DataProcessors/>
	<ObjectConversionRules>
		<Group>
			<Code>Enums</Code>
			<Description>Enums</Description>
			<Order>50</Order>
			<Rule>
				<Code>ContactInformationTypes</Code>
				<Description>Enum: Types contact information</Description>
				<Order>50</Order>
				<Source>EnumRef.ContactInformationTypes</Source>
				<Receiver>EnumRef.ContactInformationTypes</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Address --&gt; Address</Description>
						<Order>50</Order>
						<Source>Address</Source>
						<Receiver>Address</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>EmailAddress --&gt; EmailAddress</Description>
						<Order>100</Order>
						<Source>EmailAddress</Source>
						<Receiver>EmailAddress</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>WebPage --&gt; WebPage</Description>
						<Order>150</Order>
						<Source>WebPage</Source>
						<Receiver>WebPage</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>Another --&gt; Another</Description>
						<Order>200</Order>
						<Source>Another</Source>
						<Receiver>Another</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>Phone --&gt; Phone</Description>
						<Order>250</Order>
						<Source>Phone</Source>
						<Receiver>Phone</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>Fax --&gt;</Description>
						<Order>300</Order>
						<Source>Fax</Source>
						<Receiver>Phone</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>LegalEntityIndividual</Code>
				<Description>Enum: Legal ind person</Description>
				<Order>100</Order>
				<Source>EnumRef.LegalEntityIndividual</Source>
				<Receiver>EnumRef.LegalEntityIndividual</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Ind --&gt; Ind</Description>
						<Order>50</Order>
						<Source>Ind</Source>
						<Receiver>Ind</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>LegalEntity --&gt; LegalEntity</Description>
						<Order>100</Order>
						<Source>LegalEntity</Source>
						<Receiver>LegalEntity</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>RoundingMethods</Code>
				<Description>Enum: Methods rounding</Description>
				<Order>150</Order>
				<Source>EnumRef.RoundingMethods</Source>
				<Receiver>EnumRef.RoundingMethods</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Round0_01 --&gt; Round0_01</Description>
						<Order>50</Order>
						<Source>Round0_01</Source>
						<Receiver>Round0_01</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>Round0_05 --&gt; Round0_05</Description>
						<Order>100</Order>
						<Source>Round0_05</Source>
						<Receiver>Round0_05</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>Round0_1 --&gt; Round0_1</Description>
						<Order>150</Order>
						<Source>Round0_1</Source>
						<Receiver>Round0_1</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>Round0_5 --&gt; Round0_5</Description>
						<Order>200</Order>
						<Source>Round0_5</Source>
						<Receiver>Round0_5</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>Round1 --&gt; Round1</Description>
						<Order>250</Order>
						<Source>Round1</Source>
						<Receiver>Round1</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>Round10 --&gt; Round10</Description>
						<Order>300</Order>
						<Source>Round10</Source>
						<Receiver>Round10</Receiver>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>Round100 --&gt; Round100</Description>
						<Order>350</Order>
						<Source>Round100</Source>
						<Receiver>Round100</Receiver>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>Round5 --&gt; Round5</Description>
						<Order>400</Order>
						<Source>Round5</Source>
						<Receiver>Round5</Receiver>
					</Value>
					<Value>
						<Code>9</Code>
						<Description>Round50 --&gt; Round50</Description>
						<Order>450</Order>
						<Source>Round50</Source>
						<Receiver>Round50</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>CommissionFeeCalculationMethods</Code>
				<Description>Enum: Ways calculation commission brokerages</Description>
				<Order>250</Order>
				<Source>EnumRef.CommissionFeeCalculationMethods</Source>
				<Receiver>EnumRef.CommissionFeeCalculationMethods</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>IsNotCalculating --&gt; IsNotCalculating</Description>
						<Order>50</Order>
						<Source>IsNotCalculating</Source>
						<Receiver>IsNotCalculating</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>PercentFromDifferenceOfSaleAndAmountReceipts --&gt; Procedure</Description>
						<Order>100</Order>
						<Source>PercentFromDifferenceOfSaleAndAmountReceipts</Source>
						<Receiver>PercentFromDifferenceOfSaleAndAmountReceipts</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>PercentFromSaleAmount --&gt; PercentFromSaleAmount</Description>
						<Order>150</Order>
						<Source>PercentFromSaleAmount</Source>
						<Receiver>PercentFromSaleAmount</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>GenderIndividuals</Code>
				<Description>Enum: Gender actual person</Description>
				<Order>300</Order>
				<Source>EnumRef.IndividualGender</Source>
				<Receiver>EnumRef.GenderIndividuals</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Female --&gt; Female</Description>
						<Order>50</Order>
						<Source>Female</Source>
						<Receiver>Female</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>Male --&gt; Male</Description>
						<Order>100</Order>
						<Source>Male</Source>
						<Receiver>Male</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsImplementationProducts</Code>
				<Description>Enum: Kinds operations "Customer invoice"</Description>
				<Order>350</Order>
				<Source>EnumRef.OperationKindsCustomerInvoice</Source>
				<Receiver>EnumRef.OperationKindsImplementationProducts</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>TransferForCommission --&gt; RetailComission</Description>
						<Order>50</Order>
						<Source>TransferForCommission</Source>
						<Receiver>RetailComission</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>SaleToCustomer --&gt; RetailComission</Description>
						<Order>100</Order>
						<Source>SaleToCustomer</Source>
						<Receiver>RetailComission</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ReturnFromProcessing --&gt;</Description>
						<Order>150</Order>
						<Source>ReturnFromProcessing</Source>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>ReturnToPrincipal --&gt;</Description>
						<Order>200</Order>
						<Source>ReturnToPrincipal</Source>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>ReturnToVendor --&gt;</Description>
						<Order>250</Order>
						<Source>ReturnToVendor</Source>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>ReturnFromSafeCustody --&gt;</Description>
						<Order>300</Order>
						<Source>ReturnFromSafeCustody</Source>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>TransferToProcessing --&gt;</Description>
						<Order>350</Order>
						<Source>TransferToProcessing</Source>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>TransferForSafeCustody --&gt;</Description>
						<Order>400</Order>
						<Source>TransferForSafeCustody</Source>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsReturnProductsFromCustomer</Code>
				<Description>Enum: Kinds operations "Supplier invoice"</Description>
				<Order>400</Order>
				<Source>EnumRef.OperationKindsSupplierInvoice</Source>
				<Receiver>EnumRef.OperationKindsReturnProductsFromCustomer</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>ReturnFromCustomer --&gt; RetailComission</Description>
						<Order>50</Order>
						<Source>ReturnFromCustomer</Source>
						<Receiver>RetailComission</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>ReturnFromAgent --&gt; RetailComission</Description>
						<Order>100</Order>
						<Source>ReturnFromAgent</Source>
						<Receiver>RetailComission</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ReturnFromSubcontractor --&gt;</Description>
						<Order>150</Order>
						<Source>ReturnFromSubcontractor</Source>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>ReturnFromSafeCustody --&gt;</Description>
						<Order>200</Order>
						<Source>ReturnFromSafeCustody</Source>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>ReceiptFromVendor --&gt;</Description>
						<Order>250</Order>
						<Source>ReceiptFromVendor</Source>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>ReceptionIntoProcessing --&gt;</Description>
						<Order>300</Order>
						<Source>ReceptionIntoProcessing</Source>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>ReceptionForCommission --&gt;</Description>
						<Order>350</Order>
						<Source>ReceptionForCommission</Source>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>ReceptionForSafeCustody --&gt;</Description>
						<Order>400</Order>
						<Source>ReceptionForSafeCustody</Source>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsFlowOfGoodsAndServices</Code>
				<Description>Enum: Kinds operations "Supplier invoice"</Description>
				<Order>450</Order>
				<Source>EnumRef.OperationKindsSupplierInvoice</Source>
				<Receiver>EnumRef.OperationKindsFlowOfGoodsAndServices</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>ReceiptFromVendor --&gt; PurchaseComission</Description>
						<Order>50</Order>
						<Source>ReceiptFromVendor</Source>
						<Receiver>PurchaseComission</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>ReceptionIntoProcessing --&gt; InProcessing</Description>
						<Order>100</Order>
						<Source>ReceptionIntoProcessing</Source>
						<Receiver>InProcessing</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ReceptionForCommission --&gt; PurchaseComission</Description>
						<Order>150</Order>
						<Source>ReceptionForCommission</Source>
						<Receiver>PurchaseComission</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>ReturnFromAgent --&gt;</Description>
						<Order>200</Order>
						<Source>ReturnFromAgent</Source>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>ReturnFromSubcontractor --&gt;</Description>
						<Order>250</Order>
						<Source>ReturnFromSubcontractor</Source>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>ReturnFromCustomer --&gt;</Description>
						<Order>300</Order>
						<Source>ReturnFromCustomer</Source>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>ReturnFromSafeCustody --&gt;</Description>
						<Order>350</Order>
						<Source>ReturnFromSafeCustody</Source>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>ReceptionForSafeCustody --&gt;</Description>
						<Order>400</Order>
						<Source>ReceptionForSafeCustody</Source>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsProductsTransfer</Code>
				<Description>Enum: Kinds operations "Customer invoice"</Description>
				<Order>500</Order>
				<Source>EnumRef.OperationKindsCustomerInvoice</Source>
				<Receiver>EnumRef.OperationKindsProductsTransfer</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>ReturnFromProcessing --&gt; OfProcessing</Description>
						<Order>50</Order>
						<Source>ReturnFromProcessing</Source>
						<Receiver>OfProcessing</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>TransferToProcessing --&gt; InProcessing</Description>
						<Order>100</Order>
						<Source>TransferToProcessing</Source>
						<Receiver>InProcessing</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ReturnToPrincipal --&gt;</Description>
						<Order>150</Order>
						<Source>ReturnToPrincipal</Source>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>ReturnToVendor --&gt;</Description>
						<Order>200</Order>
						<Source>ReturnToVendor</Source>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>ReturnFromSafeCustody --&gt;</Description>
						<Order>250</Order>
						<Source>ReturnFromSafeCustody</Source>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>TransferForCommission --&gt;</Description>
						<Order>300</Order>
						<Source>TransferForCommission</Source>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>TransferForSafeCustody --&gt;</Description>
						<Order>350</Order>
						<Source>TransferForSafeCustody</Source>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>SaleToCustomer --&gt;</Description>
						<Order>400</Order>
						<Source>SaleToCustomer</Source>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsReturnProductsVendor</Code>
				<Description>Enum: Kinds operations "Customer invoice"</Description>
				<Order>550</Order>
				<Source>EnumRef.OperationKindsCustomerInvoice</Source>
				<Receiver>EnumRef.OperationKindsReturnProductsVendor</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>ReturnFromProcessing --&gt; OfProcessing</Description>
						<Order>50</Order>
						<Source>ReturnFromProcessing</Source>
						<Receiver>OfProcessing</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>ReturnToPrincipal --&gt; PurchaseComission</Description>
						<Order>100</Order>
						<Source>ReturnToPrincipal</Source>
						<Receiver>PurchaseComission</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ReturnToVendor --&gt; PurchaseComission</Description>
						<Order>150</Order>
						<Source>ReturnToVendor</Source>
						<Receiver>PurchaseComission</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>ReturnFromSafeCustody --&gt;</Description>
						<Order>200</Order>
						<Source>ReturnFromSafeCustody</Source>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>TransferToProcessing --&gt;</Description>
						<Order>250</Order>
						<Source>TransferToProcessing</Source>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>TransferForCommission --&gt;</Description>
						<Order>300</Order>
						<Source>TransferForCommission</Source>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>TransferForSafeCustody --&gt;</Description>
						<Order>350</Order>
						<Source>TransferForSafeCustody</Source>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>SaleToCustomer --&gt;</Description>
						<Order>400</Order>
						<Source>SaleToCustomer</Source>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>AccrualDepreciationMethodsOS</Code>
				<Description>Enum: Ways accrual depreciation noncurrent assets (OS)</Description>
				<Order>600</Order>
				<Source>EnumRef.FixedAssetsDepreciationMethods</Source>
				<Receiver>EnumRef.AccrualDepreciationMethodsOS</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Linear --&gt; Linear</Description>
						<Order>50</Order>
						<Source>Linear</Source>
						<Receiver>Linear</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>ProportionallyToProductsVolume --&gt; Proportionally</Description>
						<Order>100</Order>
						<Source>ProportionallyToProductsVolume</Source>
						<Receiver>ProportionallyToProductsVolume</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description> --&gt; ByENAOF</Description>
						<Order>150</Order>
						<Receiver>ByENAOF</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description> --&gt; ByENAOFOn1000KmMileage</Description>
						<Order>200</Order>
						<Receiver>ByENAOFOn1000KmMileage</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description> --&gt; AmountOfNumbersByYearsOfUse</Description>
						<Order>250</Order>
						<Receiver>AmountOfNumbersByYearsOfUse</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description> --&gt; ReducingBalance</Description>
						<Order>300</Order>
						<Receiver>ReducingBalance</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>WaysAccrualDepreciationNMA</Code>
				<Description>Enum: Ways accrual depreciation noncurrent assets (IA)</Description>
				<Order>650</Order>
				<Source>EnumRef.FixedAssetsDepreciationMethods</Source>
				<Receiver>EnumRef.WaysAccrualDepreciationNMA</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Linear --&gt; Linear</Description>
						<Order>50</Order>
						<Source>Linear</Source>
						<Receiver>Linear</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>ProportionallyToProductsVolume --&gt; Proportionally</Description>
						<Order>100</Order>
						<Source>ProportionallyToProductsVolume</Source>
						<Receiver>ProportionallyToProductsVolume</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description> --&gt; ReducingBalance</Description>
						<Order>150</Order>
						<Receiver>ReducingBalance</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsReceiptOfNonCashCashValues</Code>
				<Description>Enum: Kinds operations "Payment receipt"</Description>
				<Order>700</Order>
				<Source>EnumRef.OperationKindsPaymentReceipt</Source>
				<Receiver>EnumRef.OperationKindsOfCashReceipt</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>FromAdvanceHolder --&gt; OthersReceiptOfNoncashDen</Description>
						<Order>50</Order>
						<Source>FromAdvanceHolder</Source>
						<Receiver>OtherReceipt</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>FromCustomer --&gt; BuyerPayment</Description>
						<Order>100</Order>
						<Source>FromCustomer</Source>
						<Receiver>BuyerPayment</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>FromVendor --&gt; ReturnCashFundsByProvider</Description>
						<Order>150</Order>
						<Source>FromVendor</Source>
						<Receiver>ReturnFromVendor</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>Other --&gt; ReceiptNonCashFunds</Description>
						<Order>200</Order>
						<Source>Other</Source>
						<Receiver>OtherReceipt</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>CurrencyPurchase --&gt; PurchaseOfForeignCurrencies</Description>
						<Order>250</Order>
						<Source>CurrencyPurchase</Source>
						<Receiver>PurchaseOfForeignCurrencies</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationCashWithdrawalOfKinds</Code>
				<Description>Enum: Kinds operations "Payment expense"</Description>
				<Order>750</Order>
				<Source>EnumRef.OperationKindsPaymentExpense</Source>
				<Receiver>EnumRef.OperationCashWithdrawalOfKinds</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Taxes --&gt; TaxTransfer</Description>
						<Order>50</Order>
						<Source>Taxes</Source>
						<Receiver>TaxTransfer</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>ToAdvanceHolder --&gt; TransferOfCashFundsAdvanceHolder</Description>
						<Order>100</Order>
						<Source>ToAdvanceHolder</Source>
						<Receiver>EnumerationOfAccountablePerson</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ToCustomer --&gt; ReturnCashMeansToCustomer</Description>
						<Order>150</Order>
						<Source>ToCustomer</Source>
						<Receiver>ReturnToCustomer</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>Vendor --&gt; VendorsPayment</Description>
						<Order>200</Order>
						<Source>Vendor</Source>
						<Receiver>VendorsPayment</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>Other --&gt; OthersCancellationNonCashCashFunds</Description>
						<Order>250</Order>
						<Source>Other</Source>
						<Receiver>OtherWriteOff</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>Salary --&gt; TransferSalary</Description>
						<Order>300</Order>
						<Source>Salary</Source>
						<Receiver>TransferSalary</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OCROperationsKinds</Code>
				<Description>Enum: Kinds operations "Petty cash receipt"</Description>
				<Order>800</Order>
				<Source>EnumRef.OperationKindsCashReceipt</Source>
				<Receiver>EnumRef.OCROperationsKinds</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>FromAdvanceHolder --&gt; ReturnCashFundsAdvanceHolder</Description>
						<Order>50</Order>
						<Source>FromAdvanceHolder</Source>
						<Receiver>ReturnFromAccountablePerson</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>FromCustomer --&gt; BuyerPayment</Description>
						<Order>100</Order>
						<Source>FromCustomer</Source>
						<Receiver>BuyerPayment</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>FromVendor --&gt; ReturnCashFundsByProvider</Description>
						<Order>150</Order>
						<Source>FromVendor</Source>
						<Receiver>ReturnFromVendor</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>Other --&gt; ReceiptOfCashFundsOthers</Description>
						<Order>200</Order>
						<Source>Other</Source>
						<Receiver>OtherIncome</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>RetailIncome --&gt; RetailIncome</Description>
						<Order>250</Order>
						<Source>RetailIncome</Source>
						<Receiver>RetailIncome</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>RetailIncomeAccrualAccounting --&gt; RetailIncome</Description>
						<Order>300</Order>
						<Source>RetailIncomeAccrualAccounting</Source>
						<Receiver>RetailIncome</Receiver>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>CurrencyPurchase --&gt; OtherIncome</Description>
						<Order>350</Order>
						<Source>CurrencyPurchase</Source>
						<Receiver>OtherIncome</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsRKO</Code>
				<Description>Enum: Kinds operations "Cash payment"</Description>
				<Order>850</Order>
				<Source>EnumRef.OperationKindsCashPayment</Source>
				<Receiver>EnumRef.OperationKindsRKO</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Salary --&gt; SalaryPayStatements</Description>
						<Order>50</Order>
						<Source>Salary</Source>
						<Receiver>SalaryPayStatements</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>Taxes --&gt; CashExpenseOthers</Description>
						<Order>100</Order>
						<Source>Taxes</Source>
						<Receiver>OtherExpense</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ToAdvanceHolder --&gt; IssuanceOfCashFundsToAdvanceHolder</Description>
						<Order>150</Order>
						<Source>ToAdvanceHolder</Source>
						<Receiver>IssuanceToAccountablePerson</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>ToCustomer --&gt; ReturnCashMeansToCustomer</Description>
						<Order>200</Order>
						<Source>ToCustomer</Source>
						<Receiver>ReturnToCustomer</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>Vendor --&gt; VendorsPayment</Description>
						<Order>250</Order>
						<Source>Vendor</Source>
						<Receiver>VendorsPayment</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>Other --&gt; CashExpenseOthers</Description>
						<Order>300</Order>
						<Source>Other</Source>
						<Receiver>OtherExpense</Receiver>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>TransferToCashCR --&gt; OtherExpense</Description>
						<Order>350</Order>
						<Source>TransferToCashCR</Source>
						<Receiver>OtherExpense</Receiver>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>SalaryForEmployee --&gt; SalaryPayWorks</Description>
						<Order>400</Order>
						<Source>SalaryForEmployee</Source>
						<Receiver>SalaryPayEmployee</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>ContractKindsCounterparties</Code>
				<Description>Enum: Kinds contracts</Description>
				<Order>900</Order>
				<Source>EnumRef.ContractKinds</Source>
				<Receiver>EnumRef.ContractKindsCounterparties</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Other --&gt; Other</Description>
						<Order>50</Order>
						<Source>Other</Source>
						<Receiver>Other</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>WithAgent --&gt; WithAgent</Description>
						<Order>100</Order>
						<Source>WithAgent</Source>
						<Receiver>WithAgent</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>FromPrincipal --&gt; FromPrincipal</Description>
						<Order>150</Order>
						<Source>FromPrincipal</Source>
						<Receiver>FromPrincipal</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>WithCustomer --&gt; WithCustomer</Description>
						<Order>200</Order>
						<Source>WithCustomer</Source>
						<Receiver>WithCustomer</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>WithVendor --&gt; WithVendor</Description>
						<Order>250</Order>
						<Source>WithVendor</Source>
						<Receiver>WithVendor</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>AccountTypeIssuedInvoice</Code>
				<Description>Enum: Kinds operations "Account-texture"</Description>
				<Order>950</Order>
				<Source>EnumRef.OperationKindsCustomerInvoiceNote</Source>
				<Receiver>EnumRef.AccountTypeCustomerInvoiceNoteBy</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Advance --&gt; Prepayment</Description>
						<Order>50</Order>
						<Source>Advance</Source>
						<Receiver>Prepayment</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>Sale --&gt; OnImplementation</Description>
						<Order>100</Order>
						<Source>Sale</Source>
						<Receiver>OnImplementation</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>AccrualDifferences --&gt; OnSummDifference</Description>
						<Order>150</Order>
						<Source>AccrualDifferences</Source>
						<Receiver>OnSummDifference</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>OnPrincipalAdvance --&gt; OnPrincipalAdvance</Description>
						<Order>200</Order>
						<Source>OnPrincipalAdvance</Source>
						<Receiver>OnPrincipalAdvance</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>ReceivedInvoiceKind</Code>
				<Description>Enum: Kinds operations "Account-texture"</Description>
				<Order>950</Order>
				<Source>EnumRef.OperationKindsSupplierInvoiceNote</Source>
				<Receiver>EnumRef.ReceivedInvoiceKind</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Advance --&gt; Prepayment</Description>
						<Order>50</Order>
						<Source>Advance</Source>
						<Receiver>Prepayment</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>Receipt --&gt; OnIncome</Description>
						<Order>100</Order>
						<Source>Receipt</Source>
						<Receiver>OnIncome</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>AccrualDifferences --&gt; TrueUp</Description>
						<Order>150</Order>
						<Source>AccrualDifferences</Source>
						<Receiver>OnIncome</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsMoveProducts</Code>
				<Description>Enum: Kinds operations "Inventory transfer"</Description>
				<Order>1000</Order>
				<Source>EnumRef.OperationKindsInventoryTransfer</Source>
				<Receiver>EnumRef.OperationKindsMoveProducts</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>ReturnFromExploitation --&gt;</Description>
						<Order>50</Order>
						<Source>ReturnFromExploitation</Source>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>TransferToOperation --&gt;</Description>
						<Order>100</Order>
						<Source>TransferToOperation</Source>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>Move --&gt; ProductsFinishedProducts</Description>
						<Order>150</Order>
						<Source>Move</Source>
						<Receiver>ProductsFinishedProducts</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>WriteOffToExpenses --&gt;</Description>
						<Order>200</Order>
						<Source>WriteOffToExpenses</Source>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>BudgetTransferKinds</Code>
				<Description>Enum: Kinds enumerations in budget</Description>
				<Order>1050</Order>
				<Source>EnumRef.BudgetTransferKinds</Source>
				<Receiver>EnumRef.BudgetTransferKinds</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>OtherPayment --&gt; OtherPayment</Description>
						<Order>50</Order>
						<Source>OtherPayment</Source>
						<Receiver>OtherPayment</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>TaxPayment --&gt; TaxPayment</Description>
						<Order>100</Order>
						<Source>TaxPayment</Source>
						<Receiver>TaxPayment</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>CustomsPayment --&gt; CustomsPayment</Description>
						<Order>150</Order>
						<Source>CustomsPayment</Source>
						<Receiver>CustomsPayment</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>KindsWarehouses</Code>
				<Description>Enum: Types structural units</Description>
				<Order>1100</Order>
				<Source>EnumRef.StructuralUnitsTypes</Source>
				<Receiver>EnumRef.KindsWarehouses</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Retail --&gt; Retail</Description>
						<Order>50</Order>
						<Source>Retail</Source>
						<Receiver>Retail</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>RetailAccrualAccounting --&gt; ManualBidding</Description>
						<Order>100</Order>
						<Source>RetailAccrualAccounting</Source>
						<Receiver>NotAutomateTradingPoint</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>Warehouse --&gt; Wholesale</Description>
						<Order>150</Order>
						<Source>Warehouse</Source>
						<Receiver>Wholesale</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>Department --&gt;</Description>
						<Order>200</Order>
						<Source>Department</Source>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsDebtAdjustment</Code>
				<Description>Enum: Kinds operations "Netting"</Description>
				<Order>1150</Order>
				<Source>EnumRef.OperationKindsNetting</Source>
				<Receiver>EnumRef.OperationKindsDebtAdjustment</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Netting --&gt; PostingOffsetting</Description>
						<Order>50</Order>
						<Source>Netting</Source>
						<Receiver>PostingOffsetting</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>CustomerDebtAdjustment --&gt; DebtsWriteOff</Description>
						<Order>100</Order>
						<Source>CustomerDebtAdjustment</Source>
						<Receiver>DebtCancellation</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>VendorDebtAdjustment --&gt; DebtsWriteOff</Description>
						<Order>150</Order>
						<Source>VendorDebtAdjustment</Source>
						<Receiver>DebtCancellation</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>CustomerDebtAssignment --&gt; TransferDebt</Description>
						<Order>200</Order>
						<Source>CustomerDebtAssignment</Source>
						<Receiver>DebtTransfer</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>DebtAssignmentToVendor --&gt; TransferDebt</Description>
						<Order>250</Order>
						<Source>DebtAssignmentToVendor</Source>
						<Receiver>DebtTransfer</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>AlcoholSaleLicensesKinds</Code>
				<Description>Enum: Kinds licenses alcohol products</Description>
				<Order>1200</Order>
				<Source>EnumRef.LicenseKindsOnAlcoholicProducts</Source>
				<Receiver>EnumRef.AlcoholSaleLicensesKinds</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>AlcoholicProducts --&gt; AlcoholicProducts</Description>
						<Order>50</Order>
						<Source>AlcoholicProducts</Source>
						<Receiver>AlcoholicProducts</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>Beer --&gt; Beer</Description>
						<Order>100</Order>
						<Source>Beer</Source>
						<Receiver>Beer</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>AlcoholContainingNonFoodProducts --&gt; Alcohol-containing</Description>
						<Order>150</Order>
						<Source>AlcoholContainingNonFoodProducts</Source>
						<Receiver>AlcoholContainingNonFoodProducts</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>AlcoholContainingFoodProducts --&gt; Alcohol-containing</Description>
						<Order>200</Order>
						<Source>AlcoholContainingFoodProducts</Source>
						<Receiver>AlcoholContainingFoodProducts</Receiver>
					</Value>
				</Values>
			</Rule>
		</Group>
		<Group>
			<Code>Catalogs</Code>
			<Description>Catalogs</Description>
			<Order>100</Order>
			<Rule>
				<Code>BankAccounts</Code>
				<Description>Catalog: Bank account</Description>
				<Order>50</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.BankAccounts</Source>
				<Receiver>CatalogRef.BankAccounts</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Bank --&gt; Bank</Description>
						<Order>50</Order>
						<Source Name="Bank" Kind="Attribute" Type="CatalogRef.Banks"/>
						<Receiver Name="Bank" Kind="Attribute" Type="CatalogRef.Banks"/>
						<ConversionRuleCode>Banks                                             </ConversionRuleCode>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>CashCurrency --&gt; CashCurrency</Description>
						<Order>100</Order>
						<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<Receiver Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>AccountType --&gt; AccountType</Description>
						<Order>150</Order>
						<Source Name="AccountType" Kind="Attribute" Type="String"/>
						<Receiver Name="AccountType" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>4</Code>
						<Description>Owner --&gt; Owner</Description>
						<Order>200</Order>
						<Source Name="Owner" Kind="Property"/>
						<Receiver Name="Owner" Kind="Property"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>ClosingDate --&gt; ClosingDate</Description>
						<Order>250</Order>
						<Source Name="ClosingDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="ClosingDate" Kind="Attribute" Type="Date"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>OpeningDate --&gt; OpeningDate</Description>
						<Order>300</Order>
						<Source Name="OpeningDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="OpeningDate" Kind="Attribute" Type="Date"/>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>Code --&gt; Code</Description>
						<Order>350</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>Description --&gt; Description</Description>
						<Order>400</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>9</Code>
						<Description>PermissionNumberAndDate --&gt; PermissionNumberAndDate</Description>
						<Order>450</Order>
						<Source Name="PermissionNumberAndDate" Kind="Attribute" Type="String"/>
						<Receiver Name="PermissionNumberAndDate" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>10</Code>
						<Description>AccountNo --&gt; AccountNo</Description>
						<Order>500</Order>
						<Source Name="AccountNo" Kind="Attribute" Type="String"/>
						<Receiver Name="AccountNo" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>11</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>550</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>12</Code>
						<Description>AmountWithoutCents --&gt; AmountWithoutCents</Description>
						<Order>600</Order>
						<Source Name="AmountWithoutCents" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="AmountWithoutCents" Kind="Attribute" Type="Boolean"/>
					</Property>
					<Property>
						<Code>13</Code>
						<Description>CorrespondentText --&gt; CorrespondentText</Description>
						<Order>650</Order>
						<Source Name="CorrespondentText" Kind="Attribute" Type="String"/>
						<Receiver Name="CorrespondentText" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>14</Code>
						<Description>DestinationText --&gt; DestinationText</Description>
						<Order>700</Order>
						<Source Name="DestinationText" Kind="Attribute" Type="String"/>
						<Receiver Name="DestinationText" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>15</Code>
						<Description>KPPIndicationVersion --&gt; AlwaysSpecifyPPC</Description>
						<Order>750</Order>
						<Source Name="KPPIndicationVersion" Kind="Attribute" Type="EnumRef.KPPIndicationVariants"/>
						<Receiver Name="AlwaysSpecifyPPC" Kind="Attribute" Type="Boolean"/>
						<BeforeExport>Value = (Source.KPPIndicationVersion = Enums.KPPIndicationVariants.InAllPaymentOrders);</BeforeExport>
					</Property>
					<Property>
						<Code>16</Code>
						<Description>MonthOutputOption --&gt; MonthInWords</Description>
						<Order>800</Order>
						<Source Name="MonthOutputOption" Kind="Attribute" Type="EnumRef.MonthInDocumentDateOutputVariants"/>
						<Receiver Name="MonthInWords" Kind="Attribute" Type="Boolean"/>
						<BeforeExport>Value = (Source.MonthOutputOption = Enums.MonthOutputTypesInDocumentDate.InWords);</BeforeExport>
					</Property>
					<Property>
						<Code>17</Code>
						<Description>AccountsBank --&gt; SettlementBank</Description>
						<Order>850</Order>
						<Source Name="AccountsBank" Kind="Attribute" Type="CatalogRef.Banks"/>
						<Receiver Name="SettlementBank" Kind="Attribute" Type="CatalogRef.Banks"/>
						<ConversionRuleCode>Banks                                             </ConversionRuleCode>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>Banks</Code>
				<Description>Catalog: Banks</Description>
				<Order>100</Order>
				<BeforeExport>ExportFlagOnlyReferences = False;
If IncomingData &lt;&gt; Undefined
   AND IncomingData.Property("ExportFlagOnlyReferences") Then
	ExportFlagOnlyReferences = True;
EndIf;

If Not ExportFlagOnlyReferences AND ExportedObjects.Find(Source.Ref, "Key") = Undefined Then
	StructureExportingsFlag = New Structure("ExportFlagOnlyReferences");
	DumpByRule(Source, , StructureExportingsFlag, , "Banks");
EndIf;</BeforeExport>
				<AfterExportToFile>NewRow = ExportedObjects.Add();
NewRow.Key = Source.Ref;</AfterExportToFile>
				<Source>CatalogRef.Banks</Source>
				<Receiver>CatalogRef.Banks</Receiver>
				<Properties>
					<Property Search="true">
						<Code>3</Code>
						<Description>Code --&gt; Code</Description>
						<Order>150</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>Description --&gt; Description</Description>
						<Order>250</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true" Required="true">
						<Code>6</Code>
						<Description>IsFolder --&gt; IsFolder</Description>
						<Order>300</Order>
						<Source Name="IsFolder" Kind="Property" Type="Boolean"/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>11</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>550</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>12</Code>
						<Description>Address --&gt; Address</Description>
						<Order>600</Order>
						<Source Name="Address" Kind="Attribute" Type="String"/>
						<Receiver Name="Address" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>13</Code>
						<Description>City --&gt; City</Description>
						<Order>650</Order>
						<Source Name="City" Kind="Attribute" Type="String"/>
						<Receiver Name="City" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>14</Code>
						<Description>CorrAccount --&gt; CorrAccount</Description>
						<Order>700</Order>
						<Source Name="CorrAccount" Kind="Attribute" Type="String"/>
						<Receiver Name="CorrAccount" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>15</Code>
						<Description>PhoneNumbers --&gt; PhoneNumbers</Description>
						<Order>750</Order>
						<Source Name="PhoneNumbers" Kind="Attribute" Type="String"/>
						<Receiver Name="PhoneNumbers" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>16</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>800</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.Banks"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.Banks"/>
						<ConversionRuleCode>Banks                                             </ConversionRuleCode>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>Currencies</Code>
				<Description>Catalog: Currencies</Description>
				<Order>150</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.Currencies</Source>
				<Receiver>CatalogRef.Currencies</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>100</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>DescriptionFull --&gt; DescriptionFull</Description>
						<Order>150</Order>
						<Source Name="DescriptionFull" Kind="Attribute" Type="String"/>
						<Receiver Name="DescriptionFull" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>WritingParametersInEnglish --&gt; WritingParametersInEnglish</Description>
						<Order>200</Order>
						<Source Name="WritingParametersInEnglish" Kind="Attribute" Type="String"/>
						<Receiver Name="WritingParametersInEnglish" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>250</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>Counterparties</Code>
				<Description>Catalog: Counterparties</Description>
				<Order>200</Order>
				<AfterImport>
If ValueIsFilled(Object.CounterpartyMainContract)
	AND Object.CounterpartyMainContract.GetObject() = Undefined Then
	
	Object.CounterpartyMainContract = Catalogs.CounterpartyContracts.EmptyRef();	
EndIf;</AfterImport>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.Counterparties</Source>
				<Receiver>CatalogRef.Counterparties</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>100</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>150</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.Counterparties"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.Counterparties"/>
						<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
					</Property>
					<Property Search="true" Required="true">
						<Code>4</Code>
						<Description>IsFolder --&gt; IsFolder</Description>
						<Order>200</Order>
						<Source Name="IsFolder" Kind="Property" Type="Boolean"/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
					</Property>
					<Property Search="true">
						<Code>5</Code>
						<Description>TIN --&gt; TIN</Description>
						<Order>250</Order>
						<Source Name="TIN" Kind="Attribute" Type="String"/>
						<Receiver Name="TIN" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>CodeByOKPO --&gt; CodeByOKPO</Description>
						<Order>300</Order>
						<Source Name="CodeByOKPO" Kind="Attribute" Type="String"/>
						<Receiver Name="CodeByOKPO" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>7</Code>
						<Description>KPP --&gt; KPP</Description>
						<Order>350</Order>
						<Source Name="KPP" Kind="Attribute" Type="String"/>
						<Receiver Name="KPP" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>DescriptionFull --&gt; DescriptionFull</Description>
						<Order>400</Order>
						<Source Name="DescriptionFull" Kind="Attribute" Type="String"/>
						<Receiver Name="DescriptionFull" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>9</Code>
						<Description>LegalEntityIndividual --&gt; LegalEntityIndividual</Description>
						<Order>450</Order>
						<Source Name="LegalEntityIndividual" Kind="Attribute" Type="EnumRef.LegalEntityIndividual"/>
						<Receiver Name="LegalEntityIndividual" Kind="Attribute" Type="EnumRef.LegalEntityIndividual"/>
						<ConversionRuleCode>LegalEntityIndividual                                         </ConversionRuleCode>
					</Property>
					<Property>
						<Code>10</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>500</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>11</Code>
						<Description>BankAccountByDefault --&gt; DefaultBankAccount</Description>
						<Order>550</Order>
						<Source Name="BankAccountByDefault" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
						<Receiver Name="DefaultBankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
						<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
					</Property>
					<Property>
						<Code>12</Code>
						<Description>ContractByDefault --&gt; CounterpartyMainContract</Description>
						<Order>600</Order>
						<Source Name="ContractByDefault" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
						<Receiver Name="CounterpartyMainContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
						<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
					</Property>
					<Property>
						<Code>13</Code>
						<Description> --&gt; HeadCounterparty</Description>
						<Order>650</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="HeadCounterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
						<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						<BeforeExport>Value = Source.Ref;</BeforeExport>
					</Property>
					<Group Disable="true">
						<Code>14</Code>
						<Description>ContactInformation --&gt;</Description>
						<Order>750</Order>
						<Source Name="ContactInformation" Kind="TabularSection"/>
						<Receiver Name="" Kind=""/>
						<BeforeProcessExport>Cancel = Source.IsFolder;</BeforeProcessExport>
						<Property Disable="true">
							<Code>15</Code>
							<Description>Kind --&gt;</Description>
							<Order>50</Order>
							<Source Name="Kind" Kind="Attribute" Type="CatalogRef.ContactInformationTypes"/>
							<Receiver Name="" Kind=""/>
						</Property>
						<Property Disable="true">
							<Code>16</Code>
							<Description>Type --&gt;</Description>
							<Order>100</Order>
							<Source Name="Type" Kind="Attribute" Type="EnumRef.ContactInformationTypes"/>
							<Receiver Name="" Kind=""/>
						</Property>
						<Property Disable="true">
							<Code>17</Code>
							<Description>FieldsValues --&gt;</Description>
							<Order>150</Order>
							<Source Name="FieldsValues" Kind="Attribute" Type="String"/>
							<Receiver Name="" Kind=""/>
						</Property>
						<Property Disable="true">
							<Code>18</Code>
							<Description>Presentation --&gt;</Description>
							<Order>200</Order>
							<Source Name="Presentation" Kind="Attribute" Type="String"/>
							<Receiver Name="" Kind=""/>
						</Property>
					</Group>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>UOMClassifier</Code>
				<Description>Catalog: Classifier units measurements</Description>
				<Order>250</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.UOMClassifier</Source>
				<Receiver>CatalogRef.UOMClassifier</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>100</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>DescriptionFull --&gt; DescriptionFull</Description>
						<Order>150</Order>
						<Source Name="DescriptionFull" Kind="Attribute" Type="String"/>
						<Receiver Name="DescriptionFull" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>200</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>ProductsAndServices</Code>
				<Description>Catalog: ProductsAndServices</Description>
				<Order>300</Order>
				<AfterImport>Execute(Algorithms.ImportInformationAboutAlcoholicProducts);</AfterImport>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.ProductsAndServices</Source>
				<Receiver>CatalogRef.ProductsAndServices</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Comment --&gt; Comment</Description>
						<Order>100</Order>
						<Source Name="Comment" Kind="Attribute" Type="String"/>
						<Receiver Name="Comment" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>3</Code>
						<Description>Description --&gt; Description</Description>
						<Order>150</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>DescriptionFull --&gt; DescriptionFull</Description>
						<Order>200</Order>
						<Source Name="DescriptionFull" Kind="Attribute" Type="String"/>
						<Receiver Name="DescriptionFull" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>ProductsAndServicesCategory --&gt; ProductsAndServicesCategory</Description>
						<Order>250</Order>
						<Source Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
						<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
						<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>300</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>350</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.ProductsAndServices"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.ProductsAndServices"/>
						<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>VATRate --&gt; VATRate</Description>
						<Order>400</Order>
						<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
						<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
						<BeforeExport>If Not Source.IsFolder Then
	If Source.VATRate.NotTaxable Then
		Expression = "Enums.VATRates.WithoutVAT";	
	ElsIf Source.VATRate.Rate = 18
		 AND Not Source.VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT18";
	ElsIf Source.VATRate.Rate = 18
			AND Source.VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT18_118";
	ElsIf Source.VATRate.Rate = 10 
		 AND Not Source.VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT10";
	ElsIf Source.VATRate.Rate = 10 
			AND Source.VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT10_110";
	ElsIf Source.VATRate.Rate = 0 Then
		Expression = "Enums.VATRates.VAT0"; 
	ElsIf Source.VATRate.Rate = 20
		 AND Not Source.VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT20";
	ElsIf Source.VATRate.Rate = 20
			AND Source.VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT20_120";
	Else
		Expression = "Enums.VATRates.VAT18";
	EndIf;
EndIf;</BeforeExport>
					</Property>
					<Property Search="true" Required="true">
						<Code>9</Code>
						<Description>IsFolder --&gt; IsFolder</Description>
						<Order>450</Order>
						<Source Name="IsFolder" Kind="Property" Type="Boolean"/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>10</Code>
						<Description>MeasurementUnit --&gt; BaseMeasurementUnit</Description>
						<Order>500</Order>
						<Source Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
						<Receiver Name="BaseMeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
						<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
					</Property>
					<Property>
						<Code>11</Code>
						<Description>Specification --&gt; MainProductsAndServicesSpecification</Description>
						<Order>550</Order>
						<Source Name="Specification" Kind="Attribute" Type="CatalogRef.Specifications"/>
						<Receiver Name="MainProductsAndServicesSpecification" Kind="Attribute" Type="CatalogRef.ProductsAndServicesSpecifications"/>
						<ConversionRuleCode>SpecificationsProductsAndServices                          </ConversionRuleCode>
					</Property>
					<Property>
						<Code>13</Code>
						<Description>ProductsAndServicesType --&gt; Service</Description>
						<Order>600</Order>
						<Source Name="ProductsAndServicesType" Kind="Attribute" Type="EnumRef.ProductsAndServicesTypes"/>
						<Receiver Name="Service" Kind="Attribute" Type="Boolean"/>
						<BeforeExport>If Source.ProductsAndServicesType = Enums.ProductsAndServicesTypes.Service
 OR Source.ProductsAndServicesType = Enums.ProductsAndServicesTypes.Work Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
					</Property>
					<Property>
						<Code>14</Code>
						<Description>SKU --&gt; SKU</Description>
						<Order>650</Order>
						<Source Name="SKU" Kind="Attribute" Type="String"/>
						<Receiver Name="SKU" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>15</Code>
						<Description>CountryOfOrigin --&gt; CountryOfOrigin</Description>
						<Order>700</Order>
						<Source Name="CountryOfOrigin" Kind="Attribute" Type="CatalogRef.WorldCountries"/>
						<Receiver Name="CountryOfOrigin" Kind="Attribute" Type="CatalogRef.WorldCountriesClassifier"/>
						<ConversionRuleCode>ClassifierOfWorldCountries                            </ConversionRuleCode>
					</Property>
					<Property>
						<Code>16</Code>
						<Description>AlcoholicProductsKind --&gt; </Description>
						<Order>750</Order>
						<Source Name="AlcoholicProductsKind" Kind="Attribute" Type="CatalogRef.AlcoholicProductsKinds"/>
						<Receiver Name="" Kind=""/>
						<ParameterForTransferName>AlcoholicProducts</ParameterForTransferName>
						<BeforeExport>Value = ValueIsFilled(Source.AlcoholicProductsKind);</BeforeExport>
					</Property>
					<Property>
						<Code>22</Code>
						<Description>VolumeDAL --&gt; </Description>
						<Order>800</Order>
						<Source Name="VolumeDAL" Kind="Attribute" Type="Number"/>
						<Receiver Name="" Kind=""/>
						<ParameterForTransferName>VolumeDAL</ParameterForTransferName>
					</Property>
					<Property>
						<Code>17</Code>
						<Description>AlcoholicProductsKind --&gt; </Description>
						<Order>850</Order>
						<Source Name="AlcoholicProductsKind" Kind="Attribute" Type="CatalogRef.AlcoholicProductsKinds"/>
						<Receiver Name="" Kind=""/>
						<ConversionRuleCode>AlcoholicProductsKinds                          </ConversionRuleCode>
						<ParameterForTransferName>AlcoholicProductsKind</ParameterForTransferName>
					</Property>
					<Property>
						<Code>18</Code>
						<Description>AlcoholicProductsKind --&gt; </Description>
						<Order>900</Order>
						<Source Name="AlcoholicProductsKind" Kind="Attribute" Type="CatalogRef.AlcoholicProductsKinds"/>
						<Receiver Name="" Kind=""/>
						<ConversionRuleCode>AlcoholSaleLicensesKinds                     </ConversionRuleCode>
						<ParameterForTransferName>LicenseKind</ParameterForTransferName>
						<OnExport>If ValueIsFilled(Value) Then
	StructureValue = CommonUse.ObjectAttributesValues(Value, "LicenseKind");
	Value = StructureValue.LicenseKind;
Else
	Value = Enums.LicenseKindsOnAlcoholicProducts.EmptyRef();
EndIf;</OnExport>
					</Property>
					<Property>
						<Code>19</Code>
						<Description>ImportedAlcoholicProducts --&gt; </Description>
						<Order>950</Order>
						<Source Name="ImportedAlcoholicProducts" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="" Kind=""/>
						<ParameterForTransferName>ImportedAlcoholicProducts</ParameterForTransferName>
					</Property>
					<Property>
						<Code>20</Code>
						<Description>AlcoholicProductsManufacturerImporter --&gt; </Description>
						<Order>1050</Order>
						<Source Name="AlcoholicProductsManufacturerImporter" Kind="Attribute" Type="CatalogRef.Counterparties"/>
						<Receiver Name="" Kind=""/>
						<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						<ParameterForTransferName>AlcoholicProductsManufacturerImporter</ParameterForTransferName>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>Companies</Code>
				<Description>Catalog: Companies</Description>
				<Order>350</Order>
				<BeforeExport>If Source.IsFolder = True Then
	
	Cancel = True;
	
EndIf;</BeforeExport>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.Companies</Source>
				<Receiver>CatalogRef.Companies</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>100</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>3</Code>
						<Description>TIN --&gt; TIN</Description>
						<Order>150</Order>
						<Source Name="TIN" Kind="Attribute" Type="String"/>
						<Receiver Name="TIN" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>CodeByOKATO --&gt; CodeByOKATO</Description>
						<Order>200</Order>
						<Source Name="CodeByOKATO" Kind="Attribute" Type="String"/>
						<Receiver Name="CodeByOKATO" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>CodeByOKPO --&gt; CodeByOKPO</Description>
						<Order>250</Order>
						<Source Name="CodeByOKPO" Kind="Attribute" Type="String"/>
						<Receiver Name="CodeByOKPO" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>6</Code>
						<Description>KPP --&gt; KPP</Description>
						<Order>300</Order>
						<Source Name="KPP" Kind="Attribute" Type="String"/>
						<Receiver Name="KPP" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>DescriptionFull --&gt; DescriptionFull</Description>
						<Order>350</Order>
						<Source Name="DescriptionFull" Kind="Attribute" Type="String"/>
						<Receiver Name="DescriptionFull" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>Prefix --&gt; Prefix</Description>
						<Order>400</Order>
						<Source Name="Prefix" Kind="Attribute" Type="String"/>
						<Receiver Name="Prefix" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>9</Code>
						<Description>LegalEntityIndividual --&gt; LegalEntityIndividual</Description>
						<Order>450</Order>
						<Source Name="LegalEntityIndividual" Kind="Attribute" Type="EnumRef.LegalEntityIndividual"/>
						<Receiver Name="LegalEntityIndividual" Kind="Attribute" Type="EnumRef.LegalEntityIndividual"/>
						<ConversionRuleCode>LegalEntityIndividual                                         </ConversionRuleCode>
					</Property>
					<Property>
						<Code>10</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>500</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>11</Code>
						<Description>BankAccountByDefault --&gt; DefaultBankAccount</Description>
						<Order>550</Order>
						<Source Name="BankAccountByDefault" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
						<Receiver Name="DefaultBankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
						<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
					</Property>
					<Property>
						<Code>12</Code>
						<Description>Individual --&gt; AnIndividualEntrepreneur</Description>
						<Order>600</Order>
						<Source Name="Individual" Kind="Attribute" Type="CatalogRef.Individuals"/>
						<Receiver Name="AnIndividualEntrepreneur" Kind="Attribute" Type="CatalogRef.Individuals"/>
						<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
					</Property>
					<Property>
						<Code>18</Code>
						<Description>CertificateIssueDate --&gt; CertificateIssueDate</Description>
						<Order>650</Order>
						<Source Name="CertificateIssueDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="CertificateIssueDate" Kind="Attribute" Type="Date"/>
					</Property>
					<Property>
						<Code>19</Code>
						<Description>CertificateSeriesNumber --&gt; CertificateSeriesNumber</Description>
						<Order>700</Order>
						<Source Name="CertificateSeriesNumber" Kind="Attribute" Type="String"/>
						<Receiver Name="CertificateSeriesNumber" Kind="Attribute" Type="String"/>
					</Property>
					<Group Disable="true">
						<Code>13</Code>
						<Description>ContactInformation --&gt;</Description>
						<Order>750</Order>
						<Source Name="ContactInformation" Kind="TabularSection"/>
						<Receiver Name="" Kind=""/>
						<Property Disable="true">
							<Code>14</Code>
							<Description>Kind --&gt;</Description>
							<Order>50</Order>
							<Source Name="Kind" Kind="Attribute" Type="CatalogRef.ContactInformationTypes"/>
							<Receiver Name="" Kind=""/>
						</Property>
						<Property Disable="true">
							<Code>15</Code>
							<Description>Type --&gt;</Description>
							<Order>100</Order>
							<Source Name="Type" Kind="Attribute" Type="EnumRef.ContactInformationTypes"/>
							<Receiver Name="" Kind=""/>
						</Property>
						<Property Disable="true">
							<Code>16</Code>
							<Description>FieldsValues --&gt;</Description>
							<Order>150</Order>
							<Source Name="FieldsValues" Kind="Attribute" Type="String"/>
							<Receiver Name="" Kind=""/>
						</Property>
						<Property Disable="true">
							<Code>17</Code>
							<Description>Presentation --&gt;</Description>
							<Order>200</Order>
							<Source Name="Presentation" Kind="Attribute" Type="String"/>
							<Receiver Name="" Kind=""/>
						</Property>
					</Group>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>ProductsAndServicesCategories</Code>
				<Description>Catalog: ProductsAndServices groups</Description>
				<Order>400</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.ProductsAndServicesCategories</Source>
				<Receiver>CatalogRef.ProductsAndServicesCategories</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>100</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>200</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property Search="true" Required="true">
						<Code>5</Code>
						<Description> --&gt; IsFolder</Description>
						<Order>250</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
						<BeforeExport>Value = False;</BeforeExport>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>Individuals</Code>
				<Description>Catalog: Actual person</Description>
				<Order>450</Order>
				<BeforeExport>If Source.IsFolder = True Then
	
	Cancel = True;
	
EndIf;</BeforeExport>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.Individuals</Source>
				<Receiver>CatalogRef.Individuals</Receiver>
				<Properties>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>1</Code>
						<Description>BirthDate --&gt; BirthDate</Description>
						<Order>100</Order>
						<Source Name="BirthDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="BirthDate" Kind="Attribute" Type="Date"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Gender --&gt; Gender</Description>
						<Order>150</Order>
						<Source Name="Gender" Kind="Attribute" Type="EnumRef.PrivatePersonGender"/>
						<Receiver Name="Gender" Kind="Attribute" Type="EnumRef.IndividualsGender"/>
						<ConversionRuleCode>GenderIndividuals                                  </ConversionRuleCode>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>200</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>Code --&gt; Code</Description>
						<Order>350</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Group Disable="true">
						<Code>8</Code>
						<Description>ContactInformation --&gt;</Description>
						<Order>400</Order>
						<Source Name="ContactInformation" Kind="TabularSection"/>
						<Receiver Name="" Kind=""/>
						<BeforeProcessExport>Cancel = Source.IsFolder;</BeforeProcessExport>
						<Property Disable="true">
							<Code>9</Code>
							<Description>Kind --&gt;</Description>
							<Order>50</Order>
							<Source Name="Kind" Kind="Attribute" Type="CatalogRef.ContactInformationTypes"/>
							<Receiver Name="" Kind=""/>
						</Property>
						<Property Disable="true">
							<Code>10</Code>
							<Description>Type --&gt;</Description>
							<Order>100</Order>
							<Source Name="Type" Kind="Attribute" Type="EnumRef.ContactInformationTypes"/>
							<Receiver Name="" Kind=""/>
						</Property>
						<Property Disable="true">
							<Code>11</Code>
							<Description>FieldsValues --&gt;</Description>
							<Order>150</Order>
							<Source Name="FieldsValues" Kind="Attribute" Type="String"/>
							<Receiver Name="" Kind=""/>
						</Property>
						<Property Disable="true">
							<Code>12</Code>
							<Description>Presentation --&gt;</Description>
							<Order>200</Order>
							<Source Name="Presentation" Kind="Attribute" Type="String"/>
							<Receiver Name="" Kind=""/>
						</Property>
					</Group>
					<Property>
						<Code>13</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>450</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.Individuals"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.Individuals"/>
						<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
					</Property>
					<Property Search="true" Required="true">
						<Code>14</Code>
						<Description>IsFolder --&gt; IsFolder</Description>
						<Order>500</Order>
						<Source Name="IsFolder" Kind="Property" Type="Boolean"/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>CounterpartyContractsSearchByIdIdentificator</Code>
				<Description>Catalog: Contracts counterparties</Description>
				<Order>500</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.CounterpartyContracts</Source>
				<Receiver>CatalogRef.CounterpartyContracts</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Owner --&gt; Owner</Description>
						<Order>100</Order>
						<Source Name="Owner" Kind="Property" Type="CatalogRef.Counterparties"/>
						<Receiver Name="Owner" Kind="Property" Type="CatalogRef.Counterparties"/>
						<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Code --&gt; Code</Description>
						<Order>150</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>4</Code>
						<Description>Company --&gt; Company</Description>
						<Order>200</Order>
						<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
						<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
						<ConversionRuleCode>Companies                                       </ConversionRuleCode>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>250</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>SettlementsInStandardUnits --&gt; SettlementsInStandardUnits</Description>
						<Order>300</Order>
						<Source Name="SettlementsInStandardUnits" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="SettlementsInStandardUnits" Kind="Attribute" Type="Boolean"/>
					</Property>
					<Property Search="true">
						<Code>7</Code>
						<Description>SettlementsCurrency --&gt; SettlementsCurrency</Description>
						<Order>350</Order>
						<Source Name="SettlementsCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<Receiver Name="SettlementsCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
					</Property>
					<Property Search="true" Required="true">
						<Code>8</Code>
						<Description> --&gt; IsFolder</Description>
						<Order>400</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
						<BeforeExport>Value = False;</BeforeExport>
					</Property>
					<Property Search="true">
						<Code>9</Code>
						<Description>ContractKind --&gt; ContractKind</Description>
						<Order>450</Order>
						<Source Name="ContractKind" Kind="Attribute" Type="EnumRef.ContractsKinds"/>
						<Receiver Name="ContractKind" Kind="Attribute" Type="EnumRef.CounterpartiesContractsKinds"/>
						<ConversionRuleCode>ContractKindsCounterparties                         </ConversionRuleCode>
					</Property>
					<Property>
						<Code>10</Code>
						<Description>PriceKind --&gt; PricesType</Description>
						<Order>500</Order>
						<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
						<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
						<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
					</Property>
					<Property>
						<Code>11</Code>
						<Description>ContractDate --&gt; Date</Description>
						<Order>550</Order>
						<Source Name="ContractDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="Date" Kind="Attribute" Type="Date"/>
					</Property>
					<Property>
						<Code>12</Code>
						<Description>ContractNo --&gt; Number</Description>
						<Order>600</Order>
						<Source Name="ContractNo" Kind="Attribute" Type="String"/>
						<Receiver Name="Number" Kind="Attribute" Type="String"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>CounterpartyContracts</Code>
				<Description>Catalog: Contracts counterparties</Description>
				<Order>550</Order>
				<Source>CatalogRef.CounterpartyContracts</Source>
				<Receiver>CatalogRef.CounterpartyContracts</Receiver>
				<Properties>
					<Property Search="true">
						<Code>3</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>1</Code>
						<Description>Owner --&gt; Owner</Description>
						<Order>100</Order>
						<Source Name="Owner" Kind="Property" Type="CatalogRef.Counterparties"/>
						<Receiver Name="Owner" Kind="Property" Type="CatalogRef.Counterparties"/>
						<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Code --&gt; Code</Description>
						<Order>150</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>4</Code>
						<Description>Company --&gt; Company</Description>
						<Order>200</Order>
						<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
						<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
						<ConversionRuleCode>Companies                                       </ConversionRuleCode>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>250</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>SettlementsInStandardUnits --&gt; SettlementsInStandardUnits</Description>
						<Order>300</Order>
						<Source Name="SettlementsInStandardUnits" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="SettlementsInStandardUnits" Kind="Attribute" Type="Boolean"/>
					</Property>
					<Property Search="true">
						<Code>9</Code>
						<Description>SettlementsCurrency --&gt; SettlementsCurrency</Description>
						<Order>350</Order>
						<Source Name="SettlementsCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<Receiver Name="SettlementsCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
					</Property>
					<Property Search="true" Required="true">
						<Code>11</Code>
						<Description> --&gt; IsFolder</Description>
						<Order>400</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
						<BeforeExport>Value = False;</BeforeExport>
					</Property>
					<Property Search="true">
						<Code>12</Code>
						<Description>ContractKind --&gt; ContractKind</Description>
						<Order>450</Order>
						<Source Name="ContractKind" Kind="Attribute" Type="EnumRef.ContractsKinds"/>
						<Receiver Name="ContractKind" Kind="Attribute" Type="EnumRef.CounterpartiesContractsKinds"/>
						<ConversionRuleCode>ContractKindsCounterparties                         </ConversionRuleCode>
					</Property>
					<Property>
						<Code>13</Code>
						<Description>PriceKind --&gt; PricesType</Description>
						<Order>500</Order>
						<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
						<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
						<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
					</Property>
					<Property>
						<Code>14</Code>
						<Description>ContractDate --&gt; Date</Description>
						<Order>550</Order>
						<Source Name="ContractDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="Date" Kind="Attribute" Type="Date"/>
					</Property>
					<Property>
						<Code>15</Code>
						<Description>ContractNo --&gt; Number</Description>
						<Order>600</Order>
						<Source Name="ContractNo" Kind="Attribute" Type="String"/>
						<Receiver Name="Number" Kind="Attribute" Type="String"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>DocumentsProvingIdentity</Code>
				<Description>Catalog: Documents certifying the identity of</Description>
				<Order>600</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.IndividualsDocumentsKinds</Source>
				<Receiver>CatalogRef.DocumentsProvingIdentity</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>100</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values>
					<Value>
						<Code>12</Code>
						<Description>LocalPassport --&gt; IMTD21</Description>
						<Order>600</Order>
						<Source>LocalPassport</Source>
						<Receiver>IMTD21</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>CCDNumbers</Code>
				<Description>Catalog: Numbers CCD</Description>
				<Order>650</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.CCDNumbers</Source>
				<Receiver>CatalogRef.CCDNumbers</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>100</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>CashFlowItems</Code>
				<Description>Catalog:Cash flow items</Description>
				<Order>700</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.CashFlowItems</Source>
				<Receiver>CatalogRef.CashFlowItems</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>100</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>150</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property Search="true" Required="true">
						<Code>4</Code>
						<Description>IsFolder --&gt; IsFolder</Description>
						<Order>200</Order>
						<Source Name="IsFolder" Kind="Property" Type="Boolean"/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>250</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.CashFlowItems"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.CashFlowItems"/>
						<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>Warehouses</Code>
				<Description>Catalog: Structural items</Description>
				<Order>750</Order>
				<AfterImport>If DataImportToInformationBaseMode() Then
	
	Filter = New Structure("StructuralUnit");
	Filter.StructuralUnit = Object.Ref;
	SliceLast = InformationRegisters.ResponsiblePersons.SliceLast(CurrentDate(), Filter);
	
	If SliceLast.Count() &lt; 1 Then
		RecordPeriod = '19800101';
	Else
		RecordPeriod = CurrentDate();
	EndIf;
	
	FRP = "";
	
	If ObjectParameters &lt;&gt; Undefined Then
		FRP = ObjectParameters.Get("FRP");
	EndIf;
	
	If ValueIsFilled(FRP)
		AND (SliceLast.Count() &lt; 1
	   OR FRP &lt;&gt; SliceLast[0].Individual) Then 
		
		RecordManager = InformationRegisters.ResponsiblePersons.CreateRecordManager();
		RecordManager.Period             = RecordPeriod;
		RecordManager.StructuralUnit = ?(ValueIsFilled(Refs), Refs, Object.GetNewObjectRef());
		RecordManager.Individual     = FRP;
		RecordManager.Write();
		
	EndIf;
	
EndIf;</AfterImport>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.StructuralUnits</Source>
				<Receiver>CatalogRef.Warehouses</Receiver>
				<Properties>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>100</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>150</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property Search="true">
						<Code>6</Code>
						<Description>StructuralUnitType --&gt; KindOfStore</Description>
						<Order>200</Order>
						<Source Name="StructuralUnitType" Kind="Attribute" Type="EnumRef.StructuralUnitsTypes"/>
						<Receiver Name="KindOfStore" Kind="Attribute" Type="EnumRef.WarehousesKinds"/>
						<ConversionRuleCode>KindsWarehouses                                       </ConversionRuleCode>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>FRP --&gt;</Description>
						<Order>250</Order>
						<Source Name="FRP" Kind="Attribute" Type="CatalogRef.Individuals"/>
						<Receiver Name="" Kind=""/>
						<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
						<ParameterForTransferName>FRP</ParameterForTransferName>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>RetailPriceKind --&gt; TypeOfRetailPrices</Description>
						<Order>300</Order>
						<Source Name="RetailPriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
						<Receiver Name="TypeOfRetailPrices" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
						<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
					</Property>
					<Property>
						<Code>9</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>350</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.StructuralUnits"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.Warehouses"/>
						<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						<BeforeExport>Empty = True;</BeforeExport>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>SpecificationsProductsAndServices</Code>
				<Description>Catalog: Specifications</Description>
				<Order>800</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.Specifications</Source>
				<Receiver>CatalogRef.SpecificationsProductsAndServices</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Owner --&gt; Owner</Description>
						<Order>50</Order>
						<Source Name="Owner" Kind="Property" Type="CatalogRef.ProductsAndServices"/>
						<Receiver Name="Owner" Kind="Property" Type="CatalogRef.ProductsAndServices"/>
						<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Code --&gt; Code</Description>
						<Order>100</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>3</Code>
						<Description>Description --&gt; Description</Description>
						<Order>150</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>200</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property Search="true" Required="true">
						<Code>5</Code>
						<Description> --&gt; IsFolder</Description>
						<Order>250</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
						<BeforeExport>Value = False;</BeforeExport>
					</Property>
					<Property>
						<Code>6</Code>
						<Description> --&gt; Count</Description>
						<Order>300</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Count" Kind="Attribute" Type="Number"/>
						<BeforeExport>Value = 1;</BeforeExport>
					</Property>
					<Group>
						<Code>7</Code>
						<Description>Content --&gt; InitialComponents</Description>
						<Order>350</Order>
						<Source Name="Content" Kind="TabularSection"/>
						<Receiver Name="InitialComponents" Kind="TabularSection"/>
						<Property>
							<Code>8</Code>
							<Description>Count --&gt; Count</Description>
							<Order>50</Order>
							<Source Name="Count" Kind="Attribute" Type="Number"/>
							<Receiver Name="Count" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
							<Order>100</Order>
							<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
							<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
							<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
						</Property>
					</Group>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>PriceTypesProductsAndServices</Code>
				<Description>Catalog: Kinds price</Description>
				<Order>850</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.PriceKinds</Source>
				<Receiver>CatalogRef.PriceTypesProductsAndServices</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>PriceCurrency --&gt; PriceCurrency</Description>
						<Order>50</Order>
						<Source Name="PriceCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<Receiver Name="PriceCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Code --&gt; Code</Description>
						<Order>100</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Comment --&gt; Comment</Description>
						<Order>150</Order>
						<Source Name="Comment" Kind="Attribute" Type="String"/>
						<Receiver Name="Comment" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>4</Code>
						<Description>Description --&gt; Description</Description>
						<Order>200</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>RoundUp --&gt; RoundUp</Description>
						<Order>250</Order>
						<Source Name="RoundUp" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="RoundUp" Kind="Attribute" Type="Boolean"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>300</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>RoundingOrder --&gt; RoundingOrder</Description>
						<Order>350</Order>
						<Source Name="RoundingOrder" Kind="Attribute" Type="EnumRef.RoundingMethods"/>
						<Receiver Name="RoundingOrder" Kind="Attribute" Type="EnumRef.RoundingMethods"/>
						<ConversionRuleCode>RoundingMethods                                 </ConversionRuleCode>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>PriceIncludesVAT --&gt; PriceIncludesVAT</Description>
						<Order>400</Order>
						<Source Name="PriceIncludesVAT" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="PriceIncludesVAT" Kind="Attribute" Type="Boolean"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>UnitCompanies</Code>
				<Description>Catalog: Departments companies</Description>
				<Order>900</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.StructuralUnits</Source>
				<Receiver>CatalogRef.UnitCompanies</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Company --&gt; Owner</Description>
						<Order>100</Order>
						<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
						<Receiver Name="Owner" Kind="Property" Type="CatalogRef.Companies"/>
					</Property>
					<Property Search="true">
						<Code>3</Code>
						<Description>Description --&gt; Description</Description>
						<Order>150</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>200</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>250</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.StructuralUnits"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.CompaniesDepartments"/>
						<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>ContactInformationTypes</Code>
				<Description>Catalog: Kinds contact information</Description>
				<Order>950</Order>
				<AfterImport>If Object.CanEditOnlyInDialog Then
	Object.EditInForm = True;
EndIf;</AfterImport>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.ContactInformationTypes</Source>
				<Receiver>CatalogRef.ContactInformationTypes</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Type --&gt; Type</Description>
						<Order>100</Order>
						<Source Name="Type" Kind="Attribute" Type="EnumRef.ContactInformationTypes"/>
						<Receiver Name="Type" Kind="Attribute" Type="EnumRef.ContactInformationTypes"/>
						<ConversionRuleCode>ContactInformationTypes                          </ConversionRuleCode>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>EditInDialogOnly --&gt; EditInForm</Description>
						<Order>150</Order>
						<Source Name="EditInDialogOnly" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="EditInForm" Kind="Attribute" Type="Boolean"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>Parent --&gt; ContactInformationObjectKind</Description>
						<Order>200</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.ContactInformationTypes"/>
						<Receiver Name="ContactInformationObjectKind" Kind="Attribute" Type="EnumRef.ContactInformationObjectKinds"/>
						<BeforeExport>Value = "";
If Source.Parent = Catalogs.ContactInformationTypes.CatalogCounterparties Then
	Value = "Counterparties";
ElsIf Source.Parent = Catalogs.ContactInformationTypes.CatalogCompanies Then
	Value = "Companies";
ElsIf Source.Parent = Catalogs.ContactInformationTypes.CatalogIndividuals Then
	Value = "Individuals";
EndIf;</BeforeExport>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>250</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>CompanyEmail --&gt; CompanyEmail</Description>
						<Order>50</Order>
						<Source>CompanyEmail</Source>
						<Receiver>CompanyEmail</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>CounterpartyOtherInformation --&gt; AnotherInformationCo</Description>
						<Order>100</Order>
						<Source>CounterpartyOtherInformation</Source>
						<Receiver>CounterpartyOtherInformation</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>CounterpartyOtherInformation --&gt; CounterpartyOtherInformation</Description>
						<Order>150</Order>
						<Source>CounterpartyOtherInformation</Source>
						<Receiver>CounterpartyOtherInformation</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>OtherIndInfo --&gt; OtherInformationNatPersons</Description>
						<Order>200</Order>
						<Source>OtherIndInfo</Source>
						<Receiver>OtherIndInfo</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>ContactPersonPhone --&gt; ContactPersonPhone</Description>
						<Order>250</Order>
						<Source>ContactPersonPhone</Source>
						<Receiver>ContactPersonPhone</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>CounterpartyPhone --&gt; CounterpartyPhone</Description>
						<Order>300</Order>
						<Source>CounterpartyPhone</Source>
						<Receiver>CounterpartyPhone</Receiver>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>CompanyPhone --&gt; CompanyPhone</Description>
						<Order>350</Order>
						<Source>CompanyPhone</Source>
						<Receiver>CompanyPhone</Receiver>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>IndividualPhone --&gt; IndividualPhone</Description>
						<Order>400</Order>
						<Source>IndividualPhone</Source>
						<Receiver>IndividualPhone</Receiver>
					</Value>
					<Value>
						<Code>9</Code>
						<Description>CounterpartyFax --&gt; CounterpartyFax</Description>
						<Order>450</Order>
						<Source>CounterpartyFax</Source>
						<Receiver>CounterpartyFax</Receiver>
					</Value>
					<Value>
						<Code>10</Code>
						<Description>CounterpartyFactAddress --&gt; CounterpartyFactAddress</Description>
						<Order>500</Order>
						<Source>CounterpartyFactAddress</Source>
						<Receiver>CounterpartyFactAddress</Receiver>
					</Value>
					<Value>
						<Code>11</Code>
						<Description>CounterpartyFactAddress --&gt; CounterpartyFactAddress</Description>
						<Order>550</Order>
						<Source>CounterpartyFactAddress</Source>
						<Receiver>CounterpartyFactAddress</Receiver>
					</Value>
					<Value>
						<Code>12</Code>
						<Description>CounterpartyLegalAddress --&gt; CounterpartyLegalAddress</Description>
						<Order>600</Order>
						<Source>CounterpartyLegalAddress</Source>
						<Receiver>CounterpartyLegalAddress</Receiver>
					</Value>
					<Value>
						<Code>13</Code>
						<Description>CounterpartyLegalAddress --&gt; CounterpartyLegalAddress</Description>
						<Order>650</Order>
						<Source>CounterpartyLegalAddress</Source>
						<Receiver>CounterpartyLegalAddress</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>ClassifierOfWorldCountries</Code>
				<Description>Catalog: Countries world</Description>
				<Order>1000</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.WorldCountries</Source>
				<Receiver>CatalogRef.ClassifierOfWorldCountries</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>AlphaCode2 --&gt; AlphaCode2</Description>
						<Order>50</Order>
						<Source Name="AlphaCode2" Kind="Attribute" Type="String"/>
						<Receiver Name="AlphaCode2" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>DescriptionFull --&gt; DescriptionFull</Description>
						<Order>100</Order>
						<Source Name="DescriptionFull" Kind="Attribute" Type="String"/>
						<Receiver Name="DescriptionFull" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>3</Code>
						<Description>Code --&gt; Code</Description>
						<Order>150</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>Description --&gt; Description</Description>
						<Order>200</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>250</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>AlcoholicProductsKinds</Code>
				<Description>Catalog: Kinds alcohol products</Description>
				<Order>1050</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
				<Source>CatalogRef.AlcoholicProductsKinds</Source>
				<Receiver>CatalogRef.AlcoholicProductsKinds</Receiver>
				<Properties>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>1</Code>
						<Description>Code --&gt; ProductKindCode</Description>
						<Order>100</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="ProductKindCode" Kind="Attribute" Type="String"/>
						<CastToLength>10</CastToLength>
						<OnExport>Value = TrimAll(Value);</OnExport>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>150</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>AlcoholicProductsVendorLicenses</Code>
				<Description>Catalog: Licenses vendors alcohol products</Description>
				<Order>1100</Order>
				<Source>CatalogRef.AlcoholicProductsVendorLicenses</Source>
				<Receiver>InformationRegisterRecord.AlcoholicProductsVendorLicenses</Receiver>
				<Properties>
					<Property>
						<Code>2</Code>
						<Description> --&gt; Vendor</Description>
						<Order>50</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Vendor" Kind="Dimension" Type="CatalogRef.Counterparties"/>
					</Property>
					<Property>
						<Code>1</Code>
						<Description> --&gt; LicenseKind</Description>
						<Order>100</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="LicenseKind" Kind="Dimension" Type="EnumRef.AlcoholSaleLicensesTypes"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description> --&gt; Period</Description>
						<Order>150</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Period" Kind="Property" Type="Date"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description> --&gt; EndDate</Description>
						<Order>200</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="EndDate" Kind="Resource" Type="Date"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description> --&gt; IssuedBy</Description>
						<Order>250</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="IssuedBy" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description> --&gt; SeriesNumber</Description>
						<Order>300</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="SeriesNumber" Kind="Resource" Type="String"/>
					</Property>
					<Property Disable="true">
						<Code>7</Code>
						<Description>LicenseKind --&gt; </Description>
						<Order>350</Order>
						<Source Name="LicenseKind" Kind="Attribute" Type="EnumRef.AlcoholicProductsLicenseKinds"/>
						<Receiver Name="" Kind=""/>
					</Property>
					<Property Disable="true">
						<Code>8</Code>
						<Description>StartDate --&gt; </Description>
						<Order>400</Order>
						<Source Name="StartDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="" Kind=""/>
					</Property>
					<Property Disable="true">
						<Code>9</Code>
						<Description>EndDate --&gt; </Description>
						<Order>450</Order>
						<Source Name="EndDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="" Kind=""/>
					</Property>
					<Property Disable="true">
						<Code>10</Code>
						<Description>IssuedBy --&gt; </Description>
						<Order>500</Order>
						<Source Name="IssuedBy" Kind="Attribute" Type="String"/>
						<Receiver Name="" Kind=""/>
					</Property>
					<Property Disable="true">
						<Code>11</Code>
						<Description>Owner --&gt; </Description>
						<Order>550</Order>
						<Source Name="Owner" Kind="Property" Type="CatalogRef.Counterparties"/>
						<Receiver Name="" Kind=""/>
					</Property>
					<Property Disable="true">
						<Code>12</Code>
						<Description>Description --&gt; </Description>
						<Order>600</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="" Kind=""/>
					</Property>
					<Property Disable="true">
						<Code>13</Code>
						<Description>DeletionMark --&gt; </Description>
						<Order>650</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="" Kind=""/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
		</Group>
		<Group>
			<Code>Registers information</Code>
			<Description>Registers information</Description>
			<Order>150</Order>
			<Rule>
				<Code>CurrencyRates</Code>
				<Description>Register information: Currency rates currencies</Description>
				<Order>100</Order>
				<DontRememberExported>true</DontRememberExported>
				<Source>InformationRegisterRecord.CurrencyRates</Source>
				<Receiver>InformationRegisterRecord.CurrencyRates</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Active --&gt; Active</Description>
						<Order>50</Order>
						<Source Name="Active" Kind="Property" Type="Boolean"/>
						<Receiver Name="Active" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Currency --&gt; Currency</Description>
						<Order>100</Order>
						<Source Name="Currency" Kind="Dimension" Type="CatalogRef.Currencies"/>
						<Receiver Name="Currency" Kind="Dimension" Type="CatalogRef.Currencies"/>
						<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Multiplicity --&gt; Multiplicity</Description>
						<Order>150</Order>
						<Source Name="Multiplicity" Kind="Resource" Type="Number"/>
						<Receiver Name="Multiplicity" Kind="Resource" Type="Number"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>ExchangeRate --&gt; ExchangeRate</Description>
						<Order>200</Order>
						<Source Name="ExchangeRate" Kind="Resource" Type="Number"/>
						<Receiver Name="ExchangeRate" Kind="Resource" Type="Number"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>Period --&gt; Period</Description>
						<Order>250</Order>
						<Source Name="Period" Kind="Property" Type="Date"/>
						<Receiver Name="Period" Kind="Property" Type="Date"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>PassportDataNatPersons</Code>
				<Description>Register information: Passport data actual persons</Description>
				<Order>200</Order>
				<DontRememberExported>true</DontRememberExported>
				<Source>InformationRegisterRecord.IndividualsDocuments</Source>
				<Receiver>InformationRegisterRecord.PassportDataNatPersons</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Active --&gt; Active</Description>
						<Order>50</Order>
						<Source Name="Active" Kind="Property" Type="Boolean"/>
						<Receiver Name="Active" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Period --&gt; Period</Description>
						<Order>100</Order>
						<Source Name="Period" Kind="Property" Type="Date"/>
						<Receiver Name="Period" Kind="Property" Type="Date"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Ind --&gt; Ind</Description>
						<Order>150</Order>
						<Source Name="Ind" Kind="Dimension" Type="CatalogRef.Individuals"/>
						<Receiver Name="Ind" Kind="Dimension" Type="CatalogRef.Individuals"/>
						<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>DocumentKind --&gt; DocumentKind1</Description>
						<Order>200</Order>
						<Source Name="DocumentKind" Kind="Dimension" Type="CatalogRef.IndividualsDocumentsKinds"/>
						<Receiver Name="DocumentKind1" Kind="Resource" Type="CatalogRef.IdentityPapers"/>
						<ConversionRuleCode>DocumentsProvingIdentity                   </ConversionRuleCode>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>WhoIssued --&gt; DocumentWhoIssued</Description>
						<Order>250</Order>
						<Source Name="WhoIssued" Kind="Resource" Type="String"/>
						<Receiver Name="DocumentWhoIssued" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>DepartmentCode --&gt; DocumentCodeDepartments</Description>
						<Order>300</Order>
						<Source Name="DepartmentCode" Kind="Resource" Type="String"/>
						<Receiver Name="DocumentCodeDepartments" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>Number --&gt; DocumentNumber</Description>
						<Order>350</Order>
						<Source Name="Number" Kind="Resource" Type="String"/>
						<Receiver Name="DocumentNumber" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>Series --&gt; DocumentSeries</Description>
						<Order>400</Order>
						<Source Name="Series" Kind="Resource" Type="String"/>
						<Receiver Name="DocumentSeries" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>9</Code>
						<Description>Period --&gt; DocumentIssueDate</Description>
						<Order>450</Order>
						<Source Name="Period" Kind="Property" Type="Date"/>
						<Receiver Name="DocumentIssueDate" Kind="Resource" Type="Date"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>IndividualsDescriptionFull</Code>
				<Description>Register information: Surname, name, patronymic actual persons</Description>
				<Order>250</Order>
				<DontRememberExported>true</DontRememberExported>
				<Source>InformationRegisterRecord.IndividualsDescriptionFull</Source>
				<Receiver>InformationRegisterRecord.IndividualsDescriptionFull</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Active --&gt; Active</Description>
						<Order>50</Order>
						<Source Name="Active" Kind="Property" Type="Boolean"/>
						<Receiver Name="Active" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Name --&gt; Name</Description>
						<Order>100</Order>
						<Source Name="Name" Kind="Resource" Type="String"/>
						<Receiver Name="Name" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Patronymic --&gt; Patronymic</Description>
						<Order>150</Order>
						<Source Name="Patronymic" Kind="Resource" Type="String"/>
						<Receiver Name="Patronymic" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>Period --&gt; Period</Description>
						<Order>200</Order>
						<Source Name="Period" Kind="Property" Type="Date"/>
						<Receiver Name="Period" Kind="Property" Type="Date"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>Surname --&gt; Surname</Description>
						<Order>250</Order>
						<Source Name="Surname" Kind="Resource" Type="String"/>
						<Receiver Name="Surname" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>Ind --&gt; Ind</Description>
						<Order>300</Order>
						<Source Name="Ind" Kind="Dimension" Type="CatalogRef.Individuals"/>
						<Receiver Name="Ind" Kind="Dimension"/>
						<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>ContactInformation</Code>
				<Description>:</Description>
				<Order>300</Order>
				<AfterImport>ObjectModified = False;

For RecNo = 1 To Object.Count() Do
	
	RegisterRecord = Object[RecNo - 1];
	If RegisterRecord.Type = Enums.ContactInformationTypes.Address AND Not ValueIsFilled(RegisterRecord.Presentation) Then 
		// Fill in the default presentation if the address in SB is not custom
		AddressPresentation = ContactInformationManagement.GetAddressPresentation(RegisterRecord);
		If ValueIsFilled(AddressPresentation) Then
			ObjectModified = True;
			RegisterRecord.Presentation = AddressPresentation;
		EndIf;
	EndIf;
	
EndDo;</AfterImport>
				<DontRememberExported>true</DontRememberExported>
				<Receiver>InformationRegisterRecord.ContactInformation</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description> --&gt; Object</Description>
						<Order>50</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Object" Kind="Dimension"/>
						<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						<BeforeExport>ObjectType = TypeOf(Source.Object);
If ObjectType = Type("CatalogRef.Companies") Then
	OCRName = "Companies";
ElsIf ObjectType = Type("CatalogRef.Counterparties") Then
	OCRName = "Counterparties";
ElsIf ObjectType = Type("CatalogRef.Individuals") Then
	OCRName = "Individuals";
EndIf;</BeforeExport>
					</Property>
					<Property>
						<Code>2</Code>
						<Description> --&gt; Kind</Description>
						<Order>100</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Kind" Kind="Dimension"/>
						<ConversionRuleCode>ContactInformationTypes                          </ConversionRuleCode>
					</Property>
					<Property>
						<Code>3</Code>
						<Description> --&gt; Type</Description>
						<Order>150</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Type" Kind="Dimension" Type="EnumRef.ContactInformationTypes"/>
						<ConversionRuleCode>ContactInformationTypes                          </ConversionRuleCode>
					</Property>
					<Property>
						<Code>4</Code>
						<Description> --&gt; Field1</Description>
						<Order>200</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Field1" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description> --&gt; Field2</Description>
						<Order>250</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Field2" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description> --&gt; Field3</Description>
						<Order>300</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Field3" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>7</Code>
						<Description> --&gt; Field4</Description>
						<Order>350</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Field4" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>8</Code>
						<Description> --&gt; Field5</Description>
						<Order>400</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Field5" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>9</Code>
						<Description> --&gt; Field6</Description>
						<Order>450</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Field6" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>10</Code>
						<Description> --&gt; Field7</Description>
						<Order>500</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Field7" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>11</Code>
						<Description> --&gt; Field8</Description>
						<Order>550</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Field8" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>12</Code>
						<Description> --&gt; Field9</Description>
						<Order>600</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Field9" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>14</Code>
						<Description> --&gt; BuildingType</Description>
						<Order>700</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="BuildingType" Kind="Resource" Type="EnumRef.HousesTypes"/>
					</Property>
					<Property>
						<Code>15</Code>
						<Description> --&gt; ApartmentType</Description>
						<Order>750</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="ApartmentType" Kind="Resource" Type="EnumRef.ApartmentTypes"/>
					</Property>
					<Property>
						<Code>16</Code>
						<Description> --&gt; BlockType</Description>
						<Order>800</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="BlockType" Kind="Resource" Type="EnumRef.BlockTypes"/>
					</Property>
					<Property>
						<Code>17</Code>
						<Description> --&gt; Presentation</Description>
						<Order>850</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Presentation" Kind="Resource" Type="String"/>
						<BeforeExport>// For the address the presentation is generated during the import in case the address is not custom
If Source.Type = Enums.ContactInformationTypes.Address AND Not Source.ItsArbitraryString Then
	Empty = True;
EndIf;</BeforeExport>
					</Property>
					<Property>
						<Code>18</Code>
						<Description> --&gt; Comment</Description>
						<Order>900</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Comment" Kind="Resource" Type="String"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
		</Group>
		<Group>
			<Code>Documents</Code>
			<Description>Documents</Description>
			<Order>200</Order>
			<Group>
				<Code>MarketingAndSales</Code>
				<Description>Documents. Marketing and Sales</Description>
				<Order>50</Order>
				<Rule>
					<Code>GoodsServicesSale</Code>
					<Description>Document: flow rate Consignment</Description>
					<Order>50</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	ElsIf Not Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.DoNotRead Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	If ObjectParameters &lt;&gt; Undefined Then
		
		ParametersOfTP = ObjectParameters.Get("ProductsTabularSection");
		
		If ParametersOfTP &lt;&gt; Undefined 
			AND ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined Then
			
			// Fill up the Goods tabular section of the document with the default values
			For Each CurRow IN Object.Products Do					
				If ParametersOfTP[CurRow.LineNumber - 1].ProductOnCommission Then
					
					CurRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
					
				EndIf;
			EndDo;
			
		EndIf;
		
	EndIf;
	
	CashControl.SetBankAccount(Object.BankAccountOfTheCompany, Object.Company, Constants.CurrencyOfRegulatedAccounting.Get());
	Execute(Algorithms.HandleCounterpartyContract);

EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.CustomerInvoice</Source>
					<Receiver>DocumentRef.GoodsServicesSale</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>100</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsCustomerInvoice"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsGoodsImplementation"/>
							<ConversionRuleCode>OperationKindsImplementationProducts                     </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Date --&gt; Date</Description>
							<Order>150</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>450</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>500</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>550</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>600</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>650</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>700</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>VATTaxation --&gt; ConsiderVAT</Description>
							<Order>750</Order>
							<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
							<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
						</Property>
						<Property>
							<Code>37</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>800</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>40</Code>
							<Description> --&gt;</Description>
							<Order>850</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="" Kind=""/>
							<ParameterForTransferName>SaleToCustomer</ParameterForTransferName>
							<BeforeExport>Value = Source.OperationKind = Enums.OperationKindsCustomerInvoice.SaleToCustomer;</BeforeExport>
						</Property>
						<Property>
							<Code>43</Code>
							<Description>Consignor --&gt; Consignor</Description>
							<Order>900</Order>
							<Source Name="Consignor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Consignor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>44</Code>
							<Description>Consignee --&gt; Consignee</Description>
							<Order>950</Order>
							<Source Name="Consignee" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Consignee" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>45</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1000</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>50</Code>
							<Description> --&gt; MethodCreditAdvances</Description>
							<Order>1100</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsCustomerInvoice.TransferForCommission Then
	Expression = "Enums.WaysOfOffsettingAdvances.DoNotRead";
ElsIf Source.Prepayment.Count() &gt; 0 Then
	Expression = "Enums.WaysOfOffsettingAdvances.ByDocument";
Else
	Expression = "Enums.WaysOfOffsettingAdvances.automatically";
EndIf;</BeforeExport>
						</Property>
						<Group>
							<Code>18</Code>
							<Description> --&gt; Products</Description>
							<Order>1150</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>Execute(Algorithms.GenerateTableOfProducts);</BeforeProcessExport>
							<Property>
								<Code>19</Code>
								<Description> --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description> --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>23</Code>
								<Description> --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description> --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description> --&gt; Price</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>28</Code>
								<Description> --&gt; Factor</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>29</Code>
								<Description> --&gt; VATRate</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>38</Code>
								<Description> --&gt; Count</Description>
								<Order>1050</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>41</Code>
								<Description> --&gt;</Description>
								<Order>1100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsCustomerInvoice.SaleToCustomer
   AND ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>27</Code>
							<Description> --&gt; Services</Description>
							<Order>1200</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Services" Kind="TabularSection"/>
							<BeforeProcessExport>Execute(Algorithms.GenerateTableOfServices);</BeforeProcessExport>
							<Property>
								<Code>30</Code>
								<Description> --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>31</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>32</Code>
								<Description> --&gt; Amount</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>33</Code>
								<Description> --&gt; Price</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>34</Code>
								<Description> --&gt; VATRate</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>35</Code>
								<Description> --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>42</Code>
								<Description> --&gt; Content</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Content" Kind="Attribute" Type="String"/>
							</Property>
						</Group>
						<Group>
							<Code>47</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>1250</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeProcessExport>
							<Property>
								<Code>48</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>49</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Group Disable="true">
							<Code>52</Code>
							<Description>Inventory --&gt;</Description>
							<Order>1350</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="" Kind=""/>
							<Property Disable="true">
								<Code>53</Code>
								<Description>Count --&gt;</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>54</Code>
								<Description>MeasurementUnit --&gt;</Description>
								<Order>100</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>55</Code>
								<Description>ProductsAndServices --&gt;</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="" Kind=""/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property Disable="true">
								<Code>56</Code>
								<Description>Amount --&gt;</Description>
								<Order>200</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>57</Code>
								<Description>VATAmount --&gt;</Description>
								<Order>250</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>58</Code>
								<Description>Price --&gt;</Description>
								<Order>300</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>59</Code>
								<Description>VATRate --&gt;</Description>
								<Order>350</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>60</Code>
								<Description>Count --&gt;</Description>
								<Order>400</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>61</Code>
								<Description>Batch --&gt;</Description>
								<Order>450</Order>
								<Source Name="Batch" Kind="Attribute" Type="CatalogRef.ProductsAndServicesBatches"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>62</Code>
								<Description>Content --&gt;</Description>
								<Order>500</Order>
								<Source Name="Content" Kind="Attribute" Type="String"/>
								<Receiver Name="" Kind=""/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ActOnProvisionOfIndustrialServices</Code>
					<Description>Document: Act completed works</Description>
					<Order>100</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	Else
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	// Fill in GL account of expenses	
	Object.FillGLAccountsVTabPartsServices(True);
	Object.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.MainProduction;
	
	// Fill in the GL accounts of settlements
	Execute(Algorithms.FillAccountsGLAccounts);
	
	// Fill in the Content attribute of the Services tabular section
	Execute(Algorithms.FillContentTablePartsServices);
	
	// Fill in the attribute of the DocumentAmount header for showing in logs
	Execute(Algorithms.FillDocumentAmountByServices);
	
	// Fill in the required attributes in the Services tabular section
	For Each CurRow IN Object.Services Do
		Pricing.FillPlannedCost(CurRow, Object.Date);
		DataProcessorTabularSections.RecalculatePlannedSUM(CurRow);
		If CurRow.PlannedCost = 0 Then
			CurRow.PlannedCost = CurRow.Price;
		EndIf;
		If CurRow.AmountOfPlanned = 0 Then
			CurRow.AmountOfPlanned = CurRow.Amount;
		EndIf;
		CurRow.Specification = OfficeProduction.DefineDefaultSpecification(CurRow.ProductsAndServices, Object.Date);	
	EndDo;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.AcceptanceCertificate</Source>
					<Receiver>DocumentRef.ActOnProvisionOfIndustrialServices</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>350</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>400</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>450</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>500</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>550</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>600</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>Department --&gt; DepartmentCost</Description>
							<Order>650</Order>
							<Source Name="Department" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="DepartmentCost" Kind="Attribute" Type="CatalogRef.CompaniesDepartments"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>24</Code>
							<Description>VATTaxation --&gt; ConsiderVAT</Description>
							<Order>700</Order>
							<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
							<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
						</Property>
						<Property>
							<Code>28</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>750</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>29</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>800</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>30</Code>
							<Description> --&gt; ProductsAndServicesCategory</Description>
							<Order>850</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
							<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
							<BeforeExport>If Source.WorksAndServices.Count() &gt; 0
   AND ValueIsFilled(Source.WorksAndServices[0].ProductsAndServices) Then
	Value = Source.WorksAndServices[0].ProductsAndServices.ProductsAndServicesCategory;
Else
	Value = "";
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>35</Code>
							<Description> --&gt; MethodCreditAdvances</Description>
							<Order>900</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>Expression = ?(Source.Prepayment.Count() &gt; 0, "Enums.WaysOfOffsettingAdvances.ByDocument", "Enums.WaysOfOffsettingAdvances.automatically");</BeforeExport>
						</Property>
						<Property>
							<Code>36</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>950</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>16</Code>
							<Description>WorksAndServices --&gt; Services</Description>
							<Order>1000</Order>
							<Source Name="WorksAndServices" Kind="TabularSection"/>
							<Receiver Name="Services" Kind="TabularSection"/>
							<Property>
								<Code>18</Code>
								<Description>Count --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Price --&gt; Price</Description>
								<Order>350</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>31</Code>
								<Description> --&gt; ProductsAndServicesCategory</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
								<BeforeExport>Value = CollectionObject.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>32</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>1050</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeProcessExport>
							<Property>
								<Code>33</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>34</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>AgentSalesReport</Code>
					<Description>Document: Report comissionare</Description>
					<Order>150</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	Else
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.AgentReport</Source>
					<Receiver>DocumentRef.AgentSalesReport</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>350</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>CommissionFeePercent --&gt; CommissionFeePercent</Description>
							<Order>400</Order>
							<Source Name="CommissionFeePercent" Kind="Attribute" Type="Number"/>
							<Receiver Name="CommissionFeePercent" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>BrokerageCalculationMethod --&gt; BrokerageCalculationMethod</Description>
							<Order>450</Order>
							<Source Name="BrokerageCalculationMethod" Kind="Attribute" Type="EnumRef.CommissionFeeCalculationMethods"/>
							<Receiver Name="BrokerageCalculationMethod" Kind="Attribute" Type="EnumRef.CommissionFeeCalculationMethods"/>
							<ConversionRuleCode>CommissionFeeCalculationMethods         </ConversionRuleCode>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>VATCommissionFeePercent --&gt; VATCommissionFeePercent</Description>
							<Order>500</Order>
							<Source Name="VATCommissionFeePercent" Kind="Attribute" Type="CatalogRef.VATRates"/>
							<Receiver Name="VATCommissionFeePercent" Kind="Attribute" Type="EnumRef.VATRates"/>
							<BeforeExport>Execute(Algorithms.FillInVatRateOfRemuneration);</BeforeExport>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>550</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>600</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>650</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>700</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>750</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>18</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>800</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>19</Code>
							<Description>KeepBackComissionFee --&gt; KeepRemuneration</Description>
							<Order>850</Order>
							<Source Name="KeepBackComissionFee" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="KeepRemuneration" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>32</Code>
							<Description>VATTaxation --&gt; ConsiderVAT</Description>
							<Order>900</Order>
							<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
							<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
						</Property>
						<Property>
							<Code>34</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>950</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>36</Code>
							<Description> --&gt; MethodCreditAdvances</Description>
							<Order>1000</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>Expression = ?(Source.Prepayment.Count() &gt; 0, "Enums.WaysOfOffsettingAdvances.ByDocument", "Enums.WaysOfOffsettingAdvances.automatically");</BeforeExport>
						</Property>
						<Property>
							<Code>49</Code>
							<Description>MakeOutInvoicesCollective --&gt; MakeOutInvoicesCollective</Description>
							<Order>1050</Order>
							<Source Name="MakeOutInvoicesCollective" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="MakeOutInvoicesCollective" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>40</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1100</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>20</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>1150</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>Execute(Algorithms.GenerateTableOfProducts);</BeforeProcessExport>
							<Property>
								<Code>21</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>26</Code>
								<Description>BrokerageAmount --&gt; BrokerageAmount</Description>
								<Order>300</Order>
								<Source Name="BrokerageAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="BrokerageAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>350</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>BrokerageVATAmount --&gt; BrokerageVATAmount</Description>
								<Order>400</Order>
								<Source Name="BrokerageVATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="BrokerageVATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>29</Code>
								<Description>TransmissionAmount --&gt; TransmissionAmount</Description>
								<Order>450</Order>
								<Source Name="TransmissionAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="TransmissionAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>30</Code>
								<Description>Price --&gt; Price</Description>
								<Order>500</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>31</Code>
								<Description>TransmissionPrice --&gt; TransmissionPrice</Description>
								<Order>550</Order>
								<Source Name="TransmissionPrice" Kind="Attribute" Type="Number"/>
								<Receiver Name="TransmissionPrice" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>33</Code>
								<Description> --&gt; Factor</Description>
								<Order>600</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>35</Code>
								<Description> --&gt; Count</Description>
								<Order>650</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>47</Code>
								<Description>ConnectionKey --&gt; RowKey</Description>
								<Order>700</Order>
								<Source Name="ConnectionKey" Kind="Attribute" Type="Number"/>
								<Receiver Name="RowKey" Kind="Attribute" Type="Number"/>
								<BeforeExport>//::: Example :::
//
// SB 1.4 binding of the first Inventory row to the first Customers row
// is the following: ConnectionKey = 0 CA 2.0 binding of the first Goods row to the first Customers row is the following: RowKey = 1
//
If TypeOf(Value) = Type("Number") Then
	
	Value = Value + 1;
	
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>37</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>1200</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeProcessExport>
							<Property>
								<Code>38</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>39</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Group>
							<Code>41</Code>
							<Description>Customers --&gt; Customers</Description>
							<Order>1250</Order>
							<Source Name="Customers" Kind="TabularSection"/>
							<Receiver Name="Customers" Kind="TabularSection"/>
							<Property>
								<Code>42</Code>
								<Description>CustomerInvoiceNoteIssued --&gt; CustomerInvoiceNoteIssued</Description>
								<Order>50</Order>
								<Source Name="CustomerInvoiceNoteIssued" Kind="Attribute" Type="Boolean"/>
								<Receiver Name="CustomerInvoiceNoteIssued" Kind="Attribute" Type="Boolean"/>
							</Property>
							<Property>
								<Code>43</Code>
								<Description>InvoiceDate --&gt; InvoiceDate</Description>
								<Order>100</Order>
								<Source Name="InvoiceDate" Kind="Attribute" Type="Date"/>
								<Receiver Name="InvoiceDate" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>44</Code>
								<Description>Customer --&gt; Customer</Description>
								<Order>150</Order>
								<Source Name="Customer" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Customer" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>45</Code>
								<Description>CustomerInvoiceNote --&gt; CustomerInvoiceNote</Description>
								<Order>200</Order>
								<Source Name="CustomerInvoiceNote" Kind="Attribute" Type="DocumentRef.CustomerInvoiceNote"/>
								<Receiver Name="CustomerInvoiceNote" Kind="Attribute" Type="DocumentRef.CustomerInvoiceNote"/>
								<ConversionRuleCode>CustomerInvoiceNote                               </ConversionRuleCode>
							</Property>
							<Property>
								<Code>46</Code>
								<Description>ConnectionKey --&gt; RowKey</Description>
								<Order>250</Order>
								<Source Name="ConnectionKey" Kind="Attribute" Type="Number"/>
								<Receiver Name="RowKey" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Property>
							<Code>48</Code>
							<Description> --&gt; BrokerageAmount</Description>
							<Order>1300</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="BrokerageAmount" Kind="Attribute" Type="Number"/>
							<BeforeExport>Value = Source.Inventory.Total("BrokerageAmount");</BeforeExport>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>InvoiceForPayment</Code>
					<Description>Document: Account on payment</Description>
					<Order>200</Order>
					<AfterImport>Execute(Algorithms.HandleCounterpartyContract);</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InvoiceForPayment</Source>
					<Receiver>DocumentRef.InvoiceForPayment</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>44</Code>
							<Description>Company --&gt; CompanyRecipient</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="CompanyRecipient" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>400</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>450</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>500</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>550</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>600</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>650</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>23</Code>
							<Description>VATTaxation --&gt; ConsiderVAT</Description>
							<Order>700</Order>
							<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
							<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
						</Property>
						<Property>
							<Code>35</Code>
							<Description>BankAccount --&gt; StructuralUnit</Description>
							<Order>750</Order>
							<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
						</Property>
						<Property>
							<Code>45</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>800</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>15</Code>
							<Description> --&gt; Products</Description>
							<Order>850</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>Execute(Algorithms.GenerateTableOfProducts);</BeforeProcessExport>
							<Property>
								<Code>17</Code>
								<Description> --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>18</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>19</Code>
								<Description> --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description> --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description> --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>22</Code>
								<Description> --&gt; Price</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>25</Code>
							<Description> --&gt; Services</Description>
							<Order>900</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Services" Kind="TabularSection"/>
							<BeforeProcessExport>Execute(Algorithms.GenerateTableOfServices);</BeforeProcessExport>
							<Property>
								<Code>27</Code>
								<Description> --&gt; VATRate</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>28</Code>
								<Description> --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>29</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>30</Code>
								<Description> --&gt; Price</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>31</Code>
								<Description> --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>32</Code>
								<Description> --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>33</Code>
								<Description> --&gt; Content</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Content" Kind="Attribute" Type="String"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReturnOfProductsFromCustomer</Code>
					<Description>Document: Receipt Consignment</Description>
					<Order>250</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	If ObjectParameters &lt;&gt; Undefined Then
		ParametersOfTP = ObjectParameters.Get("ProductsTabularSection");
	EndIf;
	
	// Fill up the Goods tabular section of the document with the default values
	For Each CurRow IN Object.Products Do	
		If ObjectParameters &lt;&gt; Undefined 
		   AND ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined
		   AND ParametersOfTP[CurRow.LineNumber - 1].ProductOnCommission = True Then
			CurRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
		EndIf;
	EndDo;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.SupplierInvoice</Source>
					<Receiver>DocumentRef.ReturnOfProductsFromCustomer</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>100</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsSupplierInvoice"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsReturnGoodsFromCustomer"/>
							<ConversionRuleCode>OperationKindsReturnProductsFromCustomer            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Date --&gt; Date</Description>
							<Order>150</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>450</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>500</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>550</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>600</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>650</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>24</Code>
							<Description>VATTaxation --&gt; ConsiderVAT</Description>
							<Order>700</Order>
							<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
							<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
						</Property>
						<Property>
							<Code>26</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>750</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>29</Code>
							<Description> --&gt; ByExposingInvoiceReturn</Description>
							<Order>800</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="ByExposingInvoiceReturn" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = True;</BeforeExport>
						</Property>
						<Property>
							<Code>30</Code>
							<Description>BasisDocument --&gt; Deal</Description>
							<Order>850</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="Deal" Kind="Attribute"/>
							<ConversionRuleCode>GoodsServicesSale                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>31</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>900</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>15</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>950</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>18</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>Cost --&gt; Cost</Description>
								<Order>200</Order>
								<Source Name="Cost" Kind="Attribute" Type="Number"/>
								<Receiver Name="Cost" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>250</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>300</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>350</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Price --&gt; Price</Description>
								<Order>400</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>Count --&gt; Count</Description>
								<Order>500</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>Batch --&gt;</Description>
								<Order>550</Order>
								<Source Name="Batch" Kind="Attribute" Type="CatalogRef.ProductsAndServicesBatches"/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromCustomer
   AND ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ImplementationServicesForProcessing</Code>
					<Description>Document: Report O processing</Description>
					<Order>300</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	Else
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	// Fill in the GL accounts of the counterparties settlements.
	GLAccounts = AccountingAccountingCalculationsWithCounterparties.GetAccountsCalculationsWithCounterparty(
		Object.Company,
		Object.Counterparty,
		Object.CounterpartyContract
	);
	
	Object.FillAccountsGLAccounts();
	
	PricesTypePlannedPrimecost = Constants.PricesTypePlannedPrimecostProductsAndServices.Get();
	CurrencyRegulatedAccounting = Constants.CurrencyOfRegulatedAccounting.Get();
	
	// Fill in the required attributes in the Services tabular section 
	For Each CurRow IN Object.Services Do
		Object.FillGLAccountsAtRowTabPartsServices(CurRow, True);
		CurRow.PlannedCost = Pricing.GetProductsAndServicesPrice(
			CurRow.ProductsAndServices,
			PricesTypePlannedPrimecost,
			Object.Date,
			CurrencyRegulatedAccounting,
			1
		);
		DataProcessorTabularSections.RecalculatePlannedSUM(CurRow);
		Object.FillSubkonto(CurRow);
		DataProcessorTabularSections.FillTabSectionContent(CurRow, Object);
	EndDo;
	
	For Each CurRow IN Object.ConsumerMaterials Do
		GLAccounts = AccountingAccounting.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices);
		CurRow.GLAccount = GLAccounts.AccountTransferOffBal;
	EndDo;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.ProcessingReport</Source>
					<Receiver>DocumentRef.ImplementationServicesForProcessing</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>150</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>450</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>500</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>550</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>600</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>650</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>700</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>26</Code>
							<Description>VATTaxation --&gt; ConsiderVAT</Description>
							<Order>750</Order>
							<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
							<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
						</Property>
						<Property>
							<Code>28</Code>
							<Description> --&gt; MethodCreditAdvances</Description>
							<Order>800</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>Expression = ?(Source.Prepayment.Count() &gt; 0, "Enums.WaysOfOffsettingAdvances.ByDocument", "Enums.WaysOfOffsettingAdvances.automatically");</BeforeExport>
						</Property>
						<Group>
							<Code>15</Code>
							<Description>Inventory --&gt; ConsumerMaterials</Description>
							<Order>850</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="ConsumerMaterials" Kind="TabularSection"/>
							<Property>
								<Code>16</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
						</Group>
						<Group>
							<Code>18</Code>
							<Description>Products --&gt; Services</Description>
							<Order>900</Order>
							<Source Name="Products" Kind="TabularSection"/>
							<Receiver Name="Services" Kind="TabularSection"/>
							<Property>
								<Code>19</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Specification --&gt; Specification</Description>
								<Order>150</Order>
								<Source Name="Specification" Kind="Attribute" Type="CatalogRef.Specifications"/>
								<Receiver Name="Specification" Kind="Attribute" Type="CatalogRef.ProductsAndServicesSpecifications"/>
								<ConversionRuleCode>SpecificationsProductsAndServices                          </ConversionRuleCode>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>Price --&gt; Price</Description>
								<Order>350</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>Content --&gt; Content</Description>
								<Order>400</Order>
								<Source Name="Content" Kind="Attribute" Type="String"/>
								<Receiver Name="Content" Kind="Attribute" Type="String"/>
							</Property>
						</Group>
						<Group>
							<Code>29</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>950</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeProcessExport>
							<Property>
								<Code>30</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>31</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>CustomerInvoiceNote</Code>
					<Description>Document: Account-texture</Description>
					<Order>400</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;
	
	PaymentAndSettlementDocuments = Object.PaymentDocumentsDateNumber;
	If PaymentAndSettlementDocuments.Count() &gt; 0 Then
		Object.PaymentAccountingDocumentDate  = PaymentAndSettlementDocuments[0].PaymentAccountingDocumentDate;
		Object.PaymentAccountingDocumentNumber = PaymentAndSettlementDocuments[0].PaymentAccountingDocumentNumber;
	EndIf;
	
	Object.SetOperationKindCode();
	Object.IssuingMethodCode = 1; //SB does not involve getting CIN in the electronic form
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.CustomerInvoiceNote</Source>
					<Receiver>DocumentRef.CustomerInvoiceNote</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Disable="true">
							<Code>3</Code>
							<Description>BasisDocument --&gt; BasisDocument</Description>
							<Order>150</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="BasisDocument" Kind="Attribute"/>
							<BeforeExport>If TypeOf(Source.BasisDocument) = Type("DocumentRef.CustomerInvoice") Then
	If Source.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.SaleToCustomer
	 OR Source.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.TransferForCommission Then
		OCRName = "GoodsServicesSale";
	ElsIf Source.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.TransferToProcessing Then
		OCRName = "TransferOfProducts";
	ElsIf Source.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToPrincipal
		  OR Source.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnFromProcessing
		  OR Source.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToVendor Then
		OCRName = "ReturnProductsToSupplier";
	EndIf;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
							<BeforeExport>Value = Left(Source.Number, 5) + "0" + Mid(Source.Number, 6);</BeforeExport>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>OperationKind --&gt; InvoiceKind</Description>
							<Order>450</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsCustomerInvoiceNote"/>
							<Receiver Name="InvoiceKind" Kind="Attribute" Type="EnumRef.CustomerInvoiceNoteKindDisplayed"/>
							<ConversionRuleCode>AccountTypeIssuedInvoice                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>500</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>550</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>28</Code>
							<Description>ConsolidatedCommission --&gt; ConsolidatedCommission</Description>
							<Order>600</Order>
							<Source Name="ConsolidatedCommission" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="ConsolidatedCommission" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>18</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>650</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>14</Code>
							<Description>BasisDocuments --&gt; BasisDocuments</Description>
							<Order>700</Order>
							<Source Name="BasisDocuments" Kind="TabularSection"/>
							<Receiver Name="BasisDocuments" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = New ValueTable;
ObjectsCollection.Columns.Add("BasisDocument");
ObjectsCollection.Columns.Add("DocumentType");
NewRow = ObjectsCollection.Add();
NewRow.BasisDocument = Source.BasisDocument;

If TypeOf(Source.BasisDocument) = Type("DocumentRef.CustomerOrder")
   AND Source.BasisDocument.Inventory.Count() &gt; 0 Then
	NewRow = ObjectsCollection.Add();
	NewRow.BasisDocument = Source.BasisDocument;
	NewRow.DocumentType = "SalesOfGoodsAndServices";
EndIf;</BeforeProcessExport>
							<Property>
								<Code>15</Code>
								<Description>BasisDocument --&gt; BasisDocument</Description>
								<Order>50</Order>
								<Source Name="BasisDocument" Kind="Attribute"/>
								<Receiver Name="BasisDocument" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineNameOfPwcFoundationDocument);</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>19</Code>
							<Description>PaymentDocumentsDateNumber --&gt; PaymentDocumentsDateNumber</Description>
							<Order>750</Order>
							<Source Name="PaymentDocumentsDateNumber" Kind="TabularSection"/>
							<Receiver Name="PaymentDocumentsDateNumber" Kind="TabularSection"/>
							<Property>
								<Code>20</Code>
								<Description>PaymentAccountingDocumentDate --&gt; PaymentAccountingDocumentDate</Description>
								<Order>50</Order>
								<Source Name="PaymentAccountingDocumentDate" Kind="Attribute" Type="Date"/>
								<Receiver Name="PaymentAccountingDocumentDate" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>PaymentAccountingDocumentNumber --&gt; PaymentAccountingDocumentNumber</Description>
								<Order>100</Order>
								<Source Name="PaymentAccountingDocumentNumber" Kind="Attribute" Type="String"/>
								<Receiver Name="PaymentAccountingDocumentNumber" Kind="Attribute" Type="String"/>
							</Property>
						</Group>
						<Property>
							<Code>22</Code>
							<Description> --&gt; VATAmountDocument</Description>
							<Order>800</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATAmountDocument" Kind="Attribute" Type="Number"/>
							<BeforeExport>Value = Source.Inventory.Total("VATAmount");</BeforeExport>
						</Property>
						<Group>
							<Code>23</Code>
							<Description>Inventory --&gt; Advances</Description>
							<Order>850</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Advances" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.OperationKind &lt;&gt; Enums.OperationKindsCustomerInvoiceNote.Advance Then
	Cancel = True;
EndIf;</BeforeProcessExport>
							<Property>
								<Code>24</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>25</Code>
								<Description> --&gt; VATRate</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>26</Code>
								<Description>TotalAmount --&gt; Amount</Description>
								<Order>150</Order>
								<Source Name="TotalAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>200</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Group>
					<Code>Job-order</Code>
					<Description>Job-order</Description>
					<Order>600</Order>
					<Rule>
						<Code>JobOrderImplementationProductsServices</Code>
						<Description>Document: Customer order</Description>
						<Order>50</Order>
						<AfterImport>If DataImportToInformationBaseMode() Then
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	If ObjectParameters &lt;&gt; Undefined Then
		
		ParametersOfTP = ObjectParameters.Get("ProductsTabularSection");
		
		If ParametersOfTP &lt;&gt; Undefined 
			AND ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined Then
			
			// Fill up the Goods tabular section of the document with the default values
			For Each CurRow IN Object.Products Do					
				If ParametersOfTP[CurRow.LineNumber - 1].ProductOnCommission Then
					
					CurRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
					
				EndIf;
			EndDo;
			
		EndIf;
		
	EndIf;
	
	CashControl.SetBankAccount(Object.BankAccountOfTheCompany, Object.Company, Constants.CurrencyOfRegulatedAccounting.Get());
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
						<SynchronizeByID>true</SynchronizeByID>
						<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
						<Source>DocumentRef.CustomerOrder</Source>
						<Receiver>DocumentRef.GoodsServicesSale</Receiver>
						<Properties>
							<Property>
								<Code>1</Code>
								<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
								<Order>50</Order>
								<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
							</Property>
							<Property Search="true">
								<Code>3</Code>
								<Description>Finish --&gt; Date</Description>
								<Order>100</Order>
								<Source Name="Finish" Kind="Attribute" Type="Date"/>
								<Receiver Name="Date" Kind="Property" Type="Date"/>
							</Property>
							<Property>
								<Code>5</Code>
								<Description>Counterparty --&gt; Counterparty</Description>
								<Order>150</Order>
								<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property Disable="true" Search="true">
								<Code>6</Code>
								<Description>Number --&gt; Number</Description>
								<Order>200</Order>
								<Source Name="Number" Kind="Property" Type="String"/>
								<Receiver Name="Number" Kind="Property" Type="String"/>
							</Property>
							<Property>
								<Code>7</Code>
								<Description>Company --&gt; Company</Description>
								<Order>250</Order>
								<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<ConversionRuleCode>Companies                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>9</Code>
								<Description>DeletionMark --&gt; DeletionMark</Description>
								<Order>300</Order>
								<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
								<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>Posted --&gt; Posted</Description>
								<Order>350</Order>
								<Source Name="Posted" Kind="Property" Type="Boolean"/>
								<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
								<Order>400</Order>
								<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
								<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							</Property>
							<Property>
								<Code>12</Code>
								<Description> --&gt; DocumentAmount</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
								<BeforeExport>Value = Source.Inventory.Total("TotalAmount");</BeforeExport>
							</Property>
							<Property>
								<Code>29</Code>
								<Description>BankAccount --&gt; BankAccountOfTheCompany</Description>
								<Order>500</Order>
								<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<Receiver Name="BankAccountOfTheCompany" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
							</Property>
							<Property>
								<Code>30</Code>
								<Description>PriceKind --&gt; PricesType</Description>
								<Order>550</Order>
								<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
								<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
								<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
							</Property>
							<Property>
								<Code>31</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>600</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
							</Property>
							<Property>
								<Code>32</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>650</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>33</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>700</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>34</Code>
								<Description>StructuralUnitReserve --&gt; Warehouse</Description>
								<Order>750</Order>
								<Source Name="StructuralUnitReserve" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
								<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
								<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							</Property>
							<Property>
								<Code>35</Code>
								<Description>VATTaxation --&gt; ConsiderVAT</Description>
								<Order>800</Order>
								<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
								<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
								<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
							</Property>
							<Property>
								<Code>36</Code>
								<Description> --&gt; MethodCreditAdvances</Description>
								<Order>850</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
								<BeforeExport>Expression = ?(Source.Prepayment.Count() &gt; 0, "Enums.WaysOfOffsettingAdvances.ByDocument", "Enums.WaysOfOffsettingAdvances.automatically");</BeforeExport>
							</Property>
							<Property>
								<Code>87</Code>
								<Description> --&gt;</Description>
								<Order>900</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>SaleToCustomer</ParameterForTransferName>
								<BeforeExport>Value = True;</BeforeExport>
							</Property>
							<Property>
								<Code>88</Code>
								<Description> --&gt; OperationKind</Description>
								<Order>950</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsGoodsImplementation"/>
								<BeforeExport>Expression = "Enums.OperationKindsImplementationProducts.RetailComission";</BeforeExport>
							</Property>
							<Property>
								<Code>89</Code>
								<Description>Comment --&gt; Comment</Description>
								<Order>1000</Order>
								<Source Name="Comment" Kind="Attribute" Type="String"/>
								<Receiver Name="Comment" Kind="Attribute" Type="String"/>
							</Property>
							<Group>
								<Code>37</Code>
								<Description> --&gt; Products</Description>
								<Order>1100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Products" Kind="TabularSection"/>
								<BeforeProcessExport>Execute(Algorithms.GenerateTableOfProducts);</BeforeProcessExport>
								<Property>
									<Code>39</Code>
									<Description> --&gt; PlacesQuantity</Description>
									<Order>100</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>62</Code>
									<Description> --&gt; MeasurementUnit</Description>
									<Order>650</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
									<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
									<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>63</Code>
									<Description> --&gt; ProductsAndServices</Description>
									<Order>700</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
								</Property>
								<Property>
									<Code>64</Code>
									<Description> --&gt; Amount</Description>
									<Order>750</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>65</Code>
									<Description> --&gt; VATAmount</Description>
									<Order>800</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>66</Code>
									<Description> --&gt; Price</Description>
									<Order>850</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Price" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
								</Property>
								<Property>
									<Code>67</Code>
									<Description> --&gt; Factor</Description>
									<Order>900</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
								</Property>
								<Property>
									<Code>68</Code>
									<Description> --&gt; VATRate</Description>
									<Order>950</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
									<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
								</Property>
								<Property>
									<Code>69</Code>
									<Description> --&gt; Count</Description>
									<Order>1000</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Count" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>70</Code>
									<Description> --&gt;</Description>
									<Order>1050</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="" Kind=""/>
									<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
									<BeforeExport>If ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
								</Property>
							</Group>
							<Group>
								<Code>50</Code>
								<Description> --&gt; Services</Description>
								<Order>1150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Services" Kind="TabularSection"/>
								<BeforeProcessExport>Execute(Algorithms.GenerateTableOfServices);</BeforeProcessExport>
								<Property>
									<Code>51</Code>
									<Description> --&gt; Count</Description>
									<Order>50</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Count" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>52</Code>
									<Description> --&gt; ProductsAndServices</Description>
									<Order>100</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
								</Property>
								<Property>
									<Code>53</Code>
									<Description> --&gt; Content</Description>
									<Order>150</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Content" Kind="Attribute" Type="String"/>
								</Property>
								<Property>
									<Code>54</Code>
									<Description> --&gt; VATRate</Description>
									<Order>200</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
									<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
								</Property>
								<Property>
									<Code>56</Code>
									<Description> --&gt; Amount</Description>
									<Order>300</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>57</Code>
									<Description> --&gt; VATAmount</Description>
									<Order>350</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>61</Code>
									<Description> --&gt; Price</Description>
									<Order>550</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Price" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
								</Property>
							</Group>
						</Properties>
						<Values/>
					</Rule>
					<Rule>
						<Code>JobOrderActOnProvisionOfIndustrialServices</Code>
						<Description>Document: Customer order</Description>
						<Order>100</Order>
						<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	Else
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	// Fill in GL account of expenses	
	Object.FillGLAccountsVTabPartsServices(True);
	Object.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.MainProduction;
	
	// Fill in the GL accounts of settlements
	Execute(Algorithms.FillAccountsGLAccounts);
	
	// Fill in the Content attribute of the Services tabular section
	Execute(Algorithms.FillContentTablePartsServices);
	
	// Fill in the attribute of the DocumentAmount header for showing in logs
	Execute(Algorithms.FillDocumentAmountByServices);
	
	// Fill in the required attributes in the Services tabular section
	For Each CurRow IN Object.Services Do
		Pricing.FillPlannedCost(CurRow, Object.Date);
		DataProcessorTabularSections.RecalculatePlannedSUM(CurRow);
		CurRow.Specification = OfficeProduction.DefineDefaultSpecification(CurRow.ProductsAndServices, Object.Date);	
	EndDo;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
						<SynchronizeByID>true</SynchronizeByID>
						<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
						<Source>DocumentRef.CustomerOrder</Source>
						<Receiver>DocumentRef.ActOnProvisionOfIndustrialServices</Receiver>
						<Properties>
							<Property>
								<Code>1</Code>
								<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
								<Order>50</Order>
								<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
							</Property>
							<Property Search="true">
								<Code>2</Code>
								<Description>Finish --&gt; Date</Description>
								<Order>100</Order>
								<Source Name="Finish" Kind="Attribute" Type="Date"/>
								<Receiver Name="Date" Kind="Property" Type="Date"/>
							</Property>
							<Property>
								<Code>4</Code>
								<Description>Counterparty --&gt; Counterparty</Description>
								<Order>150</Order>
								<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property Disable="true" Search="true">
								<Code>5</Code>
								<Description>Number --&gt; Number</Description>
								<Order>200</Order>
								<Source Name="Number" Kind="Property" Type="String"/>
								<Receiver Name="Number" Kind="Property" Type="String"/>
							</Property>
							<Property>
								<Code>6</Code>
								<Description>Company --&gt; Company</Description>
								<Order>250</Order>
								<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<ConversionRuleCode>Companies                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>8</Code>
								<Description>DeletionMark --&gt; DeletionMark</Description>
								<Order>300</Order>
								<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
								<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>9</Code>
								<Description>Posted --&gt; Posted</Description>
								<Order>350</Order>
								<Source Name="Posted" Kind="Property" Type="Boolean"/>
								<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
								<Order>400</Order>
								<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
								<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							</Property>
							<Property>
								<Code>11</Code>
								<Description> --&gt; DocumentAmount</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
								<BeforeExport>Value = Source.Works.Total("TotalAmount");</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>PriceKind --&gt; PricesType</Description>
								<Order>500</Order>
								<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
								<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
								<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>550</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>600</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>650</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>SalesStructuralUnit --&gt; DepartmentCost</Description>
								<Order>700</Order>
								<Source Name="SalesStructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
								<Receiver Name="DepartmentCost" Kind="Attribute" Type="CatalogRef.CompaniesDepartments"/>
								<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>VATTaxation --&gt; ConsiderVAT</Description>
								<Order>750</Order>
								<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
								<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
								<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
							</Property>
							<Property>
								<Code>26</Code>
								<Description> --&gt; ProductsAndServicesCategory</Description>
								<Order>800</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
								<BeforeExport>If Source.Works.Count() &gt; 0
   AND ValueIsFilled(Source.Works[0].ProductsAndServices) Then
	Value = Source.Works[0].ProductsAndServices.ProductsAndServicesCategory;
Else
	Value = "";
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>27</Code>
								<Description> --&gt; MethodCreditAdvances</Description>
								<Order>850</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
								<BeforeExport>Expression = ?(Source.Prepayment.Count() &gt; 0, "Enums.WaysOfOffsettingAdvances.ByDocument", "Enums.WaysOfOffsettingAdvances.automatically");</BeforeExport>
							</Property>
							<Property>
								<Code>37</Code>
								<Description>Comment --&gt; Comment</Description>
								<Order>900</Order>
								<Source Name="Comment" Kind="Attribute" Type="String"/>
								<Receiver Name="Comment" Kind="Attribute" Type="String"/>
							</Property>
							<Group>
								<Code>12</Code>
								<Description>Works --&gt; Services</Description>
								<Order>1000</Order>
								<Source Name="Works" Kind="TabularSection"/>
								<Receiver Name="Services" Kind="TabularSection"/>
								<Property>
									<Code>13</Code>
									<Description>Count --&gt; Count</Description>
									<Order>50</Order>
									<Source Name="Count" Kind="Attribute" Type="Number"/>
									<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>14</Code>
									<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
									<Order>100</Order>
									<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
								</Property>
								<Property>
									<Code>16</Code>
									<Description>VATRate --&gt; VATRate</Description>
									<Order>200</Order>
									<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
									<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
									<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
								</Property>
								<Property>
									<Code>17</Code>
									<Description>Amount --&gt; Amount</Description>
									<Order>250</Order>
									<Source Name="Amount" Kind="Attribute" Type="Number"/>
									<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>18</Code>
									<Description>VATAmount --&gt; VATAmount</Description>
									<Order>300</Order>
									<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
									<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>19</Code>
									<Description>Price --&gt; Price</Description>
									<Order>350</Order>
									<Source Name="Price" Kind="Attribute" Type="Number"/>
									<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>36</Code>
									<Description> --&gt; ProductsAndServicesCategory</Description>
									<Order>400</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
									<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
									<BeforeExport>Value = CollectionObject.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
								</Property>
							</Group>
							<Group>
								<Code>28</Code>
								<Description>Prepayment --&gt; CreditAdvances</Description>
								<Order>1050</Order>
								<Source Name="Prepayment" Kind="TabularSection"/>
								<Receiver Name="CreditAdvances" Kind="TabularSection"/>
								<BeforeProcessExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeProcessExport>
								<Property>
									<Code>29</Code>
									<Description>Document --&gt; DocumentAdvance</Description>
									<Order>50</Order>
									<Source Name="Document" Kind="Attribute"/>
									<Receiver Name="DocumentAdvance" Kind="Attribute"/>
								</Property>
								<Property>
									<Code>33</Code>
									<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
									<Order>250</Order>
									<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
									<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
								</Property>
							</Group>
						</Properties>
						<Values/>
					</Rule>
					<Rule>
						<Code>JobOrderRequirementSlip</Code>
						<Description>Document: Customer order</Description>
						<Order>150</Order>
						<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Counterparty) Then
		Object.Counterparty = ExchangeNodeForDataImport.Counterparty;
	EndIf;
	
	// Fill in the header attributes
	If Not ValueIsFilled(Object.VATInProductsCost) Then
		Object.VATInProductsCost = Enums.ActionVATInProductsCost.DontChange;
	EndIf;
	
	Object.ForWriteOffVATUseAccountAndCostAccountingAnalyst = True;
	
	If ObjectParameters &lt;&gt; Undefined Then
		ParametersOfTP = ObjectParameters.Get("MaterialsTabularSection");
	EndIf;
	
	// Fill in the Gl accounts in the Materials tabular section
	For Each CurRow IN Object.Materials Do
		
		CurRow.CostsItem = ExchangeNodeForDataImport.CostsItem;
		Object.FillGLAccountsAtRowTabParts(CurRow, "Materials", True);
		
		If ObjectParameters &lt;&gt; Undefined 
		   AND ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined
		   AND ParametersOfTP[CurRow.LineNumber - 1].ProductOnCommission = True Then
			If Not ValueIsFilled(CurRow.Account) Then
				CurRow.Account = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
			EndIf;
		EndIf;
		
		If Not ValueIsFilled(CurRow.GLExpenseAccount) Then
			CurRow.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.MainProduction;
		EndIf;
		
	EndDo;
	
	// Fill in the Gl accounts in the Materials tabular section
	For Each CurRow IN Object.ConsumerMaterials Do
		GLAccounts = AccountingAccounting.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
		If Not ValueIsFilled(CurRow.Account) Then
			CurRow.Account = GLAccounts.TolRawGLAccount;
		EndIf;
		If Not ValueIsFilled(CurRow.TransferAccount) Then
			CurRow.TransferAccount = GLAccounts.AccountTransferOffBal;
		EndIf;
	EndDo;
	
EndIf;</AfterImport>
						<SynchronizeByID>true</SynchronizeByID>
						<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
						<Source>DocumentRef.CustomerOrder</Source>
						<Receiver>DocumentRef.RequestInvoice</Receiver>
						<Properties>
							<Property Search="true">
								<Code>1</Code>
								<Description>Finish --&gt; Date</Description>
								<Order>50</Order>
								<Source Name="Finish" Kind="Attribute" Type="Date"/>
								<Receiver Name="Date" Kind="Property" Type="Date"/>
							</Property>
							<Property>
								<Code>2</Code>
								<Description>Comment --&gt; Comment</Description>
								<Order>100</Order>
								<Source Name="Comment" Kind="Attribute" Type="String"/>
								<Receiver Name="Comment" Kind="Attribute" Type="String"/>
							</Property>
							<Property>
								<Code>3</Code>
								<Description>Counterparty --&gt; Counterparty</Description>
								<Order>150</Order>
								<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property Disable="true" Search="true">
								<Code>4</Code>
								<Description>Number --&gt; Number</Description>
								<Order>200</Order>
								<Source Name="Number" Kind="Property" Type="String"/>
								<Receiver Name="Number" Kind="Property" Type="String"/>
							</Property>
							<Property>
								<Code>5</Code>
								<Description>Company --&gt; Company</Description>
								<Order>250</Order>
								<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<ConversionRuleCode>Companies                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>7</Code>
								<Description>DeletionMark --&gt; DeletionMark</Description>
								<Order>300</Order>
								<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
								<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>8</Code>
								<Description>Posted --&gt; Posted</Description>
								<Order>350</Order>
								<Source Name="Posted" Kind="Property" Type="Boolean"/>
								<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>StructuralUnitReserve --&gt; Warehouse</Description>
								<Order>400</Order>
								<Source Name="StructuralUnitReserve" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
								<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
								<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>SalesStructuralUnit --&gt; DepartmentCost</Description>
								<Order>450</Order>
								<Source Name="SalesStructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
								<Receiver Name="DepartmentCost" Kind="Attribute" Type="CatalogRef.CompaniesDepartments"/>
								<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
							</Property>
							<Property>
								<Code>19</Code>
								<Description> --&gt; GLAccountsCostInTable</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="GLAccountsCostInTable" Kind="Attribute" Type="Boolean"/>
								<BeforeExport>Value = True;</BeforeExport>
							</Property>
							<Group>
								<Code>9</Code>
								<Description>Materials --&gt; Materials</Description>
								<Order>600</Order>
								<Source Name="Materials" Kind="TabularSection"/>
								<Receiver Name="Materials" Kind="TabularSection"/>
								<Property>
									<Code>10</Code>
									<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
									<Order>50</Order>
									<Source Name="MeasurementUnit" Kind="Attribute"/>
									<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
									<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
									<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>11</Code>
									<Description>Count --&gt; PlacesQuantity</Description>
									<Order>100</Order>
									<Source Name="Count" Kind="Attribute" Type="Number"/>
									<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>12</Code>
									<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
									<Order>150</Order>
									<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
								</Property>
								<Property>
									<Code>20</Code>
									<Description> --&gt; Count</Description>
									<Order>200</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Count" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>21</Code>
									<Description> --&gt; Factor</Description>
									<Order>250</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
								</Property>
								<Property>
									<Code>22</Code>
									<Description>Batch --&gt;</Description>
									<Order>300</Order>
									<Source Name="Batch" Kind="Attribute" Type="CatalogRef.ProductsAndServicesBatches"/>
									<Receiver Name="" Kind=""/>
									<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
									<BeforeExport>If ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
								</Property>
								<Property>
									<Code>23</Code>
									<Description> --&gt; ProductsAndServicesCategory</Description>
									<Order>350</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
									<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
									<BeforeExport>Value = CollectionObject.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
								</Property>
								<Property>
									<Code>24</Code>
									<Description> --&gt; DepartmentCost</Description>
									<Order>400</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="DepartmentCost" Kind="Attribute" Type="CatalogRef.CompaniesDepartments"/>
									<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
									<BeforeExport>Value = Source.SalesStructuralUnit;</BeforeExport>
								</Property>
							</Group>
							<Group>
								<Code>13</Code>
								<Description>ConsumerMaterials --&gt; ConsumerMaterials</Description>
								<Order>650</Order>
								<Source Name="ConsumerMaterials" Kind="TabularSection"/>
								<Receiver Name="ConsumerMaterials" Kind="TabularSection"/>
								<Property>
									<Code>14</Code>
									<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
									<Order>50</Order>
									<Source Name="MeasurementUnit" Kind="Attribute"/>
									<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
									<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>15</Code>
									<Description>Count --&gt; PlacesQuantity</Description>
									<Order>100</Order>
									<Source Name="Count" Kind="Attribute" Type="Number"/>
									<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>16</Code>
									<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
									<Order>150</Order>
									<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
								</Property>
								<Property>
									<Code>25</Code>
									<Description> --&gt; Count</Description>
									<Order>200</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Count" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>26</Code>
									<Description> --&gt; Factor</Description>
									<Order>250</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
								</Property>
							</Group>
						</Properties>
						<Values/>
					</Rule>
				</Group>
			</Group>
			<Group>
				<Code>RetailSales</Code>
				<Description>Documents. Retail sales</Description>
				<Order>100</Order>
				<Rule>
					<Code>ReestimationOfProductsInRetail</Code>
					<Description>Document: Revaluation in retail (accrual accounting)</Description>
					<Order>300</Order>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.RetailRevaluation</Source>
					<Receiver>DocumentRef.ReestimationOfProductsInRetail</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>100</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>150</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
							<CastToLength>11</CastToLength>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>200</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>250</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>300</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>350</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Group>
							<Code>8</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>400</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>9</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>NewPrice --&gt; PriceInRetail</Description>
								<Order>150</Order>
								<Source Name="NewPrice" Kind="Attribute" Type="Number"/>
								<Receiver Name="PriceInRetail" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>Amount --&gt; RevaluationAmount</Description>
								<Order>200</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="RevaluationAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>Price --&gt; PriceForRetailOld</Description>
								<Order>250</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="PriceForRetailOld" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>RetailReport</Code>
					<Description>Document: Report O retail sales</Description>
					<Order>300</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	If ObjectParameters &lt;&gt; Undefined Then
		ParametersOfTP = ObjectParameters.Get("ProductsTabularSection");
	EndIf;
	
	// Fill up the Goods tabular section of the document with the default values
	For Each CurRow IN Object.Products Do
		If ObjectParameters &lt;&gt; Undefined 
		   AND ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined
		   AND ParametersOfTP[CurRow.LineNumber - 1].ProductOnCommission = True Then
			CurRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
		EndIf;
	EndDo;
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.RetailReport</Source>
					<Receiver>DocumentRef.RetailReport</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>150</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property Search="true">
							<Code>4</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>350</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>400</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>450</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>InventoryReconciliation --&gt; ProductsAtWarehouseReconciliation</Description>
							<Order>500</Order>
							<Source Name="InventoryReconciliation" Kind="Attribute" Type="DocumentRef.InventoryReconciliation"/>
							<Receiver Name="ProductsAtWarehouseReconciliation" Kind="Attribute" Type="DocumentRef.GoodsAtWarehouseInventoryTaking"/>
							<ConversionRuleCode>ProductsAtWarehouseReconciliation                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>21</Code>
							<Description>VATTaxation --&gt; ConsiderVAT</Description>
							<Order>550</Order>
							<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
							<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
						</Property>
						<Property>
							<Code>23</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>600</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>24</Code>
							<Description>Item --&gt; CashFlowItem</Description>
							<Order>650</Order>
							<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>25</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>700</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>27</Code>
							<Description> --&gt; OperationKind</Description>
							<Order>750</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsRetailReport"/>
							<BeforeExport>Value = ?(Source.CashCR.CashCRType = Enums.CashCRTypes.AutonomousCashRegister, "NTTOSalesReport", "ReportOfKCMOAREASales");</BeforeExport>
						</Property>
						<Property>
							<Code>26</Code>
							<Description> --&gt; PettyCash</Description>
							<Order>800</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="PettyCash" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>NationalCurrency = Constants.NationalCurrency.Get();
Value = ?(Source.DocumentCurrency = NationalCurrency, "50.01", "50.21");</BeforeExport>
						</Property>
						<Group>
							<Code>12</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>850</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>13</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>14</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>150</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>16</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>200</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>250</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>Price --&gt; Price</Description>
								<Order>300</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Batch --&gt;</Description>
								<Order>350</Order>
								<Source Name="Batch" Kind="Attribute" Type="CatalogRef.ProductsAndServicesBatches"/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
								<BeforeExport>If ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>19</Code>
							<Description>PaymentWithPaymentCards --&gt; Payment</Description>
							<Order>900</Order>
							<Source Name="PaymentWithPaymentCards" Kind="TabularSection"/>
							<Receiver Name="Payment" Kind="TabularSection"/>
							<Property>
								<Code>20</Code>
								<Description>Amount --&gt; PaymentAmount</Description>
								<Order>50</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="PaymentAmount" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
			</Group>
			<Group>
				<Code>ProcurementAndPurchasing</Code>
				<Description>Documents. Supply and purchases</Description>
				<Order>150</Order>
				<Rule>
					<Code>ExpenseReport</Code>
					<Description>Document: Expense report</Description>
					<Order>50</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	For Each TabularSectionRow IN Object.Products Do
		Object.FillGLAccountsAtRowTabPartsRegl(TabularSectionRow, "Products", True, True);
	EndDo;
	
	For Each TabularSectionRow IN Object.Other Do
		Object.FillGLAccountsAtRowTabPartsRegl(TabularSectionRow, "Other", True, True);
	EndDo;
	
	For Each StringPayment IN Object.PaymentToVendor Do
		
		GLAccounts = AccountingAccountingCalculationsWithCounterparties.GetAccountsCalculationsWithCounterparty(
			Object.Company,
			StringPayment.Counterparty,
			StringPayment.CounterpartyContract
		);
		
		StringPayment.GlAccountCalculationsOnAdvances = GLAccounts.AccountAdvances;
		
		If StringPayment.CounterpartyContract.ContractKind = Enums.ContractKindsCounterparties.FromPrincipal Then
			StringPayment.GlAccountSettlementsWithCounterparties = GLAccounts.SettlementsAccountWithPrincipal;
		Else
			StringPayment.GlAccountSettlementsWithCounterparties = GLAccounts.AccountCalculations;
		EndIf;
		
	EndDo;
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.ExpenseReport</Source>
					<Receiver>DocumentRef.ExpenseReport</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>4</Code>
							<Description>Number --&gt; Number</Description>
							<Order>150</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Company --&gt; Company</Description>
							<Order>200</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>250</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>300</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>350</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>27</Code>
							<Description>Multiplicity --&gt; MultiplicityOfDocument</Description>
							<Order>400</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MultiplicityOfDocument" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>28</Code>
							<Description>ExchangeRate --&gt; ExchangeRateDocument</Description>
							<Order>450</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="ExchangeRateDocument" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>29</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>500</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>30</Code>
							<Description>Employee --&gt; Ind</Description>
							<Order>550</Order>
							<Source Name="Employee" Kind="Attribute" Type="CatalogRef.Employees"/>
							<Receiver Name="Ind" Kind="Attribute" Type="CatalogRef.Individuals"/>
							<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
							<BeforeExport>Value = Source.Employee.Ind;</BeforeExport>
						</Property>
						<Property>
							<Code>34</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>600</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>36</Code>
							<Description> --&gt; Warehouse</Description>
							<Order>650</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>If Source.Inventory.Count() &gt; 0 Then
	Value = Source.Inventory[0].StructuralUnit;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>51</Code>
							<Description>VATTaxation --&gt; ConsiderVAT</Description>
							<Order>700</Order>
							<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
							<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
						</Property>
						<Property>
							<Code>53</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>750</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>9</Code>
							<Description>AdvancesPaid --&gt; AdvancesPaid</Description>
							<Order>800</Order>
							<Source Name="AdvancesPaid" Kind="TabularSection"/>
							<Receiver Name="AdvancesPaid" Kind="TabularSection"/>
							<Property>
								<Code>10</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>50</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>31</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>100</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>11</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>850</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>13</Code>
								<Description>Count --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>14</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>16</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>Price --&gt; Price</Description>
								<Order>350</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>37</Code>
								<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
								<Order>500</Order>
								<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
								<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>38</Code>
								<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
								<Order>550</Order>
								<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
								<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							</Property>
						</Group>
						<Group>
							<Code>19</Code>
							<Description>Expenses --&gt; Other</Description>
							<Order>900</Order>
							<Source Name="Expenses" Kind="TabularSection"/>
							<Receiver Name="Other" Kind="TabularSection"/>
							<Property>
								<Code>22</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>33</Code>
								<Description>Content --&gt; Content</Description>
								<Order>350</Order>
								<Source Name="Content" Kind="Attribute" Type="String"/>
								<Receiver Name="Content" Kind="Attribute" Type="String"/>
								<BeforeExport>If Not ValueIsFilled(CollectionObject.Content) Then
	Value = CollectionObject.ProductsAndServices.Description;
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>39</Code>
								<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
								<Order>400</Order>
								<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
								<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>40</Code>
								<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
								<Order>450</Order>
								<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
								<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							</Property>
						</Group>
						<Group>
							<Code>41</Code>
							<Description>Payments --&gt; PaymentToVendor</Description>
							<Order>950</Order>
							<Source Name="Payments" Kind="TabularSection"/>
							<Receiver Name="PaymentToVendor" Kind="TabularSection"/>
							<Property>
								<Code>42</Code>
								<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
								<Order>50</Order>
								<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
								<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>43</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>100</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							</Property>
							<Property>
								<Code>44</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>150</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>45</Code>
								<Description>Counterparty --&gt; Counterparty</Description>
								<Order>200</Order>
								<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>46</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>250</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>47</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>300</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>48</Code>
								<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
								<Order>350</Order>
								<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
								<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							</Property>
							<Property>
								<Code>49</Code>
								<Description>PaymentAmount --&gt; Amount</Description>
								<Order>400</Order>
								<Source Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>50</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>450</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>52</Code>
								<Description> --&gt; BackPayMethod</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="BackPayMethod" Kind="Attribute" Type="EnumRef.DebtPaymentMethods"/>
								<BeforeExport>If CollectionObject.AdvanceFlag Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.DoNotRepay";
ElsIf ValueIsFilled(CollectionObject.Document) Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.ByDocument";
Else
	Expression = "Enums.MethodsOfRepaymentOfDebt.automatically";
EndIf;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReceiptOfGoodsAndServices</Code>
					<Description>Document: Receipt Consignment</Description>
					<Order>100</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	ElsIf Not Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.DoNotRead Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	If ObjectParameters &lt;&gt; Undefined Then
		ParametersOfTP = ObjectParameters.Get("ProductsTabularSection");
	EndIf;
	
	// Fill up the Goods tabular section of the document with the default values
	For Each CurRow IN Object.Products Do	
		
		If ObjectParameters &lt;&gt; Undefined 
		   AND ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined
		   AND ParametersOfTP[CurRow.LineNumber - 1].ProductOnCommission = True Then
			CurRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
		EndIf;
		
		DocumentMetadata = Object.Metadata();
		NameTabParts 		= "Products";
		
		//taxation for STS
		If (Object.OperationKind = Enums.OperationKindsFlowOfGoodsAndServices.PurchaseComission 
			AND Object.CounterpartyContract.ContractKind = Enums.ContractKindsCounterparties.FromPrincipal) Then
			If CommonUse.IsAttributeTabPartsDocument("ReflectionInUSN", DocumentMetadata, NameTabParts) Then
				CurRow.ReflectionInUSN = Enums.ReflectionInUSN.NotAccepted;
			EndIf;
		ElsIf Object.OperationKind = Enums.OperationKindsFlowOfGoodsAndServices.InProcessing Then
		Else
			If CommonUse.IsAttributeTabPartsDocument("ReflectionInUSN", DocumentMetadata, NameTabParts) Then
				CurRow.ReflectionInUSN = Enums.ReflectionInUSN.Are Accepted;
			EndIf;
		EndIf;	
		
	EndDo;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.SupplierInvoice</Source>
					<Receiver>DocumentRef.ReceiptOfGoodsAndServices</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>100</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsSupplierInvoice"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsGoodsAndServicesReceipt"/>
							<ConversionRuleCode>OperationKindsFlowOfGoodsAndServices               </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Date --&gt; Date</Description>
							<Order>150</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>450</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>500</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>550</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>600</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>650</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>700</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>31</Code>
							<Description>VATTaxation --&gt; ConsiderVAT</Description>
							<Order>750</Order>
							<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
							<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
						</Property>
						<Property>
							<Code>33</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>800</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>37</Code>
							<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
							<Order>850</Order>
							<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
						</Property>
						<Property>
							<Code>38</Code>
							<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
							<Order>900</Order>
							<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>39</Code>
							<Description>RegisterVendorPrices --&gt; RegisterVendorPrices</Description>
							<Order>950</Order>
							<Source Name="RegisterVendorPrices" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="RegisterVendorPrices" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>43</Code>
							<Description> --&gt; MethodCreditAdvances</Description>
							<Order>1000</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionForCommission
	OR Source.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionIntoProcessing Then
	
	Expression = "Enums.WaysOfOffsettingAdvances.DoNotRead";
	
Else
	
	Expression = ?(Source.Prepayment.Count() &gt; 0, "Enums.WaysOfOffsettingAdvances.ByDocument", "Enums.WaysOfOffsettingAdvances.automatically");
	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>44</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1050</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>16</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>1100</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>17</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Price --&gt; Price</Description>
								<Order>350</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>32</Code>
								<Description> --&gt; Factor</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>34</Code>
								<Description> --&gt; Count</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>35</Code>
								<Description> --&gt;</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
								<BeforeExport>If Source.OperationKind =  Enums.OperationKindsSupplierInvoice.ReceptionForCommission
   AND ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>24</Code>
							<Description>Expenses --&gt; Services</Description>
							<Order>1150</Order>
							<Source Name="Expenses" Kind="TabularSection"/>
							<Receiver Name="Services" Kind="TabularSection"/>
							<Property>
								<Code>25</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>26</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>150</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>200</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>29</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>250</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>30</Code>
								<Description>Price --&gt; Price</Description>
								<Order>300</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>36</Code>
								<Description>Content --&gt; Content</Description>
								<Order>350</Order>
								<Source Name="Content" Kind="Attribute" Type="String"/>
								<Receiver Name="Content" Kind="Attribute" Type="String"/>
							</Property>
						</Group>
						<Group>
							<Code>40</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>1200</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeProcessExport>
							<Property>
								<Code>41</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>42</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>TransferOfProducts</Code>
					<Description>Document: Move inventories</Description>
					<Order>150</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	For Each CurRow IN Object.Products Do
		Object.FillGLAccountsAtRowTabPartsRegl(CurRow, "Products", True);
	EndDo;
	
	// Fill in the GL accounts of settlements
	Execute(Algorithms.FillAccountsGLAccounts);
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.CustomerInvoice</Source>
					<Receiver>DocumentRef.TransferOfProducts</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsCustomerInvoice"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsGoodsTransfer"/>
							<ConversionRuleCode>OperationKindsProductsTransfer                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>4</Code>
							<Description>Number --&gt; Number</Description>
							<Order>150</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Company --&gt; Company</Description>
							<Order>200</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>250</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>300</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>350</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>400</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>450</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>500</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>Consignor --&gt; Consignor</Description>
							<Order>550</Order>
							<Source Name="Consignor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Consignor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>Consignee --&gt; Consignee</Description>
							<Order>600</Order>
							<Source Name="Consignee" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Consignee" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>18</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>650</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>13</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>700</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>14</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>SupplierInvoiceNote</Code>
					<Description>Document: Account-texture (Received)</Description>
					<Order>200</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;
	
	Object.SetOperationKindCode();
	Object.ReceivingMethodCode = 1; //SB does not involve getting CIN in the electronic form
	
	If (Object.InvoiceKind = Enums.ReceivedInvoiceKind.Prepayment
		OR Object.InvoiceKind = Enums.ReceivedInvoiceKind.OnPrincipalAdvance
		OR TypeOf(Object.BasisDocument) = Type("DocumentRef.SalesReportToPrincipal"))
		AND Object.Advances.Count() = 0 Then 
		
		Object.Advances.Add();
	EndIf;
	
	If Not ValueIsFilled(Object.DocumentAmount) Then
		
		If ValueIsFilled(Object.BasisDocument)
			AND CommonUse.RefExists(Object.BasisDocument) Then
			
			CINParameters = Undefined;
			AccountingVAT.GetCustomerInvoiceNoteParameters(
				Object.Ref,
				Constants.CurrencyOfRegulatedAccounting.Get(),
				CINParameters);
			
			FillPropertyValues(Object, CINParameters,
				"DocumentAmount,
				|VATAmountDocument");
			
		EndIf;
		
	EndIf;	
		
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.SupplierInvoiceNote</Source>
					<Receiver>DocumentRef.SupplierInvoiceNote</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
							<Order>150</Order>
							<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>BasisDocument --&gt; BasisDocument</Description>
							<Order>200</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="BasisDocument" Kind="Attribute"/>
							<BeforeExport>If TypeOf(Source.BasisDocument) = Type("DocumentRef.SupplierInvoice") Then		
	If Source.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromCustomer
 	 OR Source.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromAgent Then
		OCRName = "ReturnOfProductsFromCustomer";
	ElsIf Source.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionForCommission
		  OR Source.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionIntoProcessing
		  OR Source.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceiptFromVendor Then
		OCRName = "ReceiptOfGoodsAndServices";
	EndIf;	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>250</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>7</Code>
							<Description>Number --&gt; Number</Description>
							<Order>300</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
							<Order>350</Order>
							<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Company --&gt; Company</Description>
							<Order>400</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>450</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>500</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>550</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>600</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>OperationKind --&gt; InvoiceKind</Description>
							<Order>650</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsSupplierInvoiceNote"/>
							<Receiver Name="InvoiceKind" Kind="Attribute" Type="EnumRef.ReceivedCustomerInvoiceNoteKind"/>
							<ConversionRuleCode>ReceivedInvoiceKind                        </ConversionRuleCode>
						</Property>
						<Property>
							<Code>21</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>700</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>12</Code>
							<Description> --&gt; BasisDocuments</Description>
							<Order>750</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="BasisDocuments" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = New ValueTable;
ObjectsCollection.Columns.Add("BasisDocument");

NewRow = ObjectsCollection.Add();
NewRow.BasisDocument = Source.BasisDocument;</BeforeProcessExport>
							<Property>
								<Code>14</Code>
								<Description> --&gt; BasisDocument</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="BasisDocument" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineNameOfPwcFoundationDocument);</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>17</Code>
							<Description>Inventory --&gt; Advances</Description>
							<Order>800</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Advances" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.OperationKind &lt;&gt; Enums.OperationKindsSupplierInvoiceNote.Advance
	AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.ReportToPrincipal") Then
	Cancel = True;
EndIf;</BeforeProcessExport>
							<Property>
								<Code>18</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>50</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>TotalAmount --&gt; Amount</Description>
								<Order>100</Order>
								<Source Name="TotalAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>150</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Group>
							<Code>24</Code>
							<Description>InvoiceNotesIssuedToCustomers --&gt; InvoiceNotesIssuedToCustomers</Description>
							<Order>850</Order>
							<Source Name="InvoiceNotesIssuedToCustomers" Kind="TabularSection"/>
							<Receiver Name="InvoiceNotesIssuedToCustomers" Kind="TabularSection"/>
							<Property>
								<Code>25</Code>
								<Description>VAT --&gt; VAT</Description>
								<Order>50</Order>
								<Source Name="VAT" Kind="Attribute" Type="Number"/>
								<Receiver Name="VAT" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>26</Code>
								<Description>Customer --&gt; Customer</Description>
								<Order>100</Order>
								<Source Name="Customer" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Customer" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>Subagent --&gt; Subagent</Description>
								<Order>150</Order>
								<Source Name="Subagent" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Subagent" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>200</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>29</Code>
								<Description>CustomerInvoiceNote --&gt; CustomerInvoiceNote</Description>
								<Order>250</Order>
								<Source Name="CustomerInvoiceNote" Kind="Attribute" Type="DocumentRef.CustomerInvoiceNote"/>
								<Receiver Name="CustomerInvoiceNote" Kind="Attribute" Type="DocumentRef.CustomerInvoiceNote"/>
							</Property>
						</Group>
						<Property>
							<Code>22</Code>
							<Description> --&gt; VATBroughtDeductible</Description>
							<Order>900</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATBroughtDeductible" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>If Source.Date &gt;= Date("20120101") Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>23</Code>
							<Description> --&gt; VATAmountDocument</Description>
							<Order>950</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATAmountDocument" Kind="Attribute" Type="Number"/>
							<BeforeExport>Value = Source.Inventory.Total("VATAmount");</BeforeExport>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReturnProductsToSupplier</Code>
					<Description>Document: flow rate Consignment</Description>
					<Order>250</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	If Not ValueIsFilled(Object.IncomeAndExpencesItem) Then
		Object.IncomeAndExpencesItem = Catalogs.OtherIncomeAndExpenses.DifferenceBetweenCostOfReturnAndActualCostOfProducts;
	EndIf;
	
	Object.GlAccountIncome = ChartsOfAccounts.SelfSupporting.OtherIncome;
	Object.GlAccountCosts = ChartsOfAccounts.SelfSupporting.OtherExpenses;
	
	If ObjectParameters &lt;&gt; Undefined Then
		ParametersOfTP = ObjectParameters.Get("ProductsTabularSection");
	EndIf;
	
	// Fill up the Goods tabular section of the document with the default values
	For Each CurRow IN Object.Products Do	
		If ObjectParameters &lt;&gt; Undefined 
		   AND ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined
		   AND ParametersOfTP[CurRow.LineNumber - 1].ProductOnCommission = True Then
			CurRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
		EndIf;
	EndDo;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.CustomerInvoice</Source>
					<Receiver>DocumentRef.ReturnProductsToSupplier</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>100</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsCustomerInvoice"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsReturnGoodsToVendor"/>
							<ConversionRuleCode>OperationKindsReturnProductsVendor              </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Date --&gt; Date</Description>
							<Order>150</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>450</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>500</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>550</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>600</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>650</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>700</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>750</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>26</Code>
							<Description>VATTaxation --&gt; ConsiderVAT</Description>
							<Order>800</Order>
							<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
							<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
						</Property>
						<Property>
							<Code>28</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>850</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>31</Code>
							<Description> --&gt; VendorInvoiceReturnExposing</Description>
							<Order>900</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VendorInvoiceReturnExposing" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = True;</BeforeExport>
						</Property>
						<Property>
							<Code>32</Code>
							<Description>BasisDocument --&gt; Deal</Description>
							<Order>950</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="Deal" Kind="Attribute" Type="DocumentRef.GoodsServicesReceipt"/>
							<ConversionRuleCode>ReceiptOfGoodsAndServices                           </ConversionRuleCode>
						</Property>
						<Property>
							<Code>33</Code>
							<Description>Consignor --&gt; Consignor</Description>
							<Order>1000</Order>
							<Source Name="Consignor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Consignor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>34</Code>
							<Description>Consignee --&gt; Consignee</Description>
							<Order>1050</Order>
							<Source Name="Consignee" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Consignee" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>35</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1100</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>18</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>1150</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>19</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>Price --&gt; Price</Description>
								<Order>350</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>27</Code>
								<Description> --&gt; Factor</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>29</Code>
								<Description> --&gt; Count</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>30</Code>
								<Description> --&gt;</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToPrincipal
   AND ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>SalesReportToPrincipal</Code>
					<Description>Document: Report consignor</Description>
					<Order>300</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
		
	If Object.AccountIncome.ExtDimensionTypes.Count() &gt; 0 Then
		If Object.AccountIncome.ExtDimensionTypes[0].ExtDimensionType.ValueType.ContainsType(TypeOf(Object.ExtDimension)) Then
			//Do not change, the value is appropriate
		Else
			Object.ExtDimension = New(Object.AccountIncome.ExtDimensionTypes[0].ExtDimensionType.ValueType.Types()[0])
		EndIf;
	Else
		Object.ExtDimension = Undefined;
	EndIf;
	
	If TypeOf(Object.ExtDimension) = Type("CatalogRef.ProductsAndServicesCategories") 
	   AND ValueIsFilled(Object.ServiceRewards) 
	   AND ValueIsFilled(Object.ServiceRewards.ProductsAndServicesCategory) Then
		
		Object.ExtDimension = Object.ServiceRewards.ProductsAndServicesCategory;
		
	EndIf;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.ReportToPrincipal</Source>
					<Receiver>DocumentRef.SalesReportToPrincipal</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>350</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>CommissionFeePercent --&gt; CommissionFeePercent</Description>
							<Order>400</Order>
							<Source Name="CommissionFeePercent" Kind="Attribute" Type="Number"/>
							<Receiver Name="CommissionFeePercent" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>BrokerageCalculationMethod --&gt; BrokerageCalculationMethod</Description>
							<Order>450</Order>
							<Source Name="BrokerageCalculationMethod" Kind="Attribute" Type="EnumRef.CommissionFeeCalculationMethods"/>
							<Receiver Name="BrokerageCalculationMethod" Kind="Attribute" Type="EnumRef.CommissionFeeCalculationMethods"/>
							<ConversionRuleCode>CommissionFeeCalculationMethods         </ConversionRuleCode>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>VATCommissionFeePercent --&gt; VATCommissionFeePercent</Description>
							<Order>500</Order>
							<Source Name="VATCommissionFeePercent" Kind="Attribute" Type="CatalogRef.VATRates"/>
							<Receiver Name="VATCommissionFeePercent" Kind="Attribute" Type="EnumRef.VATRates"/>
							<BeforeExport>Execute(Algorithms.FillInVatRateOfRemuneration);</BeforeExport>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>550</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>600</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>650</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>700</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>KeepBackComissionFee --&gt; KeepRemuneration</Description>
							<Order>750</Order>
							<Source Name="KeepBackComissionFee" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="KeepRemuneration" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>30</Code>
							<Description>VATTaxation --&gt; ConsiderVAT</Description>
							<Order>800</Order>
							<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
							<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
						</Property>
						<Property>
							<Code>32</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>850</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>34</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>900</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>18</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>950</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>19</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>BrokerageAmount --&gt; BrokerageAmount</Description>
								<Order>300</Order>
								<Source Name="BrokerageAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="BrokerageAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>350</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>26</Code>
								<Description>BrokerageVATAmount --&gt; BrokerageVATAmount</Description>
								<Order>400</Order>
								<Source Name="BrokerageVATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="BrokerageVATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>AmountReceipt --&gt; AmountReceipt</Description>
								<Order>450</Order>
								<Source Name="AmountReceipt" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountReceipt" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>Price --&gt; Price</Description>
								<Order>500</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>29</Code>
								<Description>ReceiptPrice --&gt; ReceiptPrice</Description>
								<Order>550</Order>
								<Source Name="ReceiptPrice" Kind="Attribute" Type="Number"/>
								<Receiver Name="ReceiptPrice" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>31</Code>
								<Description> --&gt; Factor</Description>
								<Order>600</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>33</Code>
								<Description> --&gt; Count</Description>
								<Order>650</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>35</Code>
								<Description>DateOfSale --&gt; DateOfSale</Description>
								<Order>700</Order>
								<Source Name="DateOfSale" Kind="Attribute" Type="Date"/>
								<Receiver Name="DateOfSale" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>36</Code>
								<Description>Customer --&gt; Customer</Description>
								<Order>750</Order>
								<Source Name="Customer" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Customer" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReceiptOfAdditionalCosts</Code>
					<Description>Document: Additional costs</Description>
					<Order>350</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	Else
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	// Fill in the Gl accounts in the Goods tabular section	
	Object.FillGLAccountsInTabPart(Object.Products, True, True);
	
	// Fill in the GL accounts of settlements
	Execute(Algorithms.FillAccountsGLAccounts);
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.AdditionalCosts</Source>
					<Receiver>DocumentRef.ReceiptOfAdditionalCosts</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>36</Code>
							<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
							<Order>250</Order>
							<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
						</Property>
						<Property>
							<Code>37</Code>
							<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
							<Order>300</Order>
							<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>350</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>400</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>450</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>500</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>550</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>600</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>650</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>700</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>22</Code>
							<Description>VATTaxation --&gt; ConsiderVAT</Description>
							<Order>750</Order>
							<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
							<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
						</Property>
						<Property>
							<Code>27</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>800</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>29</Code>
							<Description> --&gt; VATRate</Description>
							<Order>850</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
							<BeforeExport>If Source.Inventory.Count() &gt; 0 Then	
	If Source.Inventory[0].VATRate.NotTaxable Then
		Expression = "Enums.VATRates.WithoutVAT";	
	ElsIf Source.Inventory[0].VATRate.Rate = 18
		 AND Not Source.Inventory[0].VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT18";
	ElsIf Source.Inventory[0].VATRate.Rate = 18
			AND Source.Inventory[0].VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT18_118";
	ElsIf Source.Inventory[0].VATRate.Rate = 10 
		 AND Not Source.Inventory[0].VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT10";
	ElsIf Source.Inventory[0].VATRate.Rate = 10 
			AND Source.Inventory[0].VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT10_110";
	ElsIf Source.Inventory[0].VATRate.Rate = 0 Then
		Expression = "Enums.VATRates.VAT0"; 
	ElsIf Source.Inventory[0].VATRate.Rate = 20
		 AND Not Source.Inventory[0].VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT20";
	ElsIf Source.Inventory[0].VATRate.Rate = 20
			AND Source.Inventory[0].VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT20_120";
	Else
		Expression = "Enums.VATRates.VAT18";
	EndIf;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>30</Code>
							<Description> --&gt; MethodOfDistribution</Description>
							<Order>900</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodOfDistribution" Kind="Attribute" Type="EnumRef.AddCostsDistributionMethods"/>
							<BeforeExport>Expression = "Enums.WaysDistributionAddCosts.ByAmount";</BeforeExport>
						</Property>
						<Property>
							<Code>34</Code>
							<Description> --&gt; MethodCreditAdvances</Description>
							<Order>950</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>Expression = ?(Source.Prepayment.Count() &gt; 0, "Enums.WaysOfOffsettingAdvances.ByDocument", "Enums.WaysOfOffsettingAdvances.automatically");</BeforeExport>
						</Property>
						<Property>
							<Code>35</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1000</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>14</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>1050</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>17</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>AmountExpense --&gt; Amount</Description>
								<Order>200</Order>
								<Source Name="AmountExpense" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
								<BeforeExport>ConsiderVAT		= Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;
AmountIncludesVAT	= Source.AmountIncludesVAT;

If CollectionObject.VATRate.NotTaxable
	OR CollectionObject.VATRate.Rate = 0 Then
	VATRate = 0;
ElsIf CollectionObject.VATRate.Rate = 18 Then
	VATRate = 18;
ElsIf CollectionObject.VATRate.Rate = 10 Then 
	VATRate = 10;
ElsIf CollectionObject.VATRate.Rate = 20 Then
	VATRate = 20;
Else
	VATRate = 18;
EndIf;

If ConsiderVAT Then
	If AmountIncludesVAT Then
		Amount = CollectionObject.AmountExpense;
	Else
		Amount = 100 * CollectionObject.AmountExpense / (100 + VATRate);
	EndIf;
Else
	Amount = 0;
EndIf;

Value = Amount;</BeforeExport>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>250</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
								<BeforeExport>ConsiderVAT		= Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;
AmountIncludesVAT	= Source.AmountIncludesVAT;

If CollectionObject.VATRate.NotTaxable
	OR CollectionObject.VATRate.Rate = 0 Then
	VATRate = 0;
ElsIf CollectionObject.VATRate.Rate = 18 Then
	VATRate = 18;
ElsIf CollectionObject.VATRate.Rate = 10 Then 
	VATRate = 10;
ElsIf CollectionObject.VATRate.Rate = 20 Then
	VATRate = 20;
Else
	VATRate = 18;
EndIf;

If ConsiderVAT Then 
	VATAmount = CollectionObject.AmountExpense * VATRate / (100 + VATRate);
Else
	VATAmount = 0;
EndIf;

Value = VATAmount;</BeforeExport>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Amount --&gt; ProductAmount</Description>
								<Order>350</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="ProductAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>ReceiptDocument --&gt; DocumentBatch</Description>
								<Order>400</Order>
								<Source Name="ReceiptDocument" Kind="Attribute"/>
								<Receiver Name="DocumentBatch" Kind="Attribute"/>
								<BeforeExport>If TypeOf(CollectionObject.ReceiptDocument) = Type("DocumentRef.SupplierInvoice") Then
	
	OCRName = "ReceiptOfGoodsAndServices";
	
ElsIf TypeOf(CollectionObject.ReceiptDocument) = Type("DocumentRef.ExpenseReport") Then
	
	OCRName = "ExpenseReport";
	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>Count --&gt; Count</Description>
								<Order>450</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>31</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>1100</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeProcessExport>
							<Property>
								<Code>32</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>33</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReceiptOfProcessing</Code>
					<Description>Document: Report processer</Description>
					<Order>400</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	Else
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	If Not ValueIsFilled(Object.Warehouse) Then
		Object.Warehouse = ExchangeNodeForDataImport.Warehouse;
	EndIf;
		
	If Not ValueIsFilled(Object.DepartmentCost)
		  AND ValueIsFilled(ExchangeNodeForDataImport.Department)
		  AND ExchangeNodeForDataImport.Department.Owner = Object.Company Then
		Object.DepartmentCost = ExchangeNodeForDataImport.Department;
	EndIf;
	
	// Fill in GL account of expenses
	If Not ValueIsFilled(Object.GLExpenseAccount) Then
		Object.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.MainProduction;
	EndIf;
	
	// Fill in the GL accounts of the counterparties settlements.
	GLAccounts = AccountingAccountingCalculationsWithCounterparties.GetAccountsCalculationsWithCounterparty(Object.Company, Object.Counterparty, Object.CounterpartyContract);
	If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
		Object.GlAccountSettlementsWithCounterparties = GLAccounts.AccountCalculations;
	EndIf;
	If Not ValueIsFilled(Object.GlAccountCalculationsOnAdvances) Then
		Object.GlAccountCalculationsOnAdvances = GLAccounts.AccountAdvances;
	EndIf;
	If Not ValueIsFilled(Object.SettlementsGLAccountByTare) Then
		Object.SettlementsGLAccountByTare = GLAccounts.GlAccountPackaging;
	EndIf;
	
	// Fill in the required attributes in the Services tabular section 
	For Each CurRow IN Object.Services Do
		GLAccounts = AccountingAccounting.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
		If Not ValueIsFilled (CurRow.GlAccountVAT) Then
			CurRow.GlAccountVAT = GLAccounts.GlAccountVAT;
		EndIf;
		If Not ValueIsFilled(CurRow.ReflectionInUSN) Then
			CurRow.ReflectionInUSN = Enums.ReflectionInUSN.Are Accepted;
		EndIf;
		If Not ValueIsFilled(CurRow.CostsItem) Then
			CurRow.CostsItem = CurRow.ProductsAndServices.CostsItem;
		EndIf;
		If Not ValueIsFilled(CurRow.CostsItem) Then
			CurRow.CostsItem = ExchangeNodeForDataImport.CostsItem;
		EndIf;
	EndDo;
	
	// Fill in accounts and required attributes in the Return materials tabular section
	For Each CurRow IN Object.UsedMaterials Do
		GLAccounts = AccountingAccounting.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
		CurRow.GLAccount = GLAccounts.TransferAccount;
		CurRow.ReflectionInUSN = Enums.ReflectionInUSN.Are Accepted;
		CurRow.CostsItem = CurRow.ProductsAndServices.CostsItem;
	EndDo;
	
	// Fill in accounts and required attributes in the Return materials tabular section
	For Each CurRow IN Object.ReturnedMaterials Do
		GLAccounts = AccountingAccounting.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
		CurRow.GLAccount = GLAccounts.TransferAccount;
		CurRow.TransferAccount = GLAccounts.GLAccount;
	EndDo;
	
	// Fill in accounts in the Products tabular section
	For Each CurRow IN Object.Products Do
		
		If Not ObjectFound Then
		
			GLAccounts = AccountingAccounting.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
			CurRow.Account = GLAccounts.GLAccount;
		
			If Not ValueIsFilled(CurRow.Specification) Then
				CurRow.Specification = OfficeProduction.DefineDefaultSpecification(CurRow.ProductsAndServices, Object.Date);
			EndIf;
			
		EndIf;
			
		// Fill in the planned amount in the Products tabular section
		If Not ValueIsFilled(CurRow.PlannedCost) Then    
			PricesTypePlannedPrimecost = Parameters.PricesTypePlannedPrimecost;
			CurrencyOfRegulatedAccounting = Parameters.CurrencyOfRegulatedAccounting;
			CurRow.PlannedCost = Pricing.GetProductsAndServicesPrice(
				CurRow.ProductsAndServices,
				PricesTypePlannedPrimecost,
				Object.Date,
				CurrencyOfRegulatedAccounting,
				1
			);
			DataProcessorTabularSections.RecalculatePlannedSUM(CurRow);
		EndIf;
			
	EndDo;
	
	// Fill in the Content attribute of the Services tabular section
	Execute(Algorithms.FillContentTablePartsServices);
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.SubcontractorReport</Source>
					<Receiver>DocumentRef.ReceiptOfProcessing</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>350</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>400</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>450</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>500</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>550</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>600</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>650</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>700</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>If Source.StructuralUnit.StructuralUnitType &lt;&gt; Enums.StructuralUnitsTypes.Warehouse Then
	Value = "";
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>23</Code>
							<Description>StructuralUnit --&gt; DepartmentCost</Description>
							<Order>750</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="DepartmentCost" Kind="Attribute" Type="CatalogRef.CompaniesDepartments"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
							<BeforeExport>If Source.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Warehouse Then
	Value = "";
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>24</Code>
							<Description>VATTaxation --&gt; ConsiderVAT</Description>
							<Order>800</Order>
							<Source Name="VATTaxation" Kind="Attribute" Type="EnumRef.VATTaxationTypes"/>
							<Receiver Name="ConsiderVAT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;</BeforeExport>
						</Property>
						<Property>
							<Code>25</Code>
							<Description>Amount --&gt; DocumentAmount</Description>
							<Order>850</Order>
							<Source Name="Amount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>26</Code>
							<Description> --&gt; ProductsAndServicesCategory</Description>
							<Order>900</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
							<BeforeExport>Value = Source.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
						</Property>
						<Property>
							<Code>39</Code>
							<Description> --&gt; MethodCreditAdvances</Description>
							<Order>950</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>Expression = ?(Source.Prepayment.Count() &gt; 0, "Enums.WaysOfOffsettingAdvances.ByDocument", "Enums.WaysOfOffsettingAdvances.automatically");</BeforeExport>
						</Property>
						<Property>
							<Code>54</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1400</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>16</Code>
							<Description> --&gt; Products</Description>
							<Order>1450</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = New ValueTable;
ObjectsCollection.Columns.Add("ProductsAndServices");
ObjectsCollection.Columns.Add("Count");
ObjectsCollection.Columns.Add("Specification");
ObjectsCollection.Columns.Add("MeasurementUnit");

NewRow = ObjectsCollection.Add();
NewRow.ProductsAndServices = Source.ProductsAndServices;
NewRow.Count = Source.Count;
NewRow.Specification = Source.Specification;
NewRow.MeasurementUnit = Source.MeasurementUnit;</BeforeProcessExport>
							<Property>
								<Code>17</Code>
								<Description> --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>18</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>19</Code>
								<Description> --&gt; Specification</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Specification" Kind="Attribute" Type="CatalogRef.ProductsAndServicesSpecifications"/>
								<ConversionRuleCode>SpecificationsProductsAndServices                          </ConversionRuleCode>
							</Property>
						</Group>
						<Group>
							<Code>29</Code>
							<Description> --&gt; Services</Description>
							<Order>1500</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Services" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = New ValueTable;
ObjectsCollection.Columns.Add("ProductsAndServices");
ObjectsCollection.Columns.Add("Amount");
ObjectsCollection.Columns.Add("VATAmount");
ObjectsCollection.Columns.Add("VATRate");
ObjectsCollection.Columns.Add("Count");
ObjectsCollection.Columns.Add("Price");

//Expenses are filled in if the amount is specified
If (Source.Amount &gt; 0) Then 
	
	NewRow 				= ObjectsCollection.Add();
	
	NewRow.ProductsAndServices	= Source.Expense;
	NewRow.Amount			= Source.Amount;
	NewRow.VATAmount		= Source.VATAmount;
	NewRow.VATRate		= Source.VATRate;
	NewRow.Count		= 1;
	NewRow.Price			= Source.Amount;
	
EndIf;</BeforeProcessExport>
							<Property>
								<Code>30</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>31</Code>
								<Description> --&gt; Amount</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>32</Code>
								<Description> --&gt; VATAmount</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>33</Code>
								<Description> --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>34</Code>
								<Description> --&gt; Price</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>35</Code>
								<Description> --&gt; Count</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Group>
							<Code>36</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>1550</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeProcessExport>
							<Property>
								<Code>37</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>38</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Group>
							<Code>40</Code>
							<Description>Inventory --&gt; UsedMaterials</Description>
							<Order>1600</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="UsedMaterials" Kind="TabularSection"/>
							<Property>
								<Code>41</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>42</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
						</Group>
						<Group>
							<Code>43</Code>
							<Description>Disposals --&gt; ReturnedMaterials</Description>
							<Order>1650</Order>
							<Source Name="Disposals" Kind="TabularSection"/>
							<Receiver Name="ReturnedMaterials" Kind="TabularSection"/>
							<Property>
								<Code>44</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>45</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
			</Group>
			<Group>
				<Code>AccountingInventory</Code>
				<Description>Documents. accounting inventories</Description>
				<Order>200</Order>
				<Rule>
					<Code>ProductsAtWarehouseReconciliation</Code>
					<Description>Document: InventoryProcess inventories</Description>
					<Order>50</Order>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryReconciliation</Source>
					<Receiver>DocumentRef.ProductsAtWarehouseReconciliation</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>250</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>300</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group Disable="true">
							<Code>7</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>350</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property Disable="true">
								<Code>10</Code>
								<Description>QuantityAccounting --&gt; QuantityAccounting</Description>
								<Order>150</Order>
								<Source Name="QuantityAccounting" Kind="Attribute" Type="Number"/>
								<Receiver Name="QuantityAccounting" Kind="Attribute" Type="Number"/>
								<BeforeExport>If TypeOf(CollectionObject.MeasurementUnit) = Type("CatalogRef.UOM")
   AND CollectionObject.MeasurementUnit.Factor &gt; 0 Then
	Value = CollectionObject.QuantityAccounting * CollectionObject.MeasurementUnit.Factor;
Else
	Value = CollectionObject.QuantityAccounting;
EndIf;</BeforeExport>
							</Property>
							<Property Disable="true">
								<Code>11</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>200</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property Disable="true">
								<Code>12</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property Disable="true">
								<Code>13</Code>
								<Description>AmountAccounting --&gt; AmountAccounting</Description>
								<Order>300</Order>
								<Source Name="AmountAccounting" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountAccounting" Kind="Attribute" Type="Number"/>
							</Property>
							<Property Disable="true">
								<Code>14</Code>
								<Description>Price --&gt; Price</Description>
								<Order>350</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
							</Property>
							<Property Disable="true">
								<Code>16</Code>
								<Description>Count --&gt; Count</Description>
								<Order>450</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>18</Code>
							<Description> --&gt; Products</Description>
							<Order>400</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>
Query = New Query();
Query.SetParameter("Ref", Source.Ref);
Query.SetParameter("Date", Source.Date);
Query.SetParameter("ReferenceCurrency", Constants.NationalCurrency.Get());
Query.SetParameter("SimpCurrency", Constants.AccountingCurrency.Get());

Query.Text = "SELECT
               |	InventoryReconciliationInventory.ProductsAndServices AS ProductsAndServices,
               |	InventoryReconciliationInventory.ProductsAndServices.MeasurementUnit AS MeasurementUnit,
               |	CASE
               |		WHEN VALUETYPE(InventoryReconciliationInventory.MeasurementUnit) = Type(Catalog.UOM)
               |				AND InventoryReconciliationInventory.MeasurementUnit.Factor &gt; 0
               |			THEN InventoryReconciliationInventory.Count * InventoryReconciliationInventory.MeasurementUnit.Factor
               |		ELSE InventoryReconciliationInventory.Count
               |	END AS Count,
               |	CASE
               |		WHEN VALUETYPE(InventoryReconciliationInventory.MeasurementUnit) = Type(Catalog.UOM)
               |				AND InventoryReconciliationInventory.MeasurementUnit.Factor &gt; 0
               |			THEN InventoryReconciliationInventory.QuantityAccounting * InventoryReconciliationInventory.MeasurementUnit.Factor
               |		ELSE InventoryReconciliationInventory.QuantityAccounting
               |	END AS QuantityAccounting,
               |	InventoryReconciliationInventory.Amount * CASE
               |		WHEN &amp;ReferenceCurrency &lt;&gt; &amp;SimpCurrency
               |			THEN CASE
               |					WHEN ISNULL(CurrencyRatesPrices.Multiplicity, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesPrices.ExchangeRate, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesCurrencies.Multiplicity, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesCurrencies.ExchangeRate, 0) &gt; 0
               |						THEN CurrencyRatesPrices.ExchangeRate * CurrencyRatesCurrencies.Multiplicity / (CurrencyRatesCurrencies.ExchangeRate * CurrencyRatesPrices.Multiplicity)
               |					ELSE 0
               |				END
               |		ELSE 1
        END / CASE
        	WHEN InventoryReconciliationInventory.Count = 0 THEN 1
        	WHEN VALUETYPE(InventoryReconciliationInventory.MeasurementUnit) = Type(Catalog.UOM)
        			AND InventoryReconciliationInventory.MeasurementUnit.Factor &gt; 0
        		THEN InventoryReconciliationInventory.Count * InventoryReconciliationInventory.MeasurementUnit.Factor
        	ELSE InventoryReconciliationInventory.Count
        END AS Price,
               |	InventoryReconciliationInventory.Amount * CASE
               |		WHEN &amp;ReferenceCurrency &lt;&gt; &amp;SimpCurrency
               |			THEN CASE
               |					WHEN ISNULL(CurrencyRatesPrices.Multiplicity, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesPrices.ExchangeRate, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesCurrencies.Multiplicity, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesCurrencies.ExchangeRate, 0) &gt; 0
               |						THEN CurrencyRatesPrices.ExchangeRate * CurrencyRatesCurrencies.Multiplicity / (CurrencyRatesCurrencies.ExchangeRate * CurrencyRatesPrices.Multiplicity)
               |					ELSE 0
               |				END
               |		ELSE 1
               |	END AS Amount,
               |	InventoryReconciliationInventory.AmountAccounting * CASE
               |		WHEN &amp;ReferenceCurrency &lt;&gt; &amp;SimpCurrency
               |			THEN CASE
               |					WHEN ISNULL(CurrencyRatesPrices.Multiplicity, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesPrices.ExchangeRate, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesCurrencies.Multiplicity, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesCurrencies.ExchangeRate, 0) &gt; 0
               |						THEN CurrencyRatesPrices.ExchangeRate * CurrencyRatesCurrencies.Multiplicity / (CurrencyRatesCurrencies.ExchangeRate * CurrencyRatesPrices.Multiplicity)
               |					ELSE 0
               |				END
               |		ELSE 1
               |	END AS AmountAccounting
               |FROM
               |	Document.InventoryReconciliation.Inventory AS InventoryReconciliationInventory
               |		LEFT JOIN InformationRegister.CurrencyRates.SliceLast(&amp;Date, Currency = &amp;SimpCurrency) AS CurrencyRatesPrices
               |		BY (TRUE)
               |		LEFT JOIN InformationRegister.CurrencyRates.SliceLast(&amp;Date, Currency = &amp;ReferenceCurrency) AS CurrencyRatesCurrencies
               |		BY (TRUE)
               |WHERE
                       |	InventoryReconciliationInventory.Ref = &amp;Refs";
				
ObjectsCollection = Query.Execute().Unload();</BeforeProcessExport>
							<Property>
								<Code>19</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>20</Code>
								<Description> --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description> --&gt; QuantityAccounting</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="QuantityAccounting" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>22</Code>
								<Description> --&gt; Price</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description> --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description> --&gt; AmountAccounting</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="AmountAccounting" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ProductsPosting</Code>
					<Description>Document: Posting inventories</Description>
					<Order>100</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	If Not ValueIsFilled(Object.OtherIncomeCostsItem) Then
		Object.OtherIncomeCostsItem = ExchangeNodeForDataImport.OtherIncomeCostsItem;
	EndIf;
	
	If Not ValueIsFilled(Object.Warehouse) Then
		Object.Warehouse = ExchangeNodeForDataImport.Warehouse;
	EndIf;
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryReceipt</Source>
					<Receiver>DocumentRef.ProductsPosting</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>300</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>BasisDocument --&gt; ProductsAtWarehouseReconciliation</Description>
							<Order>350</Order>
							<Source Name="BasisDocument" Kind="Attribute" Type="DocumentRef.InventoryReconciliation"/>
							<Receiver Name="ProductsAtWarehouseReconciliation" Kind="Attribute" Type="DocumentRef.GoodsAtWarehouseInventoryTaking"/>
							<ConversionRuleCode>ProductsAtWarehouseReconciliation                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>400</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>19</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>450</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group Disable="true">
							<Code>9</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>500</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property Disable="true">
								<Code>10</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property Disable="true">
								<Code>11</Code>
								<Description>Count --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property Disable="true">
								<Code>12</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property Disable="true">
								<Code>13</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>200</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property Disable="true">
								<Code>14</Code>
								<Description>Price --&gt; Price</Description>
								<Order>250</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
							</Property>
							<Property Disable="true">
								<Code>16</Code>
								<Description> --&gt; Factor</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property Disable="true">
								<Code>18</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>350</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Group>
							<Code>20</Code>
							<Description> --&gt; Products</Description>
							<Order>550</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>Query = New Query();
Query.SetParameter("Ref", Source.Ref);
Query.SetParameter("Date", Source.Date);
Query.SetParameter("ReferenceCurrency", Constants.NationalCurrency.Get());
Query.SetParameter("SimpCurrency", Constants.AccountingCurrency.Get());

Query.Text = "SELECT
				|	InventoryReceiptInventory.ProductsAndServices,
				|	InventoryReceiptInventory.ProductsAndServices.MeasurementUnit AS MeasurementUnit,
				|	1 AS Factor,
				|	CASE
				|		WHEN VALUETYPE(InventoryReceiptInventory.MeasurementUnit) = Type(Catalog.UOM)
				|				AND InventoryReceiptInventory.MeasurementUnit.Factor &gt; 0
				|			THEN InventoryReceiptInventory.Count * InventoryReceiptInventory.MeasurementUnit.Factor
				|		ELSE InventoryReceiptInventory.Count
				|	END AS Count,
				|	InventoryReceiptInventory.Amount * CASE
				|		WHEN &amp;ReferenceCurrency &lt;&gt; &amp;SimpCurrency
				|			THEN CASE
				|					WHEN ISNULL(CurrencyRatesPrices.Multiplicity, 0) &gt; 0
				|							AND ISNULL(CurrencyRatesPrices.ExchangeRate, 0) &gt; 0
				|							AND ISNULL(CurrencyRatesCurrencies.Multiplicity, 0) &gt; 0
				|							AND ISNULL(CurrencyRatesCurrencies.ExchangeRate, 0) &gt; 0
				|						THEN CurrencyRatesPrices.ExchangeRate * CurrencyRatesCurrencies.Multiplicity / (CurrencyRatesCurrencies.ExchangeRate * CurrencyRatesPrices.Multiplicity)
				|					ELSE 0
				|				END
				|		ELSE 1
				|	END / CASE
				|		WHEN InventoryReceiptInventory.Count = 0 THEN 1
				|		WHEN VALUETYPE(InventoryReceiptInventory.MeasurementUnit) = Type(Catalog.UOM)
				|				AND InventoryReceiptInventory.MeasurementUnit.Factor &gt; 0
				|			THEN InventoryReceiptInventory.Count * InventoryReceiptInventory.MeasurementUnit.Factor
				|		ELSE InventoryReceiptInventory.Count
				|	END AS Price,
				|	InventoryReceiptInventory.Amount * CASE
				|		WHEN &amp;ReferenceCurrency &lt;&gt; &amp;SimpCurrency
				|			THEN CASE
				|					WHEN ISNULL(CurrencyRatesPrices.Multiplicity, 0) &gt; 0
				|							AND ISNULL(CurrencyRatesPrices.ExchangeRate, 0) &gt; 0
				|							AND ISNULL(CurrencyRatesCurrencies.Multiplicity, 0) &gt; 0
				|							AND ISNULL(CurrencyRatesCurrencies.ExchangeRate, 0) &gt; 0
				|						THEN CurrencyRatesPrices.ExchangeRate * CurrencyRatesCurrencies.Multiplicity / (CurrencyRatesCurrencies.ExchangeRate * CurrencyRatesPrices.Multiplicity)
				|					ELSE 0
				|				END
				|		ELSE 1
				|	END AS Amount
				|FROM
				|	Document.InventoryReceipt.Inventory AS InventoryReceiptInventory
				|		LEFT JOIN InformationRegister.CurrencyRates.SliceLast(&amp;Date, Currency = &amp;SimpCurrency) AS CurrencyRatesPrices
				|		BY (TRUE)
				|		LEFT JOIN InformationRegister.CurrencyRates.SliceLast(&amp;Date, Currency = &amp;ReferenceCurrency) AS CurrencyRatesCurrencies
				|		BY (TRUE)
				|WHERE
				|	InventoryReceiptInventory.Ref = &amp;Refs";
				
ObjectsCollection = Query.Execute().Unload();</BeforeProcessExport>
							<Property>
								<Code>21</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>22</Code>
								<Description> --&gt; MeasurementUnit</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>23</Code>
								<Description> --&gt; Count</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description> --&gt; Factor</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description> --&gt; Price</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>26</Code>
								<Description> --&gt; Amount</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ProductsWriteOff</Code>
					<Description>Document: WriteOff inventories</Description>
					<Order>150</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	// Fill in CCD numbers and country of origin in the Goods tabular section
	Execute(Algorithms.FillNumberOfCCDAndCountriesOfOrigin);
	
	// Fill in the attribute of the DocumentAmount header for showing in logs
	Object.DocumentAmount = Object.Products.Total("Amount");
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryWriteOff</Source>
					<Receiver>DocumentRef.ProductsWriteOff</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>BasisDocument --&gt; ProductsAtWarehouseReconciliation</Description>
							<Order>300</Order>
							<Source Name="BasisDocument" Kind="Attribute" Type="DocumentRef.InventoryReconciliation"/>
							<Receiver Name="ProductsAtWarehouseReconciliation" Kind="Attribute" Type="DocumentRef.GoodsAtWarehouseInventoryTaking"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>350</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>13</Code>
							<Description> --&gt; OperationKind</Description>
							<Order>400</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsGoodsWriteOff"/>
							<BeforeExport>Expression = "Enums.OperationKindsProductsWriteOff.ProductsFinishedProducts";</BeforeExport>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>450</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>9</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>500</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>10</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>14</Code>
								<Description> --&gt; Factor</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>Count --&gt; Count</Description>
								<Order>250</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ProductTransfer</Code>
					<Description>Document: Move inventories</Description>
					<Order>200</Order>
					<BeforeExport>TableProducts = Source.Inventory.UnloadColumns("ProductsAndServices,Count,MeasurementUnit");
TableProductsOnCommission = TableProducts.Copy();

For Each CurRow IN Source.Inventory Do
	If CurRow.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
		NewRow = TableProductsOnCommission.Add();
	Else
		NewRow = TableProducts.Add();
	EndIf;
	FillPropertyValues(NewRow, CurRow);
EndDo;

IncomingData = New Structure();
IncomingData.Insert("Products", TableProducts);
IncomingData.Insert("ProductsOnCommission", TableProductsOnCommission);</BeforeExport>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	// Fill in Gl accounts in the Goods tabular section on commission
	For Each TSRow IN Object.ProductsOnCommission Do
		TSRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
		TSRow.NewGlAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
	EndDo;
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryTransfer</Source>
					<Receiver>DocumentRef.ProductTransfer</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.InventoryTransferOperationKinds"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsGoodsTransfer"/>
							<ConversionRuleCode>OperationKindsMoveProducts                    </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>4</Code>
							<Description>Number --&gt; Number</Description>
							<Order>150</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Company --&gt; Company</Description>
							<Order>200</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>250</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>300</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>StructuralUnit --&gt; SourceWarehouse</Description>
							<Order>350</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="SourceWarehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>StructuralUnitPayee --&gt; WarehouseRecipient</Description>
							<Order>400</Order>
							<Source Name="StructuralUnitPayee" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="WarehouseRecipient" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>23</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>450</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>24</Code>
							<Description> --&gt; VATInProductsCost</Description>
							<Order>500</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATInProductsCost" Kind="Attribute" Type="EnumRef.ActionVATInProductsCost"/>
							<BeforeExport>Expression = "Enums.ActionVATInProductsCost.DontChange";</BeforeExport>
						</Property>
						<Group>
							<Code>10</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>550</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = IncomingData.Products;</BeforeProcessExport>
							<Property>
								<Code>11</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>16</Code>
								<Description> --&gt; Factor</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Count --&gt; Count</Description>
								<Order>250</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>15</Code>
							<Description>Inventory --&gt; ProductsOnCommission</Description>
							<Order>600</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="ProductsOnCommission" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = IncomingData.ProductsOnCommission;</BeforeProcessExport>
							<Property>
								<Code>17</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>19</Code>
								<Description> --&gt; Factor</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>200</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Count --&gt; Count</Description>
								<Order>250</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
			</Group>
			<Group>
				<Code>CashAssets</Code>
				<Description>Documents. Cash tools</Description>
				<Order>250</Order>
				<Rule>
					<Code>ReceiptOnBankAccount</Code>
					<Description>Document: Receipt on account</Description>
					<Order>50</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;
	
	// Filling counterparty.
	If (Object.OperationKind = Enums.OperationKindsOfCashReceipt.OtherReceipt
		OR Object.OperationKind = Enums.OperationKindsOfCashReceipt.PurchaseOfForeignCurrencies)
	   AND Not ValueIsFilled(Object.Counterparty) Then
		Object.Counterparty = ExchangeNodeForDataImport.Counterparty;
	EndIf;
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	If Object.PaymentDetails.Count() = 0 Then
		StringPayment = Object.PaymentDetails.Add();
		StringPayment.PaymentAmount = Object.DocumentAmount;
	EndIf;
	
	For Each CurRow IN Object.PaymentDetails Do 
		
		CurRow.CashFlowItem = Object.CashFlowItem;
		
		// Fill in the contract.
		If (Object.OperationKind = Enums.OperationKindsOfCashReceipt.PurchaseOfForeignCurrencies)
		   AND Not ValueIsFilled(CurRow.CounterpartyContract) Then
			CurRow.CounterpartyContract = Object.Counterparty.CounterpartyMainContract;
		EndIf;
		
	EndDo;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.PaymentReceipt</Source>
					<Receiver>DocumentRef.ReceiptOnBankAccount</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationsKindsReceipt"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.CashOperationsKinds"/>
							<ConversionRuleCode>OperationKindsReceiptOfNonCashCashValues     </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
							<Order>150</Order>
							<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>450</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>BankAccount --&gt; AccountOfCompany</Description>
							<Order>500</Order>
							<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="AccountOfCompany" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>CashCurrency --&gt; DocumentCurrency</Description>
							<Order>550</Order>
							<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>18</Code>
							<Description>Item --&gt; CashFlowItem</Description>
							<Order>600</Order>
							<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>20</Code>
							<Description> --&gt; AccountBank</Description>
							<Order>650</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="AccountBank" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>If Source.CashCurrency = Constants.NationalCurrency.Get() Then
	Value = "51";
Else
	Value = "52";
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>26</Code>
							<Description>BasisDocument --&gt; BasisDocument</Description>
							<Order>700</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="BasisDocument" Kind="Attribute"/>
						</Property>
						<Property>
							<Code>27</Code>
							<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
							<Order>750</Order>
							<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>29</Code>
							<Description>PaymentDestination --&gt; PaymentDestination</Description>
							<Order>800</Order>
							<Source Name="PaymentDestination" Kind="Attribute" Type="String"/>
							<Receiver Name="PaymentDestination" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>30</Code>
							<Description>CounterpartyAccount --&gt; CounterpartyAccount</Description>
							<Order>850</Order>
							<Source Name="CounterpartyAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="CounterpartyAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
						</Property>
						<Property>
							<Code>33</Code>
							<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
							<Order>900</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>
If Source.OperationKind = Enums.OperationKindsPaymentReceipt.CurrencyPurchase
	OR Source.OperationKind = Enums.OperationKindsPaymentReceipt.Other Then
	
	Value = Source.Item.CorrespondingAccount;
Else
	Value = "";	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>31</Code>
							<Description> --&gt; ExchangeRateToAcquisitionRealizationDateOfCurrencies</Description>
							<Order>950</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="ExchangeRateToAcquisitionRealizationDateOfCurrencies" Kind="Attribute" Type="Number"/>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsPaymentReceipt.CurrencyPurchase Then
	
	StructureByCurrency = InformationRegisters.CurrencyRates.GetLast(Source.Date, New Structure("Currency", Source.CashCurrency));
	
	ExchangeRate = ?(
		StructureByCurrency.ExchangeRate = 0,
		1,
		StructureByCurrency.ExchangeRate
	);
	
	Value = ExchangeRate;
	
Else
	
	Value = 1;
	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>32</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1000</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>11</Code>
							<Description>PaymentDetails --&gt; PaymentDetails</Description>
							<Order>1050</Order>
							<Source Name="PaymentDetails" Kind="TabularSection"/>
							<Receiver Name="PaymentDetails" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.OperationKind = Enums.OperationKindsPaymentReceipt.CurrencyPurchase Then
	
	TableExplanationOfPayment = Source.PaymentDetails.UnloadColumns();
	
	NewRow = TableExplanationOfPayment.Add();
	
	If Constants.AccountingCurrency.Get() = Constants.NationalCurrency.Get() Then
		
		NewRow.ExchangeRate = Source.ExchangeRate;
		NewRow.Multiplicity = Source.Multiplicity;
		NewRow.SettlementsAmount = Source.DocumentAmount;
		
	Else
		
		StructureByCurrency = InformationRegisters.CurrencyRates.GetLast(Source.Date, New Structure("Currency", Source.CashCurrency));
		
		ExchangeRate = ?(
			StructureByCurrency.ExchangeRate = 0,
			1,
			StructureByCurrency.ExchangeRate
		);
		
		Multiplicity = ?(
			StructureByCurrency.ExchangeRate = 0,
			1,
			StructureByCurrency.Multiplicity
		);
		
		NewRow.ExchangeRate = ExchangeRate;
		NewRow.Multiplicity = Multiplicity;
		
		NewRow.SettlementsAmount = SmallBusinessServer.RecalculateFromCurrencyToCurrency(
			Source.DocumentAmount,
			ExchangeRate,
			1,
			Multiplicity,
			1
		);
		
	EndIf;
	
	ObjectsCollection = TableExplanationOfPayment;
	
EndIf;</BeforeProcessExport>
							<Property>
								<Code>12</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>50</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>100</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>14</Code>
								<Description>PaymentAmount --&gt; PaymentAmount</Description>
								<Order>150</Order>
								<Source Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="PaymentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>InvoiceForPayment --&gt; InvoiceForPayment</Description>
								<Order>200</Order>
								<Source Name="InvoiceForPayment" Kind="Attribute"/>
								<Receiver Name="InvoiceForPayment" Kind="Attribute" Type="DocumentRef.QuotationToCustomer"/>
								<ConversionRuleCode>InvoiceForPayment                            </ConversionRuleCode>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>250</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsPaymentReceipt.FromCustomer
	OR Source.OperationKind = Enums.OperationKindsPaymentReceipt.FromVendor Then
	
	Execute(Algorithms.BuildingStructureOfContractCounterparty);
	
Else
	
	Empty = True;
	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>300</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>350</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>400</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>450</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>28</Code>
								<Description> --&gt; BackPayMethod</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="BackPayMethod" Kind="Attribute" Type="EnumRef.DebtPaymentMethods"/>
								<BeforeExport>If CollectionObject.AdvanceFlag Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.DoNotRepay";
ElsIf ValueIsFilled(CollectionObject.Document) Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.ByDocument";
Else
	Expression = "Enums.MethodsOfRepaymentOfDebt.automatically";
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>34</Code>
								<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
								<Order>550</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
								<BeforeExport>
If Source.OperationKind = Enums.OperationKindsPaymentReceipt.CurrencyPurchase
	OR Source.OperationKind = Enums.OperationKindsPaymentReceipt.Other Then
	
	Value = Source.Item.CorrespondingAccount;
Else
	Value = "";	
EndIf;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>WriteOffFromCurrentAccount</Code>
					<Description>Document: Expense with account</Description>
					<Order>100</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;
	
	// Filling counterparty.
	If (Object.OperationKind = Enums.OperationCashWithdrawalOfKinds.OtherWriteOff
	  OR Object.OperationKind = Enums.OperationCashWithdrawalOfKinds.EnumerationOfAccountablePerson
	  OR Object.OperationKind = Enums.OperationCashWithdrawalOfKinds.TaxTransfer)
	   AND (NOT ValueIsFilled(Object.Counterparty)
		   AND ValueIsFilled(ExchangeNodeForDataImport.Counterparty)) Then
		Object.Counterparty = ExchangeNodeForDataImport.Counterparty;
	EndIf;
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	If Object.PaymentDetails.Count() = 0 Then
		StringPayment = Object.PaymentDetails.Add();
		StringPayment.PaymentAmount = Object.DocumentAmount;
	EndIf;
	
	For Each CurRow IN Object.PaymentDetails Do 
		CurRow.CashFlowItem = Object.CashFlowItem;
	EndDo;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.PaymentExpense</Source>
					<Receiver>DocumentRef.WriteOffFromCurrentAccount</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationsKindsPayment"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsCashWithdrawal"/>
							<ConversionRuleCode>OperationCashWithdrawalOfKinds               </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							<BeforeExport>If (Source.OperationKind = Enums.OperationKindsPaymentExpense.Other
  OR Source.OperationKind = Enums.OperationKindsPaymentExpense.ToAdvanceHolder
  OR Source.OperationKind = Enums.OperationKindsPaymentExpense.Taxes)
   AND (ValueIsFilled(Source.BasisDocument)
   AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.CashTransferPlan")
   AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.CashOutflowPlan") 
   AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.TaxAccrual")) Then
   Value = Source.BasisDocument.Counterparty;
EndIf;</BeforeExport>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>350</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>400</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>BankAccount --&gt; AccountOfCompany</Description>
							<Order>450</Order>
							<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="AccountOfCompany" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>CashCurrency --&gt; DocumentCurrency</Description>
							<Order>500</Order>
							<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>AdvanceHolder --&gt; Ind</Description>
							<Order>550</Order>
							<Source Name="AdvanceHolder" Kind="Attribute" Type="CatalogRef.Employees"/>
							<Receiver Name="Ind" Kind="Attribute" Type="CatalogRef.Individuals"/>
							<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
							<BeforeExport>Value = Source.AdvanceHolder.Ind;</BeforeExport>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>Item --&gt; CashFlowItem</Description>
							<Order>600</Order>
							<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>26</Code>
							<Description> --&gt; AccountBank</Description>
							<Order>650</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="AccountBank" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>If Source.CashCurrency = Constants.NationalCurrency.Get() Then
	Value = "51";
Else
	Value = "52";
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>29</Code>
							<Description>BasisDocument --&gt; BasisDocument</Description>
							<Order>700</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="BasisDocument" Kind="Attribute"/>
						</Property>
						<Property>
							<Code>30</Code>
							<Description> --&gt; CounterpartyAccount</Description>
							<Order>750</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="CounterpartyAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
							<BeforeExport>If (Source.OperationKind = Enums.OperationKindsPaymentExpense.Other
  OR Source.OperationKind = Enums.OperationKindsPaymentExpense.ToAdvanceHolder
  OR Source.OperationKind = Enums.OperationKindsPaymentExpense.Taxes)
   AND (ValueIsFilled(Source.BasisDocument)
   AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.CashTransferPlan")
   AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.CashOutflowPlan")
   AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.TaxAccrual")) Then
	If TypeOf(Source.BasisDocument) = Type("DocumentRef.PaymentOrder") Then
		Value = Source.BasisDocument.CounterpartyAccount;
	Else
		Value = Source.BasisDocument.Counterparty.BankAccountByDefault;
	EndIf;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>36</Code>
							<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
							<Order>800</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>
If Source.OperationKind = Enums.OperationKindsPaymentExpense.Taxes
	OR Source.OperationKind = Enums.OperationKindsPaymentExpense.Other Then
	
	Value = Source.Item.CorrespondingAccount;
Else
	Value = "";	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>32</Code>
							<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
							<Order>850</Order>
							<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
						</Property>
						<Property>
							<Code>33</Code>
							<Description>PaymentDestination --&gt; PaymentDestination</Description>
							<Order>900</Order>
							<Source Name="PaymentDestination" Kind="Attribute" Type="String"/>
							<Receiver Name="PaymentDestination" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>34</Code>
							<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
							<Order>950</Order>
							<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>35</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1000</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>10</Code>
							<Description>PaymentDetails --&gt; PaymentDetails</Description>
							<Order>1050</Order>
							<Source Name="PaymentDetails" Kind="TabularSection"/>
							<Receiver Name="PaymentDetails" Kind="TabularSection"/>
							<Property>
								<Code>11</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>50</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>100</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>PaymentAmount --&gt; PaymentAmount</Description>
								<Order>150</Order>
								<Source Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="PaymentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>200</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsPaymentExpense.Vendor
	OR Source.OperationKind = Enums.OperationKindsPaymentExpense.ToCustomer Then
	
	Execute(Algorithms.BuildingStructureOfContractCounterparty);
	
Else
	
	Empty = True;
	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>250</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>300</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>350</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>400</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>31</Code>
								<Description> --&gt; BackPayMethod</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="BackPayMethod" Kind="Attribute" Type="EnumRef.DebtPaymentMethods"/>
								<BeforeExport>If CollectionObject.AdvanceFlag Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.DoNotRepay";
ElsIf ValueIsFilled(CollectionObject.Document) Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.ByDocument";
Else
	Expression = "Enums.MethodsOfRepaymentOfDebt.automatically";
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>37</Code>
								<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
								<BeforeExport>
If Source.OperationKind = Enums.OperationKindsPaymentExpense.Taxes
	OR Source.OperationKind = Enums.OperationKindsPaymentExpense.Other Then
	
	Value = Source.Item.CorrespondingAccount;
Else
	Value = "";	
EndIf;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ExpenseCashOrder</Code>
					<Description>Document: Expense from PettyCashes</Description>
					<Order>150</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	If Object.PaymentDetails.Count() = 0 Then
		StringPayment = Object.PaymentDetails.Add();
		StringPayment.PaymentAmount = Object.DocumentAmount;
	EndIf;
	
	For Each CurRow IN Object.PaymentDetails Do 
       CurRow.CashFlowItem = Object.CashFlowItem;
   	EndDo;
   
	Execute(Algorithms.HandleCounterpartyContract);
   
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
					<Source>DocumentRef.CashPayment</Source>
					<Receiver>DocumentRef.ExpenseCashOrder</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationsKindsCashPayment"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.GEOperationKinds"/>
							<ConversionRuleCode>OperationKindsRKO                                   </ConversionRuleCode>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>Issue --&gt; Issue</Description>
							<Order>100</Order>
							<Source Name="Issue" Kind="Attribute" Type="String"/>
							<Receiver Name="Issue" Kind="Attribute" Type="String"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Date --&gt; Date</Description>
							<Order>150</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute"/>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsCashPayment.ToAdvanceHolder Then
	Value = Source.AdvanceHolder.Ind;
EndIf;</BeforeExport>
						</Property>
						<Property Disable="true" Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Basis --&gt; Basis</Description>
							<Order>350</Order>
							<Source Name="Basis" Kind="Attribute" Type="String"/>
							<Receiver Name="Basis" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>400</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>Application --&gt; Application</Description>
							<Order>450</Order>
							<Source Name="Application" Kind="Attribute" Type="String"/>
							<Receiver Name="Application" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>500</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>550</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>19</Code>
							<Description>CashCurrency --&gt; DocumentCurrency</Description>
							<Order>600</Order>
							<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>20</Code>
							<Description>Item --&gt; CashFlowItem</Description>
							<Order>650</Order>
							<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>26</Code>
							<Description> --&gt; PettyCash</Description>
							<Order>700</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="PettyCash" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>If Source.CashCurrency = Constants.NationalCurrency.Get() Then
	Value = "50.01";
Else
	Value = "50.21";
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>35</Code>
							<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
							<Order>750</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>
If Source.OperationKind = Enums.OperationKindsCashPayment.Taxes
	OR Source.OperationKind = Enums.OperationKindsCashPayment.Other Then
	
	Value = Source.Item.CorrespondingAccount;
Else
	Value = "";	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>27</Code>
							<Description>ByDocument --&gt; ByDocument</Description>
							<Order>800</Order>
							<Source Name="ByDocument" Kind="Attribute" Type="String"/>
							<Receiver Name="ByDocument" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>28</Code>
							<Description>BasisDocument --&gt; BasisDocument</Description>
							<Order>850</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="BasisDocument" Kind="Attribute"/>
						</Property>
						<Property>
							<Code>33</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>900</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>34</Code>
							<Description>ReceiptCRNumber --&gt; ReceiptCRNumber</Description>
							<Order>950</Order>
							<Source Name="ReceiptCRNumber" Kind="Attribute" Type="Number"/>
							<Receiver Name="ReceiptCRNumber" Kind="Attribute" Type="Number"/>
						</Property>
						<Group>
							<Code>15</Code>
							<Description>PaymentDetails --&gt; PaymentDetails</Description>
							<Order>1000</Order>
							<Source Name="PaymentDetails" Kind="TabularSection"/>
							<Receiver Name="PaymentDetails" Kind="TabularSection"/>
							<Property>
								<Code>16</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>50</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>100</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>PaymentAmount --&gt; PaymentAmount</Description>
								<Order>150</Order>
								<Source Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="PaymentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>200</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsCashPayment.Vendor
	OR Source.OperationKind = Enums.OperationKindsCashPayment.ToCustomer Then
	
	Execute(Algorithms.BuildingStructureOfContractCounterparty);
	
Else
	
	Empty = True;
	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>250</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>300</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>350</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>29</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>400</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>30</Code>
								<Description> --&gt; BackPayMethod</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="BackPayMethod" Kind="Attribute" Type="EnumRef.DebtPaymentMethods"/>
								<BeforeExport>If CollectionObject.AdvanceFlag Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.DoNotRepay";
ElsIf ValueIsFilled(CollectionObject.Document) Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.ByDocument";
Else
	Expression = "Enums.MethodsOfRepaymentOfDebt.automatically";
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>36</Code>
								<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
								<BeforeExport>
If Source.OperationKind = Enums.OperationKindsCashPayment.Taxes
	OR Source.OperationKind = Enums.OperationKindsCashPayment.Other Then
	
	Value = Source.Item.CorrespondingAccount;
Else
	Value = "";	
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>31</Code>
							<Description>PayrollPayment --&gt; PayrollPayment</Description>
							<Order>1050</Order>
							<Source Name="PayrollPayment" Kind="TabularSection"/>
							<Receiver Name="PayrollPayment" Kind="TabularSection"/>
							<Property>
								<Code>32</Code>
								<Description>PaymentAmount --&gt; AmountToPayment</Description>
								<Order>50</Order>
								<Source Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountToPayment" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReceiptCashOrder</Code>
					<Description>Document: Cash receipt</Description>
					<Order>200</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;
	
	FillingDocumentsDefault.FillAccountsDefault(Object);
	
	If Object.PaymentDetails.Count() = 0 Then
		StringPayment = Object.PaymentDetails.Add();
		StringPayment.PaymentAmount = Object.DocumentAmount;
	EndIf;
	
	For Each CurRow IN Object.PaymentDetails Do 
		CurRow.CashFlowItem = Object.CashFlowItem;
	EndDo;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
					<Source>DocumentRef.CashReceipt</Source>
					<Receiver>DocumentRef.ReceiptCashOrder</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationsKindsCashReceipt"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.CROperationsKinds"/>
							<ConversionRuleCode>OCROperationsKinds                                   </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute"/>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsCashReceipt.FromAdvanceHolder Then
	Value = Source.AdvanceHolder.Ind;
EndIf;</BeforeExport>
						</Property>
						<Property Disable="true" Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Basis --&gt; Basis</Description>
							<Order>300</Order>
							<Source Name="Basis" Kind="Attribute" Type="String"/>
							<Receiver Name="Basis" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Application --&gt; Application</Description>
							<Order>400</Order>
							<Source Name="Application" Kind="Attribute" Type="String"/>
							<Receiver Name="Application" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>AcceptedFrom --&gt; AcceptedFrom</Description>
							<Order>450</Order>
							<Source Name="AcceptedFrom" Kind="Attribute" Type="String"/>
							<Receiver Name="AcceptedFrom" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>500</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>550</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>18</Code>
							<Description>CashCurrency --&gt; DocumentCurrency</Description>
							<Order>600</Order>
							<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>19</Code>
							<Description>Item --&gt; CashFlowItem</Description>
							<Order>650</Order>
							<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>20</Code>
							<Description> --&gt; PettyCash</Description>
							<Order>700</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="PettyCash" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>If Source.CashCurrency = Constants.NationalCurrency.Get() Then
	Value = "50.01";
Else
	Value = "50.21";
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>30</Code>
							<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
							<Order>750</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>
If Source.OperationKind = Enums.OperationKindsCashReceipt.CurrencyPurchase
	OR Source.OperationKind = Enums.OperationKindsCashReceipt.Other Then
	
	Value = Source.Item.CorrespondingAccount;
Else
	Value = "";	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>26</Code>
							<Description>BasisDocument --&gt; BasisDocument</Description>
							<Order>800</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="BasisDocument" Kind="Attribute"/>
						</Property>
						<Property>
							<Code>29</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>850</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>28</Code>
							<Description>ReceiptCRNumber --&gt; ReceiptCRNumber</Description>
							<Order>900</Order>
							<Source Name="ReceiptCRNumber" Kind="Attribute" Type="Number"/>
							<Receiver Name="ReceiptCRNumber" Kind="Attribute" Type="Number"/>
						</Property>
						<Group>
							<Code>13</Code>
							<Description>PaymentDetails --&gt; PaymentDetails</Description>
							<Order>950</Order>
							<Source Name="PaymentDetails" Kind="TabularSection"/>
							<Receiver Name="PaymentDetails" Kind="TabularSection"/>
							<Property>
								<Code>14</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>50</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>100</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>16</Code>
								<Description>PaymentAmount --&gt; PaymentAmount</Description>
								<Order>150</Order>
								<Source Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="PaymentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>InvoiceForPayment --&gt; InvoiceForPayment</Description>
								<Order>200</Order>
								<Source Name="InvoiceForPayment" Kind="Attribute"/>
								<Receiver Name="InvoiceForPayment" Kind="Attribute" Type="DocumentRef.QuotationToCustomer"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>250</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsCashReceipt.FromCustomer
	OR Source.OperationKind = Enums.OperationKindsCashReceipt.FromVendor Then
	
	Execute(Algorithms.BuildingStructureOfContractCounterparty);
	
Else
	
	Empty = True;
	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>300</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>350</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>400</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>450</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>27</Code>
								<Description> --&gt; BackPayMethod</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="BackPayMethod" Kind="Attribute" Type="EnumRef.DebtPaymentMethods"/>
								<BeforeExport>If CollectionObject.AdvanceFlag Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.DoNotRepay";
ElsIf ValueIsFilled(CollectionObject.Document) Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.ByDocument";
Else
	Expression = "Enums.MethodsOfRepaymentOfDebt.automatically";
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>31</Code>
								<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
								<Order>550</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
								<BeforeExport>
If Source.OperationKind = Enums.OperationKindsCashReceipt.CurrencyPurchase
	OR Source.OperationKind = Enums.OperationKindsCashReceipt.Other Then
	
	Value = Source.Item.CorrespondingAccount;
Else
	Value = "";	
EndIf;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>PaymentOrder</Code>
					<Description>Document: Payment Instruction</Description>
					<Order>250</Order>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.PaymentOrder</Source>
					<Receiver>DocumentRef.PaymentOrder</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>TransferToBudgetKind --&gt; TransferToBudgetKind</Description>
							<Order>50</Order>
							<Source Name="TransferToBudgetKind" Kind="Attribute" Type="EnumRef.TransferToBudgetKinds"/>
							<Receiver Name="TransferToBudgetKind" Kind="Attribute" Type="EnumRef.TransferToBudgetKinds"/>
							<ConversionRuleCode>BudgetTransferKinds                           </ConversionRuleCode>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>PaymentKind --&gt; PaymentKind</Description>
							<Order>100</Order>
							<Source Name="PaymentKind" Kind="Attribute" Type="String"/>
							<Receiver Name="PaymentKind" Kind="Attribute" Type="String"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Date --&gt; Date</Description>
							<Order>150</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>PayerTIN --&gt; PayerTIN</Description>
							<Order>200</Order>
							<Source Name="PayerTIN" Kind="Attribute" Type="String"/>
							<Receiver Name="PayerTIN" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>PayeeTIN --&gt; PayeeTIN</Description>
							<Order>250</Order>
							<Source Name="PayeeTIN" Kind="Attribute" Type="String"/>
							<Receiver Name="PayeeTIN" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>BKCode --&gt; BKCode</Description>
							<Order>300</Order>
							<Source Name="BKCode" Kind="Attribute" Type="String"/>
							<Receiver Name="BKCode" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>OKATOCode --&gt; OKATOCode</Description>
							<Order>350</Order>
							<Source Name="OKATOCode" Kind="Attribute" Type="String"/>
							<Receiver Name="OKATOCode" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>400</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>450</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>PayerKPP --&gt; PayerKPP</Description>
							<Order>500</Order>
							<Source Name="PayerKPP" Kind="Attribute" Type="String"/>
							<Receiver Name="PayerKPP" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>PayeeKPP --&gt; PayeeKPP</Description>
							<Order>550</Order>
							<Source Name="PayeeKPP" Kind="Attribute" Type="String"/>
							<Receiver Name="PayeeKPP" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>PaymentDestination --&gt; PaymentDestination</Description>
							<Order>600</Order>
							<Source Name="PaymentDestination" Kind="Attribute" Type="String"/>
							<Receiver Name="PaymentDestination" Kind="Attribute" Type="String"/>
						</Property>
						<Property Search="true">
							<Code>13</Code>
							<Description>Number --&gt; Number</Description>
							<Order>650</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>Company --&gt; Company</Description>
							<Order>700</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>PaymentPriority --&gt; PaymentPriority</Description>
							<Order>750</Order>
							<Source Name="PaymentPriority" Kind="Attribute" Type="Number"/>
							<Receiver Name="PaymentPriority" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>DateIndicator --&gt; DateIndicator</Description>
							<Order>800</Order>
							<Source Name="DateIndicator" Kind="Attribute" Type="Date"/>
							<Receiver Name="DateIndicator" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>NumberIndicator --&gt; NumberIndicator</Description>
							<Order>850</Order>
							<Source Name="NumberIndicator" Kind="Attribute" Type="String"/>
							<Receiver Name="NumberIndicator" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>18</Code>
							<Description>BasisIndicator --&gt; BasisIndicator</Description>
							<Order>900</Order>
							<Source Name="BasisIndicator" Kind="Attribute" Type="String"/>
							<Receiver Name="BasisIndicator" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>19</Code>
							<Description>PeriodIndicator --&gt; PeriodIndicator</Description>
							<Order>950</Order>
							<Source Name="PeriodIndicator" Kind="Attribute" Type="String"/>
							<Receiver Name="PeriodIndicator" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>20</Code>
							<Description>TypeIndicator --&gt; TypeIndicator</Description>
							<Order>1000</Order>
							<Source Name="TypeIndicator" Kind="Attribute" Type="String"/>
							<Receiver Name="TypeIndicator" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>21</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>1050</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>22</Code>
							<Description>VATRate --&gt; VATRate</Description>
							<Order>1100</Order>
							<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
							<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
							<BeforeExport>Execute(Algorithms.FillInVatRateCaps);</BeforeExport>
						</Property>
						<Property>
							<Code>23</Code>
							<Description>AuthorStatus --&gt; AuthorStatus</Description>
							<Order>1150</Order>
							<Source Name="AuthorStatus" Kind="Attribute" Type="String"/>
							<Receiver Name="AuthorStatus" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>24</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>1200</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>25</Code>
							<Description>VATAmount --&gt; VATAmount</Description>
							<Order>1250</Order>
							<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>26</Code>
							<Description>CounterpartyAccount --&gt; CounterpartyAccount</Description>
							<Order>1300</Order>
							<Source Name="CounterpartyAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="CounterpartyAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
						</Property>
						<Property>
							<Code>27</Code>
							<Description>PayerText --&gt; PayerText</Description>
							<Order>1350</Order>
							<Source Name="PayerText" Kind="Attribute" Type="String"/>
							<Receiver Name="PayerText" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>28</Code>
							<Description>PayeeText --&gt; PayeeText</Description>
							<Order>1400</Order>
							<Source Name="PayeeText" Kind="Attribute" Type="String"/>
							<Receiver Name="PayeeText" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>29</Code>
							<Description>BankAccount --&gt; AccountOfCompany</Description>
							<Order>1450</Order>
							<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="AccountOfCompany" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
						</Property>
						<Property>
							<Code>31</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>1500</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>30</Code>
							<Description> --&gt; PaymentToBudget</Description>
							<Order>1550</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="PaymentToBudget" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.OperationKind = Enums.OperationKindsPaymentOrder.TaxTransfer;</BeforeExport>
						</Property>
						<Property Disable="true">
							<Code>32</Code>
							<Description>OperationKind --&gt;</Description>
							<Order>1600</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationsKindsPaymentOrder"/>
							<Receiver Name="" Kind=""/>
						</Property>
						<Property>
							<Code>33</Code>
							<Description>Paid --&gt; Paid</Description>
							<Order>1650</Order>
							<Source Name="Paid" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="Paid" Kind="Attribute" Type="Boolean"/>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Group>
					<Code>FundsTransfer</Code>
					<Description>FundsTransfer</Description>
					<Order>300</Order>
					<Rule>
						<Code>MovingDSReceiptCashOrder</Code>
						<Description>Document: Move money</Description>
						<Order>50</Order>
						<AfterImport>// fill in the GL accounts if they are not filled in 
If Not ValueIsFilled(Object.PettyCash) Then
	If Object.DocumentCurrency = Parameters.CurrencyOfRegulatedAccounting Then
		Object.PettyCash = ChartsOfAccounts.SelfSupporting.PettyCashCompanies;
	Else
		Object.PettyCash = ChartsOfAccounts.SelfSupporting.PettyCashCompaniesCur;
	EndIf;
EndIf;

If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
	If Object.DocumentCurrency = Parameters.CurrencyOfRegulatedAccounting Then
		Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.BankAccounts;
	Else
		Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.CurrencyAccounts;
	EndIf;
EndIf;</AfterImport>
						<SynchronizeByID>true</SynchronizeByID>
						<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
						<Source>DocumentRef.CashTransfer</Source>
						<Receiver>DocumentRef.ReceiptCashOrder</Receiver>
						<Properties>
							<Property>
								<Code>9</Code>
								<Description> --&gt; OperationKind</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.CROperationsKinds"/>
								<BeforeExport>Value = "ReceiptOfCashInBank";</BeforeExport>
							</Property>
							<Property Search="true">
								<Code>5</Code>
								<Description>Date --&gt; Date</Description>
								<Order>100</Order>
								<Source Name="Date" Kind="Property" Type="Date"/>
								<Receiver Name="Date" Kind="Property" Type="Date"/>
							</Property>
							<Property Disable="true" Search="true">
								<Code>6</Code>
								<Description>Number --&gt; Number</Description>
								<Order>150</Order>
								<Source Name="Number" Kind="Property" Type="String"/>
								<Receiver Name="Number" Kind="Property" Type="String"/>
							</Property>
							<Property>
								<Code>3</Code>
								<Description>Company --&gt; Company</Description>
								<Order>200</Order>
								<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<ConversionRuleCode>Companies                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>4</Code>
								<Description>DocumentAmount --&gt; DocumentAmount</Description>
								<Order>250</Order>
								<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>7</Code>
								<Description>DeletionMark --&gt; DeletionMark</Description>
								<Order>300</Order>
								<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
								<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>8</Code>
								<Description>Posted --&gt; Posted</Description>
								<Order>350</Order>
								<Source Name="Posted" Kind="Property" Type="Boolean"/>
								<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>2</Code>
								<Description>Comment --&gt; Comment</Description>
								<Order>400</Order>
								<Source Name="Comment" Kind="Attribute" Type="String"/>
								<Receiver Name="Comment" Kind="Attribute" Type="String"/>
							</Property>
							<Property>
								<Code>1</Code>
								<Description>BasisDocument --&gt; BasisDocument</Description>
								<Order>450</Order>
								<Source Name="BasisDocument" Kind="Attribute" Type="DocumentRef.CashTransferPlan"/>
								<Receiver Name="BasisDocument" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>CashCurrency --&gt; DocumentCurrency</Description>
								<Order>500</Order>
								<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>Item --&gt; CashFlowItem</Description>
								<Order>550</Order>
								<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>BankAccount --&gt; Counterparty</Description>
								<Order>600</Order>
								<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<Receiver Name="Counterparty" Kind="Attribute"/>
								<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
							</Property>
							<Group>
								<Code>13</Code>
								<Description> --&gt; PaymentDetails</Description>
								<Order>650</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="PaymentDetails" Kind="TabularSection"/>
								<BeforeProcessExport>TableExplanationOfPayment = New ValueTable;

TableExplanationOfPayment.Columns.Add("MutualSettlementsExchangeRate");
TableExplanationOfPayment.Columns.Add("MutualSettlementsCurrencyRate");
TableExplanationOfPayment.Columns.Add("AmountMutualSettlements");
TableExplanationOfPayment.Columns.Add("PaymentAmount");
TableExplanationOfPayment.Columns.Add("CashFlowItem");
	
NewRow = TableExplanationOfPayment.Add();
	
StructureByCurrency = InformationRegisters.CurrencyRates.GetLast(Source.Date, New Structure("Currency", Source.CashCurrency));
		
ExchangeRate = ?(
	StructureByCurrency.ExchangeRate = 0,
	1,
	StructureByCurrency.ExchangeRate
);
		
Multiplicity = ?(
	StructureByCurrency.ExchangeRate = 0,
	1,
	StructureByCurrency.Multiplicity
);
		
NewRow.MutualSettlementsExchangeRate = ExchangeRate;
NewRow.MutualSettlementsCurrencyRate = Multiplicity;
		
NewRow.AmountMutualSettlements = SmallBusinessServer.RecalculateFromCurrencyToCurrency(
	Source.DocumentAmount,
	ExchangeRate,
	1,
	Multiplicity,
	1
);
	
NewRow.PaymentAmount = NewRow.AmountMutualSettlements;
NewRow.CashFlowItem = Source.Item;
	
ObjectsCollection = TableExplanationOfPayment;</BeforeProcessExport>
								<Property>
									<Code>14</Code>
									<Description> --&gt; CashFlowItem</Description>
									<Order>50</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								</Property>
								<Property>
									<Code>15</Code>
									<Description> --&gt; AmountMutualSettlements</Description>
									<Order>100</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>16</Code>
									<Description> --&gt; PaymentAmount</Description>
									<Order>150</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>17</Code>
									<Description> --&gt; MutualSettlementsExchangeRate</Description>
									<Order>200</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>18</Code>
									<Description> --&gt; MutualSettlementsCurrencyRate</Description>
									<Order>250</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
								</Property>
							</Group>
						</Properties>
						<Values/>
					</Rule>
					<Rule>
						<Code>MovingDCExpenseCashOrder</Code>
						<Description>Document: Move money</Description>
						<Order>100</Order>
						<AfterImport>// fill in the GL accounts if they are not filled in 
If Not ValueIsFilled(Object.PettyCash) Then
	If Object.DocumentCurrency = Parameters.CurrencyOfRegulatedAccounting Then
		Object.PettyCash = ChartsOfAccounts.SelfSupporting.PettyCashCompanies;
	Else
		Object.PettyCash = ChartsOfAccounts.SelfSupporting.PettyCashCompaniesCur;
	EndIf;
EndIf;

If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
	If Object.DocumentCurrency = Parameters.CurrencyOfRegulatedAccounting Then
		Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.BankAccounts;
	Else
		Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.CurrencyAccounts;
	EndIf;
EndIf;</AfterImport>
						<SynchronizeByID>true</SynchronizeByID>
						<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
						<Source>DocumentRef.CashTransfer</Source>
						<Receiver>DocumentRef.ExpenseCashOrder</Receiver>
						<Properties>
							<Property>
								<Code>14</Code>
								<Description> --&gt; OperationKind</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.GEOperationKinds"/>
								<BeforeExport>Value = "CashInBank";</BeforeExport>
							</Property>
							<Property Search="true">
								<Code>1</Code>
								<Description>Date --&gt; Date</Description>
								<Order>100</Order>
								<Source Name="Date" Kind="Property" Type="Date"/>
								<Receiver Name="Date" Kind="Property" Type="Date"/>
							</Property>
							<Property Disable="true" Search="true">
								<Code>4</Code>
								<Description>Number --&gt; Number</Description>
								<Order>150</Order>
								<Source Name="Number" Kind="Property" Type="String"/>
								<Receiver Name="Number" Kind="Property" Type="String"/>
							</Property>
							<Property>
								<Code>2</Code>
								<Description>BasisDocument --&gt; BasisDocument</Description>
								<Order>200</Order>
								<Source Name="BasisDocument" Kind="Attribute" Type="DocumentRef.CashTransferPlan"/>
								<Receiver Name="BasisDocument" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>3</Code>
								<Description>Comment --&gt; Comment</Description>
								<Order>250</Order>
								<Source Name="Comment" Kind="Attribute" Type="String"/>
								<Receiver Name="Comment" Kind="Attribute" Type="String"/>
							</Property>
							<Property>
								<Code>5</Code>
								<Description>Company --&gt; Company</Description>
								<Order>300</Order>
								<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<ConversionRuleCode>Companies                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>6</Code>
								<Description>DeletionMark --&gt; DeletionMark</Description>
								<Order>350</Order>
								<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
								<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>7</Code>
								<Description>Posted --&gt; Posted</Description>
								<Order>400</Order>
								<Source Name="Posted" Kind="Property" Type="Boolean"/>
								<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>8</Code>
								<Description>DocumentAmount --&gt; DocumentAmount</Description>
								<Order>450</Order>
								<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>9</Code>
								<Description>CashCurrency --&gt; DocumentCurrency</Description>
								<Order>500</Order>
								<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>BankAccountPayee --&gt; AccountOfCompany</Description>
								<Order>550</Order>
								<Source Name="BankAccountPayee" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<Receiver Name="AccountOfCompany" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>Item --&gt; CashFlowItem</Description>
								<Order>600</Order>
								<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
							</Property>
							<Group>
								<Code>15</Code>
								<Description> --&gt; PaymentDetails</Description>
								<Order>650</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="PaymentDetails" Kind="TabularSection"/>
								<BeforeProcessExport>TableExplanationOfPayment = New ValueTable;

TableExplanationOfPayment.Columns.Add("MutualSettlementsExchangeRate");
TableExplanationOfPayment.Columns.Add("MutualSettlementsCurrencyRate");
TableExplanationOfPayment.Columns.Add("AmountMutualSettlements");
TableExplanationOfPayment.Columns.Add("PaymentAmount");
TableExplanationOfPayment.Columns.Add("CashFlowItem");

NewRow = TableExplanationOfPayment.Add();
	
StructureByCurrency = InformationRegisters.CurrencyRates.GetLast(Source.Date, New Structure("Currency", Source.CashCurrency));
		
ExchangeRate = ?(
	StructureByCurrency.ExchangeRate = 0,
	1,
	StructureByCurrency.ExchangeRate
);
		
Multiplicity = ?(
	StructureByCurrency.ExchangeRate = 0,
	1,
	StructureByCurrency.Multiplicity
);
		
NewRow.MutualSettlementsExchangeRate = ExchangeRate;
NewRow.MutualSettlementsCurrencyRate = Multiplicity;
		
NewRow.AmountMutualSettlements = SmallBusinessServer.RecalculateFromCurrencyToCurrency(
	Source.DocumentAmount,
	ExchangeRate,
	1,
	Multiplicity,
	1
);
	
NewRow.PaymentAmount = NewRow.AmountMutualSettlements;
NewRow.CashFlowItem = Source.Item;
	
ObjectsCollection = TableExplanationOfPayment;</BeforeProcessExport>
								<Property>
									<Code>16</Code>
									<Description> --&gt; MutualSettlementsCurrencyRate</Description>
									<Order>50</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>17</Code>
									<Description> --&gt; MutualSettlementsExchangeRate</Description>
									<Order>100</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>18</Code>
									<Description> --&gt; CashFlowItem</Description>
									<Order>150</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								</Property>
								<Property>
									<Code>19</Code>
									<Description> --&gt; AmountMutualSettlements</Description>
									<Order>200</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>20</Code>
									<Description> --&gt; PaymentAmount</Description>
									<Order>250</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								</Property>
							</Group>
						</Properties>
						<Values/>
					</Rule>
					<Rule>
						<Code>MovingCADirectCurrentAccount</Code>
						<Description>Document: Move money</Description>
						<Order>200</Order>
						<AfterImport>// fill in the GL accounts if they are not filled in 
If Not ValueIsFilled(Object.AccountBank) Then
	If Object.DocumentCurrency = Parameters.CurrencyOfRegulatedAccounting Then
		Object.AccountBank = ChartsOfAccounts.SelfSupporting.BankAccounts;
	Else
		Object.AccountBank = ChartsOfAccounts.SelfSupporting.CurrencyAccounts;
	EndIf;
EndIf;

If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
	If Object.DocumentCurrency = Parameters.CurrencyOfRegulatedAccounting Then
		Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.BankAccounts;
	Else
		Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.CurrencyAccounts;
	EndIf;
EndIf;</AfterImport>
						<SynchronizeByID>true</SynchronizeByID>
						<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
						<Source>DocumentRef.CashTransfer</Source>
						<Receiver>DocumentRef.WriteOffFromCurrentAccount</Receiver>
						<Properties>
							<Property>
								<Code>12</Code>
								<Description> --&gt; OperationKind</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsCashWithdrawal"/>
								<BeforeExport>Value = "TransferToAnotherAccount";</BeforeExport>
							</Property>
							<Property Search="true">
								<Code>1</Code>
								<Description>Date --&gt; Date</Description>
								<Order>100</Order>
								<Source Name="Date" Kind="Property" Type="Date"/>
								<Receiver Name="Date" Kind="Property" Type="Date"/>
							</Property>
							<Property Disable="true" Search="true">
								<Code>4</Code>
								<Description>Number --&gt; Number</Description>
								<Order>150</Order>
								<Source Name="Number" Kind="Property" Type="String"/>
								<Receiver Name="Number" Kind="Property" Type="String"/>
							</Property>
							<Property>
								<Code>2</Code>
								<Description>BasisDocument --&gt; BasisDocument</Description>
								<Order>200</Order>
								<Source Name="BasisDocument" Kind="Attribute" Type="DocumentRef.CashTransferPlan"/>
								<Receiver Name="BasisDocument" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>3</Code>
								<Description>Comment --&gt; Comment</Description>
								<Order>250</Order>
								<Source Name="Comment" Kind="Attribute" Type="String"/>
								<Receiver Name="Comment" Kind="Attribute" Type="String"/>
							</Property>
							<Property>
								<Code>5</Code>
								<Description>Company --&gt; Company</Description>
								<Order>300</Order>
								<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<ConversionRuleCode>Companies                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>6</Code>
								<Description>DeletionMark --&gt; DeletionMark</Description>
								<Order>350</Order>
								<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
								<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>7</Code>
								<Description>Posted --&gt; Posted</Description>
								<Order>400</Order>
								<Source Name="Posted" Kind="Property" Type="Boolean"/>
								<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>CashCurrency --&gt; DocumentCurrency</Description>
								<Order>450</Order>
								<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
							</Property>
							<Property>
								<Code>8</Code>
								<Description>DocumentAmount --&gt; DocumentAmount</Description>
								<Order>500</Order>
								<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>9</Code>
								<Description>Item --&gt; CashFlowItem</Description>
								<Order>550</Order>
								<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>BankAccount --&gt; AccountOfCompany</Description>
								<Order>600</Order>
								<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<Receiver Name="AccountOfCompany" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
							</Property>
							<Property>
								<Code>14</Code>
								<Description>BankAccountPayee --&gt; CounterpartyAccount</Description>
								<Order>650</Order>
								<Source Name="BankAccountPayee" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<Receiver Name="CounterpartyAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
							</Property>
							<Group>
								<Code>16</Code>
								<Description> --&gt; PaymentDetails</Description>
								<Order>700</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="PaymentDetails" Kind="TabularSection"/>
								<BeforeProcessExport>TableExplanationOfPayment = New ValueTable;

TableExplanationOfPayment.Columns.Add("MutualSettlementsExchangeRate");
TableExplanationOfPayment.Columns.Add("MutualSettlementsCurrencyRate");
TableExplanationOfPayment.Columns.Add("AmountMutualSettlements");
TableExplanationOfPayment.Columns.Add("PaymentAmount");
TableExplanationOfPayment.Columns.Add("CashFlowItem");

NewRow = TableExplanationOfPayment.Add();
	
StructureByCurrency = InformationRegisters.CurrencyRates.GetLast(Source.Date, New Structure("Currency", Source.CashCurrency));
		
ExchangeRate = ?(
	StructureByCurrency.ExchangeRate = 0,
	1,
	StructureByCurrency.ExchangeRate
);
		
Multiplicity = ?(
	StructureByCurrency.ExchangeRate = 0,
	1,
	StructureByCurrency.Multiplicity
);
		
NewRow.MutualSettlementsExchangeRate = ExchangeRate;
NewRow.MutualSettlementsCurrencyRate = Multiplicity;
		
NewRow.AmountMutualSettlements = SmallBusinessServer.RecalculateFromCurrencyToCurrency(
	Source.DocumentAmount,
	ExchangeRate,
	1,
	Multiplicity,
	1
);
	
NewRow.PaymentAmount = NewRow.AmountMutualSettlements;
NewRow.CashFlowItem = Source.Item;
	
ObjectsCollection = TableExplanationOfPayment;</BeforeProcessExport>
								<Property>
									<Code>17</Code>
									<Description> --&gt; MutualSettlementsCurrencyRate</Description>
									<Order>50</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>18</Code>
									<Description> --&gt; MutualSettlementsExchangeRate</Description>
									<Order>100</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>19</Code>
									<Description> --&gt; CashFlowItem</Description>
									<Order>150</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								</Property>
								<Property>
									<Code>20</Code>
									<Description> --&gt; AmountMutualSettlements</Description>
									<Order>200</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>21</Code>
									<Description> --&gt; PaymentAmount</Description>
									<Order>250</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								</Property>
							</Group>
						</Properties>
						<Values/>
					</Rule>
				</Group>
			</Group>
			<Group>
				<Code>WorksServicesProduction</Code>
				<Description>Documents. Works Services Production</Description>
				<Order>300</Order>
				<Rule>
					<Code>RequestInvoice</Code>
					<Description>Document: Move inventories</Description>
					<Order>50</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Counterparty)
		  AND Object.ConsumerMaterials.Count() &gt; 0 Then
		If ObjectParameters &lt;&gt; Undefined Then
			ParametersOfTP = ObjectParameters.Get("ConsumerMaterialsTabularSection");
			Object.Counterparty = ParametersOfTP[0].Counterparty;
		EndIf;
		If Not ValueIsFilled(Object.Counterparty) Then
			Object.Counterparty = ExchangeNodeForDataImport.Counterparty;
		EndIf;
	EndIf;
	
	// Fill in the header attributes
	If Not ValueIsFilled(Object.VATInProductsCost) Then
		Object.VATInProductsCost = Enums.ActionVATInProductsCost.DontChange;
	EndIf;
	
	Object.ForWriteOffVATUseAccountAndCostAccountingAnalyst = True;
	
	If ObjectParameters &lt;&gt; Undefined Then
		ParametersOfTP = ObjectParameters.Get("MaterialsTabularSection");
	EndIf;
	
	// Fill in the Gl accounts in the Materials tabular section
	For Each CurRow IN Object.Materials Do
		
		CurRow.CostsItem = ExchangeNodeForDataImport.CostsItem;
		Object.FillGLAccountsAtRowTabParts(CurRow, "Materials", True);
		
		If ObjectParameters &lt;&gt; Undefined 
		   AND ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined
		   AND ParametersOfTP[CurRow.LineNumber - 1].ProductOnCommission = True Then
			If Not ValueIsFilled(CurRow.Account) Then
				CurRow.Account = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
			EndIf;
		EndIf;
		
		If Not ValueIsFilled(CurRow.GLExpenseAccount) Then
			CurRow.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.MainProduction;
		EndIf;
		
	EndDo;
	
	// Fill in the Gl accounts in the Materials tabular section
	For Each CurRow IN Object.ConsumerMaterials Do
		GLAccounts = AccountingAccounting.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
		If Not ValueIsFilled(CurRow.Account) Then
			CurRow.Account = GLAccounts.TolRawGLAccount;
		EndIf;
		If Not ValueIsFilled(CurRow.TransferAccount) Then
			CurRow.TransferAccount = GLAccounts.AccountTransferOffBal;
		EndIf;
	EndDo;
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryTransfer</Source>
					<Receiver>DocumentRef.RequestInvoice</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>300</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>StructuralUnitPayee --&gt; DepartmentCost</Description>
							<Order>350</Order>
							<Source Name="StructuralUnitPayee" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="DepartmentCost" Kind="Attribute" Type="CatalogRef.CompaniesDepartments"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>14</Code>
							<Description> --&gt; GLAccountsCostInTable</Description>
							<Order>400</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="GLAccountsCostInTable" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = True;</BeforeExport>
						</Property>
						<Property>
							<Code>30</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>450</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>10</Code>
							<Description>Inventory --&gt; Materials</Description>
							<Order>500</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Materials" Kind="TabularSection"/>
							<BeforeProcessExport>TableProducts = Source.Inventory.UnloadColumns();
SourceTable = Source.Inventory;

For Each CurRow IN SourceTable Do	
	If Not ValueIsFilled(CurRow.Batch)
		OR (ValueIsFilled(CurRow.Batch)
		   AND CurRow.Batch.Status &lt;&gt; Enums.BatchStatuses.CommissionMaterials) Then		
		NewRow = TableProducts.Add();
		FillPropertyValues(NewRow, CurRow);	
	EndIf;	
EndDo;

ObjectsCollection = TableProducts;</BeforeProcessExport>
							<Property>
								<Code>11</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>15</Code>
								<Description> --&gt; Count</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>16</Code>
								<Description> --&gt; Factor</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Batch --&gt;</Description>
								<Order>300</Order>
								<Source Name="Batch" Kind="Attribute" Type="CatalogRef.ProductsAndServicesBatches"/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
								<BeforeExport>If ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>24</Code>
								<Description> --&gt; ProductsAndServicesCategory</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
								<BeforeExport>Value = CollectionObject.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
							</Property>
							<Property>
								<Code>27</Code>
								<Description> --&gt; DepartmentCost</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="DepartmentCost" Kind="Attribute" Type="CatalogRef.CompaniesDepartments"/>
								<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
								<BeforeExport>Value = Source.StructuralUnitPayee;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>17</Code>
							<Description>Inventory --&gt; ConsumerMaterials</Description>
							<Order>550</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="ConsumerMaterials" Kind="TabularSection"/>
							<BeforeProcessExport>TableProducts = Source.Inventory.UnloadColumns();
SourceTable = Source.Inventory;

For Each CurRow IN SourceTable Do	
	If ValueIsFilled(CurRow.Batch)
	   AND CurRow.Batch.Status = Enums.BatchStatuses.CommissionMaterials Then	
		NewRow = TableProducts.Add();
		FillPropertyValues(NewRow, CurRow);	
	EndIf;	
EndDo;

ObjectsCollection = TableProducts;</BeforeProcessExport>
							<Property>
								<Code>18</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>21</Code>
								<Description> --&gt; Count</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>22</Code>
								<Description> --&gt; Factor</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>CustomerOrder --&gt;</Description>
								<Order>600</Order>
								<Source Name="CustomerOrder" Kind="Attribute" Type="DocumentRef.CustomerOrder"/>
								<Receiver Name="" Kind=""/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
								<ParameterForTransferName>Counterparty</ParameterForTransferName>
								<BeforeExport>If ValueIsFilled(CollectionObject.Batch)
   AND ValueIsFilled(CollectionObject.Batch.BatchOwner) Then
   Value = CollectionObject.Batch.BatchOwner;
ElsIf ValueIsFilled(Source.CustomerOrder) Then
   Value = Source.CustomerOrder.Counterparty;
ElsIf ValueIsFilled(CollectionObject.CustomerOrder) Then
   Value = CollectionObject.CustomerOrder.Counterparty;
Else
   Value = Undefined;
EndIf;</BeforeExport>
							</Property>
							<Property Disable="true">
								<Code>29</Code>
								<Description>Batch --&gt;</Description>
								<Order>650</Order>
								<Source Name="Batch" Kind="Attribute" Type="CatalogRef.ProductsAndServicesBatches"/>
								<Receiver Name="" Kind=""/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReportProductionShift</Code>
					<Description>Document: Assembly inventories</Description>
					<Order>100</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Warehouse) Then
		Object.Warehouse = ExchangeNodeForDataImport.Warehouse;
	EndIf;
	
	If Not ValueIsFilled(Object.DepartmentCost) Then
		Object.DepartmentCost = ExchangeNodeForDataImport.Department;
	EndIf;
	
	// Fill in the header attributes
	If Not ValueIsFilled(Object.GLExpenseAccount) Then
		Object.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.MainProduction;
	EndIf;
	
	If Not ValueIsFilled(Object.VATInProductsCost) Then
		Object.VATInProductsCost = Enums.ActionVATInProductsCost.DontChange;
	EndIf;
	
	Object.ForWriteOffVATUseAccountAndCostAccountingAnalyst = True;
	
	AccountingPolicy = CommonUse.GetParametersOfAccountingPolicy(Object.Date, False, Object.Company);
	
	If Not AccountingPolicy.Count() = 0 Then
		DistributionOrder = AccountingPolicy.DistributionOrderCostsToProvideInternalServices;
		If DistributionOrder = Enums.DistributionOrderCostsToProvideInternalServices.ByPlannedPrices Then
			Object.VariantExpressionOfInternalServices = Enums.VariantExpressionOfInternalServices.InPlannedPrices;
		ElsIf DistributionOrder = Enums.DistributionOrderCostsToProvideInternalServices.ByReleaseVolume Then
			Object.VariantExpressionOfInternalServices = Enums.VariantExpressionOfInternalServices.InQuantitativeTerms;
		EndIf;
	EndIf;
	
	// Fill in the required attributes in the Production tabular section
	For Each CurRow IN Object.Products Do
		
		PlannedCost = CurRow.PlannedCost;
		AmountOfPlanned = CurRow.AmountOfPlanned;
		Pricing.FillPlannedCost(CurRow, Object.Date);
		DataProcessorTabularSections.RecalculatePlannedSUM(CurRow);
		If CurRow.AmountOfPlanned = 0 Then
			CurRow.PlannedCost = PlannedCost;
			CurRow.AmountOfPlanned = AmountOfPlanned;
		EndIf;
		
		Object.FillGLAccountsAtRowTabParts(CurRow, "Products", True);
		CurRow.ProductsAndServicesCategory = CurRow.ProductsAndServices.ProductsAndServicesCategory;
		CurRow.Specification = OfficeProduction.DefineDefaultSpecification(CurRow.ProductsAndServices, Object.Date);
	EndDo;
	
	// Fill in the required attributes in the Services tabular section
	For Each CurRow IN Object.Services Do
		Pricing.FillPlannedCost(CurRow, Object.Date);
		DataProcessorTabularSections.RecalculatePlannedSUM(CurRow);
		Object.FillGLAccountsAtRowTabParts(CurRow, "Services", True);
		CurRow.ProductsAndServicesCategory = CurRow.ProductsAndServices.ProductsAndServicesCategory;
		CurRow.Specification = OfficeProduction.DefineDefaultSpecification(CurRow.ProductsAndServices, Object.Date);
	EndDo;
	
	// Fill in the required attributes in the Meterials tabular section
	For Each CurRow IN Object.Materials Do
		Object.FillGLAccountsAtRowTabParts(CurRow, "Materials", True);
		CurRow.ReflectionInUSN = Enums.ReflectionInUSN.Are Accepted;
		CurRow.CostsItem = CurRow.ProductsAndServices.CostsItem;
		CurRow.ProductsAndServicesCategory = CurRow.ProductsAndServices.ProductsAndServicesCategory;
	EndDo;
	
	If ObjectParameters &lt;&gt; Undefined Then
		ParametersOfTP = ObjectParameters.Get("ReturnWasteTabularSection");
	EndIf;
	
	// Fill in required attributes in the Recyclable waste tabular section
	For Each CurRow IN Object.ReturnWaste Do
		PricesTypePlannedPrimecost   = Constants.PricesTypePlannedPrimecostProductsAndServices.Get();
		CurrencyRegulatedAccounting = Constants.CurrencyOfRegulatedAccounting.Get();
		If ValueIsFilled(PricesTypePlannedPrimecost) Then
			CurRow.Price = Pricing.GetProductsAndServicesPrice(
				CurRow.ProductsAndServices,
				PricesTypePlannedPrimecost,
				Object.Date,
				CurrencyRegulatedAccounting,
				1
			);
		EndIf;
		CurRow.Amount = CurRow.Count * CurRow.Price;
		
		Object.FillGLAccountsAtRowTabParts(CurRow, "ReturnWaste", True);
		If ObjectParameters &lt;&gt; Undefined 
		   AND ParametersOfTP.Columns.Find("ProductInProcessing") &lt;&gt; Undefined
		   AND ParametersOfTP[CurRow.LineNumber - 1].ProductInProcessing = True Then
			CurRow.Account = ChartsOfAccounts.SelfSupporting.MaterialsAcceptedForProcessingInProduction;
		EndIf;
		CurRow.ProductsAndServicesCategory = CurRow.ProductsAndServices.ProductsAndServicesCategory;
		CurRow.CostsItem   = CurRow.ProductsAndServices.CostsItem;
		If Not ValueIsFilled(CurRow.CostsItem) Then
			CurRow.CostsItem = ExchangeNodeForDataImport.CostsItem;
		EndIf;
		
	EndDo;
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryAssembly</Source>
					<Receiver>DocumentRef.ReportProductionShift</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>22</Code>
							<Description>StructuralUnit --&gt; DepartmentCost</Description>
							<Order>300</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="DepartmentCost" Kind="Attribute" Type="CatalogRef.CompaniesDepartments"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
							<BeforeExport>Cancel = Source.StructuralUnit.StructuralUnitType &lt;&gt; Enums.StructuralUnitsTypes.Department;</BeforeExport>
						</Property>
						<Property>
							<Code>38</Code>
							<Description>ProductsStructuralUnit --&gt; Warehouse</Description>
							<Order>350</Order>
							<Source Name="ProductsStructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>Cancel = Source.ProductsStructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Department;</BeforeExport>
						</Property>
						<Property>
							<Code>36</Code>
							<Description> --&gt; UseMaterials</Description>
							<Order>400</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="UseMaterials" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsInventoryAssembly.Assembly Then
	Value = Source.Inventory.Count() &lt;&gt; 0;
Else
	Value = Source.Products.Count() &lt;&gt; 0;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>51</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>450</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>7</Code>
							<Description>Products --&gt; Products</Description>
							<Order>700</Order>
							<Source Name="Products" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>
Query = New Query;
Query.Text = 
"SELECT
|	InventoryAssemblyProducts.Ref AS Document,
|	InventoryAssemblyProducts.ProductsAndServices,
|	InventoryAssemblyProducts.ProductsAndServices.ProductsAndServicesCategory AS ProductsAndServicesCategory,
|	InventoryAssemblyProducts.Specification,
|	SUM(InventoryAssemblyProducts.Quantity) AS PlacesQuantity,
|	SUM(CASE
|			WHEN VALUETYPE(InventoryAssemblyProducts.MeasurementUnit) = Type(Catalog.UOM)
|					AND InventoryAssemblyProducts.MeasurementUnit.Factor &gt; 0
|				THEN InventoryAssemblyProducts.Count * InventoryAssemblyProducts.MeasurementUnit.Factor
|			ELSE InventoryAssemblyProducts.Count
|		END) AS Count,
|	CASE
|		WHEN InventoryAssemblyProducts.MeasurementUnit REFS Catalog.UOM
|			THEN InventoryAssemblyProducts.ProductsAndServices.MeasurementUnit
|		ELSE InventoryAssemblyProducts.MeasurementUnit
|	END AS MeasurementUnit,
|	CASE
|		WHEN InventoryAssemblyProducts.MeasurementUnit REFS Catalog.UOM
|			THEN InventoryAssemblyProducts.MeasurementUnit.Factor
|		ELSE 1
|	END AS Factor
|INTO TemporaryTableProduction
|FROM
|	Document.InventoryAssembly.Products AS InventoryAssemblyProducts
|WHERE
|	InventoryAssemblyProducts.Ref = &amp;Document
|
|GROUP BY
|	InventoryAssemblyProducts.Specification,
|	InventoryAssemblyProducts.ProductsAndServices,
|	InventoryAssemblyProducts.Ref,
|	CASE
|		WHEN InventoryAssemblyProducts.MeasurementUnit REFS Catalog.UOM
|			THEN InventoryAssemblyProducts.MeasurementUnit.Factor
|		ELSE 1
|	END,
|	CASE
|		WHEN InventoryAssemblyProducts.MeasurementUnit REFS Catalog.UOM
|			THEN InventoryAssemblyProducts.ProductsAndServices.MeasurementUnit
|		ELSE InventoryAssemblyProducts.MeasurementUnit
|	END,
|	InventoryAssemblyProducts.ProductsAndServices.ProductsAndServicesCategory
|;
|
|////////////////////////////////////////////////////////////////////////////////
|SELECT ALLOWED
|	Inventory.Recorder,
|	Inventory.ProductsAndServicesCorr AS Products,
|	Inventory.SpecificationCorr AS ProductionSpecification,
|	SUM(Inventory.Amount) AS CostAmount
|INTO TemporaryTableCost
|FROM
|	AccumulationRegister.Inventory AS Inventory
|WHERE
|	Inventory.Recorder = &amp;Document
|	AND Inventory.ProductionExpenses
|	AND Inventory.RecordType = VALUE(AccumulationRecordType.Expense)
|
|GROUP BY
|	Inventory.ProductsAndServicesCorr,
|	Inventory.SpecificationCorr,
|	Inventory.Recorder
|;
|
|////////////////////////////////////////////////////////////////////////////////
|SELECT
|	TemporaryTableProduction.ProductsAndServices AS ProductsAndServices,
|	TemporaryTableProduction.Specification AS Specification,
|	TemporaryTableProduction.PlacesQuantity AS PlacesQuantity,
|	TemporaryTableProduction.Count AS Count,
|	CASE
|		WHEN TemporaryTableCost.CostAmount IS NULL 
|			THEN 0
|		ELSE TemporaryTableCost.CostAmount / TemporaryTableProduction.Count
|	END AS PlannedCost,
|	TemporaryTableCost.CostAmount AS AmountOfPlanned,
|	TemporaryTableProduction.ProductsAndServicesCategory AS ProductsAndServicesCategory,
|	TemporaryTableProduction.MeasurementUnit AS MeasurementUnit,
|	TemporaryTableProduction.Factor AS Factor
|FROM
|	TemporaryTableProduction AS TemporaryTableProduction
|		LEFT JOIN TemporaryTableCost AS TemporaryTableCost
|		BY TemporaryTableProduction.Document = TemporaryTableCost.Recorder
|			AND TemporaryTableProduction.ProductsAndServices = TemporaryTableCost.Products
|			AND TemporaryTableProduction.Specification = TemporaryTableCost.ProductionSpecification";

If Source.OperationKind = Enums.OperationKindsInventoryAssembly.Disassembly Then
	Query.Text = StrReplace(Query.Text, "Document.InventoryAssembly.Products", "Document.InventoryAssembly.Inventory");
EndIf;

Query.SetParameter("Document", Source.Ref);
ObjectsCollection = Query.Execute().Unload();</BeforeProcessExport>
							<Property>
								<Code>8</Code>
								<Description> --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>9</Code>
								<Description> --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>10</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>11</Code>
								<Description> --&gt; Specification</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Specification" Kind="Attribute" Type="CatalogRef.ProductsAndServicesSpecifications"/>
								<ConversionRuleCode>SpecificationsProductsAndServices                          </ConversionRuleCode>
							</Property>
							<Property>
								<Code>23</Code>
								<Description> --&gt; Count</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>24</Code>
								<Description> --&gt; Factor</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>25</Code>
								<Description> --&gt; ProductsAndServicesCategory</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
								<BeforeExport>Value = CollectionObject.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
							</Property>
							<Property>
								<Code>52</Code>
								<Description> --&gt; PlannedCost</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="PlannedCost" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>53</Code>
								<Description> --&gt; AmountOfPlanned</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="AmountOfPlanned" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Group>
							<Code>17</Code>
							<Description>Inventory --&gt; Services</Description>
							<Order>750</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Services" Kind="TabularSection"/>
							<BeforeProcessExport>Execute(Algorithms.GenerateTableOfServices);</BeforeProcessExport>
							<Property>
								<Code>18</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>Count --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>Specification --&gt; Specification</Description>
								<Order>150</Order>
								<Source Name="Specification" Kind="Attribute" Type="CatalogRef.Specifications"/>
								<Receiver Name="Specification" Kind="Attribute" Type="CatalogRef.ProductsAndServicesSpecifications"/>
								<ConversionRuleCode>SpecificationsProductsAndServices                          </ConversionRuleCode>
							</Property>
							<Property>
								<Code>26</Code>
								<Description> --&gt; ProductsAndServicesCategory</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
								<BeforeExport>Value = CollectionObject.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>12</Code>
							<Description>Disposals --&gt; ReturnWaste</Description>
							<Order>800</Order>
							<Source Name="Disposals" Kind="TabularSection"/>
							<Receiver Name="ReturnWaste" Kind="TabularSection"/>
							<Property>
								<Code>14</Code>
								<Description>Count --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>27</Code>
								<Description> --&gt; ProductsAndServicesCategory</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
								<BeforeExport>Value = CollectionObject.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
							</Property>
							<Property>
								<Code>37</Code>
								<Description>Batch --&gt;</Description>
								<Order>250</Order>
								<Source Name="Batch" Kind="Attribute" Type="CatalogRef.ProductsAndServicesBatches"/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductInProcessing</ParameterForTransferName>
								<BeforeExport>If ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.CommissionMaterials Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>40</Code>
							<Description>Inventory --&gt; Materials</Description>
							<Order>850</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Materials" Kind="TabularSection"/>
							<BeforeProcessExport>If ValueIsFilled(Source.InventoryStructuralUnit) Then
	If Source.OperationKind = Enums.OperationKindsInventoryAssembly.Assembly Then
		Execute(Algorithms.GenerateTableOfProducts);
	Else
		ObjectsCollection = New ValueTable;
		ObjectsCollection.Columns.Add("MeasurementUnit");
		ObjectsCollection.Columns.Add("PlacesQuantity");
		ObjectsCollection.Columns.Add("Count");
		ObjectsCollection.Columns.Add("ProductsAndServices");
		ObjectsCollection.Columns.Add("Specification");
		
		For Each TableRow IN Source.Products Do
			NewRow = ObjectsCollection.Add();
			NewRow.MeasurementUnit = TableRow.MeasurementUnit;
			NewRow.PlacesQuantity = TableRow.Count;
			NewRow.Count = TableRow.Count;
			NewRow.ProductsAndServices = TableRow.ProductsAndServices;
			NewRow.Specification = TableRow.Specification;
		EndDo;
		
	EndIf;
EndIf;</BeforeProcessExport>
							<Property>
								<Code>41</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>42</Code>
								<Description> --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>43</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>150</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>44</Code>
								<Description> --&gt; ProductsAndServicesCategory</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<BeforeExport>Value = CollectionObject.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
							</Property>
							<Property>
								<Code>45</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>250</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>46</Code>
								<Description> --&gt; Factor</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>TransferOfMaterialsInOperation</Code>
					<Description>Document: Move inventories</Description>
					<Order>150</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	// Fill in the required attributes in the Coverall tabular section
	For Each CurRow IN Object.Working Clothes Do
	
		Query = New Query();
		Query.Text = 
		"SELECT
		|	UsePurpose.Ref AS PurposeUse
		|FROM
		|	Catalog.UsePurpose AS UsePurpose
		|WHERE
		|	UsePurpose.Owner = &amp;Owner
		|	AND UsePurpose.CostsReflectionMethod = &amp;CostsReflectionMethod";
		Query.SetParameter("Owner", CurRow.ProductsAndServices);
		Query.SetParameter("CostsReflectionMethod", ExchangeNodeForDataImport.CostsReflectionMethod);
		
		Selection = Query.Execute().Select();
		If Selection.Next() Then
			CurRow.PurposeUse = Selection.PurposeUse;
		EndIf;
		
		Object.FillGLAccountsAtRowTabPartsRegl(CurRow);
		
		If Not ValueIsFilled(CurRow.ReflectionInUSN) Then 
			ReflectInTaxEXEMPTRegistered = (TaxAccountingCSS.ApplicationUSN(Object.Company, Object.Date) 
										AND (NOT TaxAccountingCSS.ApplicationCSSNIncome(Object.Company, Object.Date)));
			If ReflectInTaxEXEMPTRegistered Then
				CurRow.ReflectionInUSN = Enums.ReflectionInUSN.Are Accepted;
			EndIf;
		EndIf;
	
	EndDo;
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryTransfer</Source>
					<Receiver>DocumentRef.TransferOfMaterialsInOperation</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>StructuralUnitPayee --&gt; Location</Description>
							<Order>300</Order>
							<Source Name="StructuralUnitPayee" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Location" Kind="Attribute" Type="CatalogRef.CompaniesDepartments"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>350</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>400</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>7</Code>
							<Description>Inventory --&gt; Working Clothes</Description>
							<Order>450</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Working Clothes" Kind="TabularSection"/>
							<Property>
								<Code>8</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>9</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>12</Code>
								<Description> --&gt; Ind</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Ind" Kind="Attribute" Type="CatalogRef.Individuals"/>
								<BeforeExport>Value = Source.StructuralUnitPayee.FRP;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>CancellationOfService</Code>
					<Description>Document: WriteOff inventories</Description>
					<Order>200</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	// Fill in the required attributes in the Coverall tabular section
	For Each CurRow IN Object.Working Clothes Do
		Object.FillGLAccountsAtRowTabParts(CurRow)
	EndDo;
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryWriteOff</Source>
					<Receiver>DocumentRef.CancellationOfService</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>100</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>150</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>200</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>250</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>300</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>StructuralUnit --&gt; CounterpartyDepartment</Description>
							<Order>350</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="CounterpartyDepartment" Kind="Attribute" Type="CatalogRef.CompaniesDepartments"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>13</Code>
							<Description> --&gt; ExpensesWriteOffMethod</Description>
							<Order>400</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="ExpensesWriteOffMethod" Kind="Attribute" Type="EnumRef.ExpensesWriteoffMethods"/>
							<BeforeExport>Expression = "Enums.WaysWriteOffExpenses.ByUseAssignment";</BeforeExport>
						</Property>
						<Group>
							<Code>8</Code>
							<Description>Inventory --&gt; Working Clothes</Description>
							<Order>450</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Working Clothes" Kind="TabularSection"/>
							<Property>
								<Code>9</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>12</Code>
								<Description> --&gt; Ind</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Ind" Kind="Attribute" Type="CatalogRef.Individuals"/>
								<BeforeExport>Value = Source.StructuralUnit.FRP;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReturnOfMaterials</Code>
					<Description>Document: Move inventories</Description>
					<Order>250</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	// Fill in the accounts of the tax accounting and accounting in the Coverall tabular section
	Object.FillGLAccountsInTabPart(Object.Working Clothes);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryTransfer</Source>
					<Receiver>DocumentRef.ReturnOfMaterials</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>StructuralUnit --&gt; CounterpartyDepartment</Description>
							<Order>300</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="CounterpartyDepartment" Kind="Attribute" Type="CatalogRef.CompaniesDepartments"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>StructuralUnitPayee --&gt; Warehouse</Description>
							<Order>350</Order>
							<Source Name="StructuralUnitPayee" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>400</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>9</Code>
							<Description>Inventory --&gt; Working Clothes</Description>
							<Order>450</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Working Clothes" Kind="TabularSection"/>
							<Property>
								<Code>10</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>12</Code>
								<Description> --&gt; Ind</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Ind" Kind="Attribute" Type="CatalogRef.Individuals"/>
								<BeforeExport>Value = Source.StructuralUnit.FRP;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
			</Group>
			<Group>
				<Code>MutualSettlements</Code>
				<Description>MutualSettlements</Description>
				<Order>350</Order>
				<Rule>
					<Code>DebtAdjustment</Code>
					<Description>:</Description>
					<Order>50</Order>
					<AfterImport>If Object.AmountDebt.Count() &gt; 0
	AND ValueIsFilled(Object.AmountDebt[0].CounterpartyContract) Then
		
	Object.DocumentCurrency     = Object.AmountDebt[0].CounterpartyContract.SettlementsCurrency;
	Object.ExchangeRateDocument	   = Object.AmountDebt[0].MutualSettlementsExchangeRate;
	Object.MultiplicityOfDocument  = Object.AmountDebt[0].MutualSettlementsCurrencyRate;
		
EndIf;	
	
For Each TSRow IN Object.AmountDebt Do

	If ValueIsFilled(TSRow.GlAccountCalculations) Then
		Continue;
	EndIf;
	
	GLAccounts = AccountingAccountingCalculationsWithCounterparties.GetAccountsCalculationsWithCounterparty(Object.Company, Object.CounterpartyDebitor, TSRow.CounterpartyContract);
	
	FillAccountsAccountingAdvances = False;
	ParametersOfTP = ObjectParameters.Get("AmountDebtTabularSection");
	If ParametersOfTP &lt;&gt; Undefined 
		AND ParametersOfTP.Columns.Find("AdvanceFlag") &lt;&gt; Undefined
		AND ParametersOfTP[TSRow.LineNumber - 1].AdvanceFlag = True Then
		
		FillAccountsAccountingAdvances = True;
	EndIf;																					
	
	If FillAccountsAccountingAdvances Then
		
		If TSRow.CounterpartyContract.ContractKind = Enums.ContractKindsCounterparties.WithVendor
			OR TSRow.CounterpartyContract.ContractKind = Enums.ContractKindsCounterparties.FromPrincipal Then
			TSRow.GlAccountCalculations = GLAccounts.AccountAdvances;
		Else
			TSRow.GlAccountCalculations = GLAccounts.AccountAdvancesCustomer;
		EndIf;
		
	Else
		
		If TSRow.CounterpartyContract.ContractKind = Enums.ContractKindsCounterparties.WithVendor
			OR TSRow.CounterpartyContract.ContractKind = Enums.ContractKindsCounterparties.FromPrincipal Then
			TSRow.GlAccountCalculations = GLAccounts.AccountCalculations;
		Else
			TSRow.GlAccountCalculations = GLAccounts.CustomerCalculationsAccount;
		EndIf;
		
	EndIf;
	
EndDo;

If Object.OperationKind = Enums.OperationKindsDebtAdjustment.DebtTransfer AND ValueIsFilled(Object.CounterpartyContract) Then
	
	GLAccounts = AccountingAccountingCalculationsWithCounterparties.GetAccountsCalculationsWithCounterparty(Object.Company, Object.CounterpartyCreditor, Object.CounterpartyContract);
	
	If Object.CounterpartyContract.ContractKind = Enums.ContractKindsCounterparties.WithVendor Then
		
		If Not ValueIsFilled(Object.AccountDr) Then
			Object.AccountDr = GLAccounts.AccountAdvances;
		EndIf;
		If Not ValueIsFilled(Object.AccountCr) Then
			Object.AccountCr = GLAccounts.AccountCalculations;
		EndIf;
		
	ElsIf Object.CounterpartyContract.ContractKind = Enums.ContractKindsCounterparties.WithCustomer 
		OR Object.CounterpartyContract.ContractKind = Enums.ContractKindsCounterparties.WithAgent Then
		
		If Not ValueIsFilled(Object.AccountDr) Then
			Object.AccountDr = GLAccounts.CustomerCalculationsAccount;
		EndIf;
		If Not ValueIsFilled(Object.AccountCr) Then
			Object.AccountCr = GLAccounts.AccountAdvancesCustomer;
		EndIf;
		
	ElsIf Object.CounterpartyContract.ContractKind = Enums.ContractKindsCounterparties.FromPrincipal Then
		
		If Not ValueIsFilled(Object.AccountDr) Then
			Object.AccountDr = GLAccounts.SettlementsAccountWithPrincipal;
		EndIf;
		If Not ValueIsFilled(Object.AccountCr) Then
			Object.AccountCr = GLAccounts.SettlementsAccountWithPrincipal;
		EndIf;
		
	EndIf;
	
ElsIf Object.OperationKind = Enums.OperationKindsDebtAdjustment.DebtCancellation Then
	
	If Not ValueIsFilled(Object.AccountDr) Then
		Object.AccountDr = ChartsOfAccounts.SelfSupporting.OtherExpenses;
	EndIf;
	If Not ValueIsFilled(Object.AccountCr) Then
		Object.AccountCr = ChartsOfAccounts.SelfSupporting.OtherIncome;
	EndIf;
	
EndIf;

TabAmount         = Object.AmountDebt.Unload();
TabAmount.GroupBy("KindOfDebt","Amount");

Object.DebtDrAmount = 0;
Object.CtDebtAmount = 0;

For Each TableRow IN TabAmount Do
	
	If  TableRow.KindOfDebt = Enums.KindsOfDebt.Accounts receivable Then
		Object.DebtDrAmount  = Object.DebtDrAmount+TableRow.Amount;
	ElsIf  TableRow.KindOfDebt = Enums.KindsOfDebt.Creditor Then
		Object.CtDebtAmount = Object.CtDebtAmount+TableRow.Amount;
	EndIf;
	
EndDo;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.Netting</Source>
					<Receiver>DocumentRef.DebtAdjustment</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsSettlement"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsDebtAdjustment"/>
						</Property>
						<Property Search="true">
							<Code>4</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>150</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>Company --&gt; Company</Description>
							<Order>200</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>350</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>CounterpartySource --&gt; CounterpartyDebitor</Description>
							<Order>400</Order>
							<Source Name="CounterpartySource" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="CounterpartyDebitor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsNetting.VendorDebtAdjustment Then
	Value = Source.Counterparty;	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Counterparty --&gt; CounterpartyCreditor</Description>
							<Order>450</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="CounterpartyCreditor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsNetting.CustomerDebtAdjustment 
	OR Source.OperationKind = Enums.OperationKindsNetting.VendorDebtAdjustment Then
	
	Empty = True;	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>27</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>500</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Group>
							<Code>10</Code>
							<Description>--&gt; AmountDebt</Description>
							<Order>550</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="AmountDebt" Kind="TabularSection"/>
							<BeforeProcessExport>//AdvanceFlag = False;
Execute(Algorithms.GenerateTabularSectionAmountDebt);</BeforeProcessExport>
							<Property>
								<Code>11</Code>
								<Description>--&gt; KindOfDebt</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="KindOfDebt" Kind="Attribute" Type="EnumRef.DebtKinds"/>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>--&gt; CounterpartyContract</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>TabularSectionName = "Debitor";
Execute(Algorithms.GenerateStructureOfMutualCountsContract);</BeforeExport>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>--&gt; Deal</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>--&gt; AmountMutualSettlements</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>16</Code>
								<Description>--&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>14</Code>
								<Description>--&gt; MutualSettlementsExchangeRate</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>--&gt; MutualSettlementsCurrencyRate</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>50</Code>
								<Description>--&gt; AdvanceFlag</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>AdvanceFlag</ParameterForTransferName>
								<BeforeExport>Value = CollectionObject.AdvanceFlag;</BeforeExport>
							</Property>
						</Group>
						<Property Disable="true">
							<Code>28</Code>
							<Description>SettlementsAmount --&gt;</Description>
							<Order>600</Order>
							<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="" Kind=""/>
						</Property>
						<Group Disable="true">
							<Code>30</Code>
							<Description>Debitor --&gt;</Description>
							<Order>650</Order>
							<Source Name="Debitor" Kind="TabularSection"/>
							<Receiver Name="" Kind=""/>
							<Property Disable="true">
								<Code>31</Code>
								<Description>Contract --&gt;</Description>
								<Order>50</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>32</Code>
								<Description>Document --&gt;</Description>
								<Order>100</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>33</Code>
								<Description>Order --&gt;</Description>
								<Order>150</Order>
								<Source Name="Order" Kind="Attribute" Type="DocumentRef.CustomerOrder"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>34</Code>
								<Description>Multiplicity --&gt;</Description>
								<Order>200</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>35</Code>
								<Description>ExchangeRate --&gt;</Description>
								<Order>250</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>36</Code>
								<Description>AdvanceFlag --&gt;</Description>
								<Order>300</Order>
								<Source Name="AdvanceFlag" Kind="Attribute" Type="Boolean"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>37</Code>
								<Description>SettlementsAmount --&gt;</Description>
								<Order>350</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>38</Code>
								<Description>AccountingAmount --&gt;</Description>
								<Order>400</Order>
								<Source Name="AccountingAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>39</Code>
								<Description>InvoiceForPayment --&gt;</Description>
								<Order>450</Order>
								<Source Name="InvoiceForPayment" Kind="Attribute"/>
								<Receiver Name="" Kind=""/>
							</Property>
						</Group>
						<Group Disable="true">
							<Code>40</Code>
							<Description>Creditor --&gt;</Description>
							<Order>700</Order>
							<Source Name="Creditor" Kind="TabularSection"/>
							<Receiver Name="" Kind=""/>
							<Property Disable="true">
								<Code>41</Code>
								<Description>Contract --&gt;</Description>
								<Order>50</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>42</Code>
								<Description>Document --&gt;</Description>
								<Order>100</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>43</Code>
								<Description>Order --&gt;</Description>
								<Order>150</Order>
								<Source Name="Order" Kind="Attribute" Type="DocumentRef.PurchaseOrder"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>44</Code>
								<Description>Multiplicity --&gt;</Description>
								<Order>200</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>45</Code>
								<Description>ExchangeRate --&gt;</Description>
								<Order>250</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>46</Code>
								<Description>AdvanceFlag --&gt;</Description>
								<Order>300</Order>
								<Source Name="AdvanceFlag" Kind="Attribute" Type="Boolean"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>47</Code>
								<Description>SettlementsAmount --&gt;</Description>
								<Order>350</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>48</Code>
								<Description>AccountingAmount --&gt;</Description>
								<Order>400</Order>
								<Source Name="AccountingAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>49</Code>
								<Description>InvoiceForPayment --&gt;</Description>
								<Order>450</Order>
								<Source Name="InvoiceForPayment" Kind="Attribute"/>
								<Receiver Name="" Kind=""/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
			</Group>
		</Group>
	</ObjectConversionRules>
	<DataUnloadRules>
		<Group Disable="false">
			<Code>Catalogs</Code>
			<Description>Catalogs</Description>
			<Order>50</Order>
			<Rule Disable="false">
				<Code>Currencies</Code>
				<Description>Currencies catalog</Description>
				<Order>50</Order>
				<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.Currencies</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>CounterpartyContracts</Code>
				<Description>Catalog "Counterparty's Contracts"</Description>
				<Order>100</Order>
				<Description>Kind treaty in PSU defined type first exported to to it document.</Description>
				<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.CounterpartyContracts</SelectionObject>
				<BeforeObjectExport>If Object.Owner.DoOperationsByContracts &lt;&gt; True Then
	OCRName = "CounterpartyContracts";
Else
	OCRName = "CounterpartyContractsSearchByIdIdentificator";
EndIf;</BeforeObjectExport>
			</Rule>
			<Rule Disable="false">
				<Code>Counterparties</Code>
				<Description>Catalog "Counterparties"</Description>
				<Order>150</Order>
				<Description>Together with catalog is exported contact info.</Description>
				<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.Counterparties</SelectionObject>
				<AfterObjectExport>Execute(Algorithms.ExportContactInformation);</AfterObjectExport>
			</Rule>
			<Rule Disable="false">
				<Code>Companies</Code>
				<Description>Companies catalog</Description>
				<Order>200</Order>
				<Description>Together with catalog is exported contact info.</Description>
				<ConversionRuleCode>Companies                                       </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.Companies</SelectionObject>
				<AfterObjectExport>Execute(Algorithms.ExportContactInformation);</AfterObjectExport>
			</Rule>
			<Rule Disable="false">
				<Code>DocumentsProvingIdentity</Code>
				<Description>Catalog "Identity papers"</Description>
				<Order>250</Order>
				<ConversionRuleCode>DocumentsProvingIdentity                   </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.IndividualsDocumentsKinds</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>UOMClassifier</Code>
				<Description>Catalog "UOM classifier"</Description>
				<Order>300</Order>
				<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.UOMClassifier</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>ProductsAndServices</Code>
				<Description>Catalog "ProductsAndServices"</Description>
				<Order>350</Order>
				<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.ProductsAndServices</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>ProductsAndServicesCategories</Code>
				<Description>Catalog "Products and services categories"</Description>
				<Order>400</Order>
				<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.ProductsAndServicesCategories</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>CCDNumbers</Code>
				<Description>Catalog "CCD numbers"</Description>
				<Order>450</Order>
				<ConversionRuleCode>CCDNumbers                                         </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.CCDNumbers</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>CashFlowItems</Code>
				<Description>Catalog "Cash flow items"</Description>
				<Order>500</Order>
				<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.CashFlowItems</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>Individuals</Code>
				<Description>Catalog "Individuals"</Description>
				<Order>550</Order>
				<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.Individuals</SelectionObject>
				<AfterObjectExport>Execute(Algorithms.ExportContactInformation);</AfterObjectExport>
			</Rule>
			<Rule Disable="false">
				<Code>BankAccounts</Code>
				<Description>Catalog "Bank accounts"</Description>
				<Order>600</Order>
				<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.BankAccounts</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>StructuralUnits</Code>
				<Description>Structural units catalog</Description>
				<Order>650</Order>
				<Description>For export structural units From type "Warehouse", "Retail", "Retail accrual accounting" used OCR "Warehouses". For the rest used OCR "UnitCompanies"</Description>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.StructuralUnits</SelectionObject>
				<BeforeObjectExport>If Object.StructuralUnitType = Enums.StructuralUnitsTypes.Warehouse
 OR Object.StructuralUnitType = Enums.StructuralUnitsTypes.Retail
 OR Object.StructuralUnitType = Enums.StructuralUnitsTypes.RetailAccrualAccounting Then
	OCRName = "Warehouses";
Else
	OCRName = "UnitCompanies";
EndIf;</BeforeObjectExport>
			</Rule>
			<Rule Disable="false">
				<Code>Specifications</Code>
				<Description>Catalog "Specifications"</Description>
				<Order>700</Order>
				<ConversionRuleCode>SpecificationsProductsAndServices                          </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.Specifications</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>PriceKinds</Code>
				<Description>Catalog "Price kinds"</Description>
				<Order>750</Order>
				<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.PriceKinds</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>ContactInformationTypes</Code>
				<Description>ContactInformationTypes</Description>
				<Order>800</Order>
				<ConversionRuleCode>ContactInformationTypes                          </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.ContactInformationTypes</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>AlcoholicProductsKinds</Code>
				<Description>Kinds alcohol products</Description>
				<Order>850</Order>
				<ConversionRuleCode>AlcoholicProductsKinds                          </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.AlcoholicProductsKinds</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>AlcoholicProductsVendorLicenses</Code>
				<Description>Licenses vendors alcohol products</Description>
				<Order>900</Order>
				<ConversionRuleCode>AlcoholicProductsVendorLicenses           </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.AlcoholicProductsVendorLicenses</SelectionObject>
				<BeforeObjectExport>DataSource = Object;
IsRemoval = False;
Execute(Algorithms.ExportAlcoholProductsLicenseVendor);
Cancel = True;</BeforeObjectExport>
			</Rule>
		</Group>
		<Group Disable="false">
			<Code>Documents</Code>
			<Description>Documents</Description>
			<Order>100</Order>
			<Group Disable="false">
				<Code>MarketingAndSales</Code>
				<Description>MarketingAndSales</Description>
				<Order>1450</Order>
				<Rule Disable="false">
					<Code>AcceptanceCertificate</Code>
					<Description>Document "Acceptance certificate"</Description>
					<Order>200</Order>
					<ConversionRuleCode>ActOnProvisionOfIndustrialServices                </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.AcceptanceCertificate</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>CustomerInvoice</Code>
					<Description>Document "Customer invoice"</Description>
					<Order>250</Order>
					<Description>For documents From kind Operations "Sale to customer" and "Sale to agent" used OCR "GoodsServicesSale".
For documents From kind Operations "Transfer to processing" used OCR "TransferOfProducts".
For documents From kind Operations "Return to principal", "Return from processing", "Return to vendor" used OCR "ReturnProductsToSupplier".</Description>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.CustomerInvoice</SelectionObject>
					<BeforeObjectExport>If Object.OperationKind = Enums.OperationKindsCustomerInvoice.SaleToCustomer
 OR Object.OperationKind = Enums.OperationKindsCustomerInvoice.TransferForCommission Then
	OCRName = "GoodsServicesSale";
ElsIf Object.OperationKind = Enums.OperationKindsCustomerInvoice.TransferToProcessing Then
	OCRName = "TransferOfProducts";
ElsIf Object.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToPrincipal
	  OR Object.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnFromProcessing
	  OR Object.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToVendor Then
	OCRName = "ReturnProductsToSupplier";
EndIf;</BeforeObjectExport>
				</Rule>
				<Rule Disable="false">
					<Code>AgentReport</Code>
					<Description>Document "Agent report"</Description>
					<Order>400</Order>
					<ConversionRuleCode>AgentSalesReport                        </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.AgentReport</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>InvoiceForPayment</Code>
					<Description>Document "Invoice for payment"</Description>
					<Order>450</Order>
					<ConversionRuleCode>InvoiceForPayment                            </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.InvoiceForPayment</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>CustomerInvoiceNote</Code>
					<Description>Document "Invoice note"</Description>
					<Order>1400</Order>
					<ConversionRuleCode>CustomerInvoiceNote                               </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.CustomerInvoiceNote</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>ProcessingReport</Code>
					<Description>Document "Processing report"</Description>
					<Order>1700</Order>
					<ConversionRuleCode>ImplementationServicesForProcessing                      </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.ProcessingReport</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>WorkOrder</Code>
					<Description>CustomerOrder</Description>
					<Order>1800</Order>
					<ConversionRuleCode>JobOrderActOnProvisionOfIndustrialServices      </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.CustomerOrder</SelectionObject>
					<BeforeObjectExport>If Object.Inventory.Count() &gt; 0 Then
	DumpByRule(
		Object,
		,
		,
		,
		"JobOrderImplementationProductsServices"
	);
EndIf;

If Object.ConsumerMaterials.Count() &gt; 0
 OR Object.Materials.Count() &gt; 0 Then
	DumpByRule(
		Object,
		,
		,
		,
		"JobOrderRequirementSlip"
	);
EndIf;</BeforeObjectExport>
				</Rule>
			</Group>
			<Group Disable="false">
				<Code>ProcurementAndPurchasing</Code>
				<Description>ProcurementAndPurchasing</Description>
				<Order>1500</Order>
				<Rule Disable="false">
					<Code>ExpenseReport</Code>
					<Description>Document "Expense report"</Description>
					<Order>50</Order>
					<ConversionRuleCode>ExpenseReport                                    </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.ExpenseReport</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>SupplierInvoiceNote</Code>
					<Description>Document "Customer invoice note received"</Description>
					<Order>100</Order>
					<ConversionRuleCode>SupplierInvoiceNote                             </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.SupplierInvoiceNote</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>SupplierInvoice</Code>
					<Description>Document "Supplier invoice"</Description>
					<Order>300</Order>
					<Description>For documents From kind Operations "Return from customer", "Return from consignee" used OCR "ReturnOfProductsFromCustomer".
For documents From kind Operations "Receipt to consignement", "Receipt to processing", "Receipt from vendor" used OCR "ReceiptOfGoodsAndServices".</Description>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.SupplierInvoice</SelectionObject>
					<BeforeObjectExport>If Object.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromCustomer
 OR Object.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromAgent Then
	OCRName = "ReturnOfProductsFromCustomer";
ElsIf Object.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionForCommission
	  OR Object.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionIntoProcessing
	  OR Object.OperationKind = Enums.OperationKindsSupplierInvoice.ReceiptFromVendor Then
	OCRName = "ReceiptOfGoodsAndServices";
EndIf;</BeforeObjectExport>
				</Rule>
				<Rule Disable="false">
					<Code>ReportToPrincipal</Code>
					<Description>Document "Principal report"</Description>
					<Order>550</Order>
					<ConversionRuleCode>SalesReportToPrincipal                           </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.ReportToPrincipal</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>AdditionalCosts</Code>
					<Description>Document "Additional costs"</Description>
					<Order>600</Order>
					<ConversionRuleCode>ReceiptOfAdditionalCosts                            </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.AdditionalCosts</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>SubcontractorReport</Code>
					<Description>Document "Subcontractor report"</Description>
					<Order>700</Order>
					<ConversionRuleCode>ReceiptOfProcessing                          </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.SubcontractorReport</SelectionObject>
				</Rule>
			</Group>
			<Group Disable="false">
				<Code>AccountingInventory</Code>
				<Description>AccountingInventory</Description>
				<Order>1550</Order>
				<Rule Disable="false">
					<Code>InventoryTransfer</Code>
					<Description>Document "Inventory transfer"</Description>
					<Order>650</Order>
					<Description>In Dependencies from type Operations and type structural units used OCR "ProductTransfer", "RequestInvoice", "TransferOfMaterialsInOperation", "ReturnOfMaterials".</Description>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.InventoryTransfer</SelectionObject>
					<BeforeObjectExport>If Object.OperationKind = Enums.OperationKindsInventoryTransfer.Move
	
	AND (Object.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Warehouse
	OR Object.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Retail
	OR Object.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.RetailAccrualAccounting)
	
	AND (Object.StructuralUnitPayee.StructuralUnitType = Enums.StructuralUnitsTypes.Warehouse
	OR Object.StructuralUnitPayee.StructuralUnitType = Enums.StructuralUnitsTypes.Retail
	OR Object.StructuralUnitPayee.StructuralUnitType = Enums.StructuralUnitsTypes.RetailAccrualAccounting) Then 
  
  	OCRName = "ProductTransfer";
  
ElsIf Object.OperationKind = Enums.OperationKindsInventoryTransfer.Move
	AND Object.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Warehouse
	AND Object.StructuralUnitPayee.StructuralUnitType = Enums.StructuralUnitsTypes.Department Then
		
	OCRName = "RequestInvoice";
	
ElsIf Object.OperationKind = Enums.OperationKindsInventoryTransfer.WriteOffToExpenses
	AND Object.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Warehouse
	AND Object.StructuralUnitPayee.StructuralUnitType = Enums.StructuralUnitsTypes.Department Then
	
	OCRName = "RequestInvoice";
	
ElsIf Object.OperationKind = Enums.OperationKindsInventoryTransfer.TransferToOperation Then
	
	OCRName = "TransferOfMaterialsInOperation";
	
ElsIf Object.OperationKind = Enums.OperationKindsInventoryTransfer.ReturnFromExploitation Then
	
	OCRName = "ReturnOfMaterials";
	
EndIf;</BeforeObjectExport>
				</Rule>
				<Rule Disable="false">
					<Code>InventoryReconciliation</Code>
					<Description>Document "Inventory reconciliation"</Description>
					<Order>750</Order>
					<ConversionRuleCode>ProductsAtWarehouseReconciliation                     </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.InventoryReconciliation</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>InventoryReceipt</Code>
					<Description>Document "Inventory receiving"</Description>
					<Order>800</Order>
					<ConversionRuleCode>ProductsPosting                              </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.InventoryReceipt</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>InventoryWriteOff</Code>
					<Description>Document "Inventory write off"</Description>
					<Order>850</Order>
					<Description>In Dependencies from type structural items and flag write-off inventories from operation used OCR "ProductsWriteOff", "CancellationOfService".</Description>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.InventoryWriteOff</SelectionObject>
					<BeforeObjectExport>
If (Object.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Warehouse
	OR Object.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Retail)
	AND Not Object.RetireInventoryFromOperation Then
	
	OCRName = "ProductsWriteOff";
	
ElsIf Object.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Department
	AND Object.RetireInventoryFromOperation Then
	
	OCRName = "CancellationOfService";
	
EndIf;</BeforeObjectExport>
				</Rule>
			</Group>
			<Group Disable="false">
				<Code>WorksServicesProduction</Code>
				<Description>WorksServicesProduction</Description>
				<Order>1600</Order>
				<Rule Disable="false">
					<Code>ReportProductionShift</Code>
					<Description>Document "Production"</Description>
					<Order>1900</Order>
					<ConversionRuleCode>ReportProductionShift                          </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.InventoryAssembly</SelectionObject>
				</Rule>
			</Group>
			<Group Disable="false">
				<Code>CashAssets</Code>
				<Description>CashAssets</Description>
				<Order>1650</Order>
				<Rule Disable="false">
					<Code>PaymentReceipt</Code>
					<Description>Document "Payment receipt"</Description>
					<Order>1200</Order>
					<ConversionRuleCode>ReceiptOnBankAccount                        </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.PaymentReceipt</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>PaymentExpense</Code>
					<Description>Document "Payment expense"</Description>
					<Order>1250</Order>
					<ConversionRuleCode>WriteOffFromCurrentAccount                          </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.PaymentExpense</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>CashReceipt</Code>
					<Description>Document "Petty cash receipt"</Description>
					<Order>1300</Order>
					<ConversionRuleCode>ReceiptCashOrder                            </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.CashReceipt</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>CashPayment</Code>
					<Description>Document "Cash payment"</Description>
					<Order>1350</Order>
					<ConversionRuleCode>ExpenseCashOrder                            </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.CashPayment</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>PaymentOrder</Code>
					<Description>Document "Payment order"</Description>
					<Order>1700</Order>
					<ConversionRuleCode>PaymentOrder                                </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.PaymentOrder</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>CashTransfer</Code>
					<Description>Move money</Description>
					<Order>1750</Order>
					<ConversionRuleCode>MovingDSReceiptCashOrder               </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.CashTransfer</SelectionObject>
					<BeforeObjectExport> If Object.CashCRType = Enums.CashAssetTypes.Noncash
	 AND Object.CashAssetsTypePayee = Enums.CashAssetTypes.Cash Then
	 
	 OCRName = "MovingDSReceiptCashOrder";
	 
 ElsIf Object.CashCRType = Enums.CashAssetTypes.Cash
	 AND Object.CashAssetsTypePayee = Enums.CashAssetTypes.Noncash Then
	 
	 OCRName = "MovingDCExpenseCashOrder";
	 	 
 ElsIf Object.CashCRType = Enums.CashAssetTypes.Noncash
	 AND Object.CashAssetsTypePayee = Enums.CashAssetTypes.Noncash Then
	 
	 OCRName = "MovingCADirectCurrentAccount";
	 
 Else
	 Cancel = True;
 EndIf;</BeforeObjectExport>
				</Rule>
			</Group>
			<Group Disable="false">
				<Code>RetailSales</Code>
				<Description>RetailSales</Description>
				<Order>1750</Order>
				<Rule Disable="false">
					<Code>RetailReport</Code>
					<Description>Document "Retail report"</Description>
					<Order>1700</Order>
					<ConversionRuleCode>RetailReport                           </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.RetailReport</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>RetailRevaluation</Code>
					<Description>Document "Retail revaluation (amount accounting)"</Description>
					<Order>1700</Order>
					<ConversionRuleCode>ReestimationOfProductsInRetail                         </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.RetailRevaluation</SelectionObject>
				</Rule>
			</Group>
			<Group Disable="false">
				<Code>MutualSettlements</Code>
				<Description>MutualSettlements</Description>
				<Order>1800</Order>
				<Rule Disable="false">
					<Code>Netting</Code>
					<Description>Adjustment debt</Description>
					<Order>50</Order>
					<ConversionRuleCode>DebtAdjustment                                </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.Netting</SelectionObject>
				</Rule>
			</Group>
		</Group>
		<Group Disable="false">
			<Code>InformationRegisters</Code>
			<Description>InformationRegisters</Description>
			<Order>150</Order>
			<Rule Disable="false">
				<Code>IndividualsDescriptionFull</Code>
				<Description>Register information "Full name of individuals"</Description>
				<Order>50</Order>
				<ConversionRuleCode>IndividualsDescriptionFull                                         </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>InformationRegisterRecord.IndividualsDescriptionFull</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>PassportDataNatPersons</Code>
				<Description>Register information "Passport data ind. persons"</Description>
				<Order>100</Order>
				<ConversionRuleCode>PassportDataNatPersons                            </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>InformationRegisterRecord.IndividualsDocuments</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>CurrencyRates</Code>
				<Description>Register information "Currency rates"</Description>
				<Order>200</Order>
				<ConversionRuleCode>CurrencyRates                                        </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>InformationRegisterRecord.CurrencyRates</SelectionObject>
			</Rule>
		</Group>
	</DataUnloadRules>
	<DataClearingRules/>
	<Algorithms>
		<Algorithm Name="ExportContactInformation" UsedOnImport="false">
			<Text>
// Parameters:
// - Object

// Create an empty records set
Filter = New ValueTable;
Filter.Columns.Add("Name");
Filter.Columns.Add("Value");
Filter.Columns.Add("Use");

FilterRow = Filter.Add();
FilterRow.Name			= "Object";
FilterRow.Value		= Object.Ref;
FilterRow.Use	= True;

Rows = New ValueTable;
Rows.Columns.Add("Ref");
Rows.Columns.Add("Object");
Rows.Columns.Add("Kind");
Rows.Columns.Add("Type");
Rows.Columns.Add("Field1");
Rows.Columns.Add("Field2");
Rows.Columns.Add("Field3");
Rows.Columns.Add("Field4");
Rows.Columns.Add("Field5");
Rows.Columns.Add("Field6");
Rows.Columns.Add("Field7");
Rows.Columns.Add("Field8");
Rows.Columns.Add("Field9");
Rows.Columns.Add("BuildingType");
Rows.Columns.Add("ApartmentType");
Rows.Columns.Add("BlockType");
Rows.Columns.Add("Presentation");
Rows.Columns.Add("Comment");
Rows.Columns.Add("ItsArbitraryString", New TypeDescription("Boolean"));

// House types, blocks and apartments supported in CA
HousesTypes = New Array;
HousesTypes.Add("house");
HousesTypes.Add("estate");

BlockTypes = New Array;
BlockTypes.Add("building");
BlockTypes.Add("building");

ApartmentType = New Array;
ApartmentType.Add("app.");
ApartmentType.Add("f.");

// Fill in the set
For Each CIRow IN Object.ContactInformation Do
	
	// Receive the structure of the fields values
	FieldsStructure		= New Structure;
	LastItemName	= Undefined;
	FieldsRow			= ContactInformationManagement.PreviousFormatContactInformationXML(CIRow.FieldsValues, True);
	
	For Ct = 1 To StrLineCount(FieldsRow) Do
		Str = StrGetLine(FieldsRow, Ct);
		If Left(Str, 1) = Chars.Tab Then
			If LastItemName &lt;&gt; Undefined Then
				FieldsStructure[LastItemName] = FieldsStructure[LastItemName] + Chars.LF + Mid(Str, 2);
			EndIf;
		Else
			Pos = Find(Str, "=");
			If Pos &lt;&gt; 0 Then
				LastItemName = Left(Str, Pos-1);
				FieldsStructure.Insert(LastItemName, Mid(Str, Pos+1));
			EndIf;
		EndIf;
	EndDo;
	
	SetRow = Rows.Add();
	SetRow.Object		   			= Object.Ref;
	SetRow.Kind		   			= CIRow.Type;
	SetRow.Type					= CIRow.Type;
	SetRow.Presentation			= CIRow.Presentation;
	
	If CIRow.Type = Enums.ContactInformationTypes.Fax
		OR CIRow.Type = Enums.ContactInformationTypes.Phone Then
		FieldsStructure.Property("CountryCode", SetRow.Field1);
		FieldsStructure.Property("CityCode", SetRow.Field2);
		FieldsStructure.Property("PhoneNumber", SetRow.Field3);
		FieldsStructure.Property("Supplementary", SetRow.Field4);
	ElsIf CIRow.Type = Enums.ContactInformationTypes.Address Then
		
		FieldsStructure.Property("IndexOf", SetRow.Field1);
		FieldsStructure.Property("Region", SetRow.Field2);
		FieldsStructure.Property("District", SetRow.Field3);
		FieldsStructure.Property("City", SetRow.Field4);
		FieldsStructure.Property("Settlement", SetRow.Field5);
		FieldsStructure.Property("Street", SetRow.Field6);
		FieldsStructure.Property("Building", SetRow.Field7);
		FieldsStructure.Property("Section", SetRow.Field8);
		FieldsStructure.Property("Apartment", SetRow.Field9);
		
		FieldsStructure.Property("BuildingType", SetRow.BuildingType);
		FieldsStructure.Property("BlockType", SetRow.BlockType);
		FieldsStructure.Property("ApartmentType", SetRow.ApartmentType);
		
		// Check values of house, block and apartment type
		SetRow.BuildingType	 = ?(HousesTypes.Find(Lower(SetRow.BuildingType)) = Undefined, Undefined, SetRow.BuildingType);
		SetRow.BlockType  = ?(BlockTypes.Find(Lower(SetRow.BlockType)) = Undefined, Undefined, SetRow.BlockType);
		SetRow.ApartmentType = ?(ApartmentType.Find(Lower(SetRow.ApartmentType)) = Undefined, Undefined, SetRow.ApartmentType);
		
		// Receive the presentation, the way it should be
		CountryCode = "";
		CountryDescription = CIRow.Country;
		RussiaCountry = Catalogs.WorldCountries.Russia;
		
		FieldsStructure.Property("CountryCode", CountryCode);
		Country = ?(ValueIsFilled(CountryCode), Catalogs.WorldCountries.FindByCode(CountryCode), Undefined);
		Country = ?(ValueIsFilled(Country), Catalogs.WorldCountries.FindByDescription(CountryDescription, True), RussiaCountry);
		Country = ?(ValueIsFilled(Country), Country, RussiaCountry);
		
		Presentation = "";
		If Country &lt;&gt; RussiaCountry Then
			Presentation = Presentation + ?(ValueIsFilled(String(Country)), ", " + String(Country), "");
		EndIf;
		Presentation = Presentation + ?(ValueIsFilled(TrimAll(SetRow.Field1)), ", " + TrimAll(SetRow.Field1), "");
		Presentation = Presentation + ?(ValueIsFilled(TrimAll(SetRow.Field2)), ", " + TrimAll(SetRow.Field2), "");
		Presentation = Presentation + ?(ValueIsFilled(TrimAll(SetRow.Field3)), ", " + TrimAll(SetRow.Field3), "");
		Presentation = Presentation + ?(ValueIsFilled(TrimAll(SetRow.Field4)), ", " + TrimAll(SetRow.Field4), "");
		Presentation = Presentation + ?(ValueIsFilled(TrimAll(SetRow.Field5)), ", " + TrimAll(SetRow.Field5), "");
		Presentation = Presentation + ?(ValueIsFilled(TrimAll(SetRow.Field6)), ", " + TrimAll(SetRow.Field6), "");
		Presentation = Presentation + ?(ValueIsFilled(TrimAll(SetRow.Field7)), ", " + SetRow.BuildingType    + " No " + TrimAll(SetRow.Field7), "");
		Presentation = Presentation + ?(ValueIsFilled(TrimAll(SetRow.Field8)), ", " + SetRow.BlockType + " " + TrimAll(SetRow.Field8), "");
		Presentation = Presentation + ?(ValueIsFilled(TrimAll(SetRow.Field9)), ", " + SetRow.ApartmentType + " " + TrimAll(SetRow.Field9), "");
		
		If StrLen(Presentation) &gt; 2 Then
			Presentation = Mid(Presentation, 3);
		EndIf;
		
		// Check if the presentation contains a custom value
		If Presentation &lt;&gt; SetRow.Presentation Then
			SetRow.ItsArbitraryString = True;
			SetRow.Field1 = String(Country);
		EndIf;
		
		SetRow.ApartmentType = ?(SetRow.ApartmentType = "app.", "Apartment", "Office");
		
	EndIf;
	
	FieldsStructure.Property("Comment", SetRow.Comment);
	
EndDo;

// Export
// the set of records create a virtual set of records
RecordSet = New Structure("Filter, Rows");
RecordSet.Filter  = Filter;
RecordSet.Rows = Rows;

DumpRegister(RecordSet, , , True, "ContactInformation");</Text>
		</Algorithm>
		<Algorithm Name="ExportAlcoholProductsLicenseVendor" UsedOnImport="false">
			<Text>If DataSource = Type("CatalogRef.AlcoholicProductsVendorsLicenses") Then
	LicenseAttributes = CommonUse.ObjectAttributesValues(DataSource, 
		"Owner, LicenseKind, StartDate, EndDate, IssuedBy, Name");
Else
	LicenseAttributes = DataSource;
EndIf;
		
If Not ValueIsFilled(LicenseAttributes.StartDate) Then
	LicenseAttributes.StartDate = Date(1980, 1, 1);
EndIf;

// Create an empty records set
Filter = New ValueTable;
Filter.Columns.Add("Name");
Filter.Columns.Add("Value");
Filter.Columns.Add("Use");

FilterRow = Filter.Add();
FilterRow.Name           = "Vendor";
FilterRow.Value      = LicenseAttributes.Owner;
FilterRow.Use = True;

FilterRow = Filter.Add();
FilterRow.Name           = "LicenseKind";
FilterRow.Value      = LicenseAttributes.LicenseKind;
FilterRow.Use = True;

FilterRow = Filter.Add();
FilterRow.Name           = "Period";
FilterRow.Value      = LicenseAttributes.StartDate;
FilterRow.Use = True;

If Not ValueIsFilled(FilterRow.Value) Then
	Value = Date(1980, 1, 1);
EndIf;

Rows = New ValueTable;
Rows.Columns.Add("Ref");
Rows.Columns.Add("Vendor");
Rows.Columns.Add("LicenseKind");
Rows.Columns.Add("Period");
Rows.Columns.Add("EndDate");
Rows.Columns.Add("IssuedBy");
Rows.Columns.Add("SeriesNumber");

If Not IsRemoval Then

	String = Rows.Add();
	FillPropertyValues(String, LicenseAttributes);
	String.Vendor  = LicenseAttributes.Owner;
	String.Period     = LicenseAttributes.StartDate;
	String.SeriesNumber = LicenseAttributes.Description;
	
EndIf;

// Export
// the set of records create a virtual set of records
RecordSet = New Structure("Filter, Rows");
RecordSet.Filter  = Filter;
RecordSet.Rows = Rows;

DumpRegister(RecordSet, , , True, "AlcoholicProductsVendorLicenses");
</Text>
		</Algorithm>
		<Algorithm Name="FillDocumentAttributes" UsedOnImport="true">
			<Text>// The algorithm is designed to
// fill up the attributes of documents, called in the handler of the "after object import" event conversion.

DocumentMetadata = Object.Metadata();

If CommonUse.IsDocumentAttribute("ReflectInTaxRegistered", DocumentMetadata) Then
	
	Object.ReflectInTaxRegistered = Not UserManagement.GetDefaultValue(glVariableValue("glCurrentUser"), "NotReflectDocumentsInTaxAccounting");
	
EndIf;
	
If CommonUse.IsDocumentAttribute("ReflectInAccounting", DocumentMetadata) Then
	
	//All documents require to be recorded in the accounting by default
	Object.ReflectInAccounting = True
	
EndIf;</Text>
		</Algorithm>
		<Algorithm Name="ImportInformationAboutAlcoholicProducts" UsedOnImport="true">
			<Text>If Object.IsNew() Then
	ObjectReference = Catalogs.ProductsAndServices.GetRef(New UUID);
	Object.SetNewObjectRef(ObjectReference);
Else
	ObjectReference = Object.Ref;
EndIf;
If Not Object.IsFolder Then
	
	// Receive information about alcoholic products
	If ObjectParameters["AlcoholicProducts"] Then
		
		AlcoholicProductsManufacturerImporter = ObjectParameters["AlcoholicProductsManufacturerImporter"];
		
		If ObjectParameters["ImportedAlcoholicProducts"] Then
			Object.Importer      = AlcoholicProductsManufacturerImporter;
			Object.Manufacturer = Undefined;
		Else
			Object.Importer      = Undefined;
			Object.Manufacturer = AlcoholicProductsManufacturerImporter;
		EndIf;
		
		AlcoIRSet = InformationRegisters.InformationAboutAlcoholicProducts.CreateRecordSet();
		AlcoIRSet.Filter.ProductsAndServices.Set(ObjectReference);
		
		AlcoIRRecord = AlcoIRSet.Add();
		
		AlcoIRRecord.ProductsAndServices       = ObjectReference;
		AlcoIRRecord.ProductsKind       = ObjectParameters["AlcoholicProductsKind"];
		AlcoIRRecord.LicenseKind        = ObjectParameters["LicenseKind"];
		AlcoIRRecord.RecalculationRatioDal  = ObjectParameters["VolumeDAL"];
		
		WriteObjectToIB(AlcoIRSet, Type("InformationRegisterRecordSet.InformationAboutAlcoholicProducts"));
		
	EndIf;
	
EndIf;</Text>
		</Algorithm>
		<Algorithm Name="FillInMeasurementUnitInTablePortionOfThe" UsedOnImport="false">
			<Text>If TypeOf(CollectionObject.MeasurementUnit) = Type("CatalogRef.UOM") Then
	Value = CommonUse.GetAttributeValue(CollectionObject.ProductsAndServices, "MeasurementUnit");	
Else
	Value = CollectionObject.MeasurementUnit;
EndIf;</Text>
		</Algorithm>
		<Algorithm Name="FillInTablePortionOfThe" UsedOnImport="false">
			<Text>If TypeOf(CollectionObject.MeasurementUnit) = Type("CatalogRef.UOM") Then
	Factor = CollectionObject.MeasurementUnit.Factor;	
	If Factor &gt; 0 Then
		Value = CollectionObject.Count * Factor;
	EndIf;
Else
	Value = CollectionObject.Count;
EndIf;</Text>
		</Algorithm>
		<Algorithm Name="FillInTablePortionOfCoefficient" UsedOnImport="false">
			<Text>If TypeOf(CollectionObject.MeasurementUnit) = Type("CatalogRef.UOM") Then
	Value = CollectionObject.MeasurementUnit.Factor;
Else
	Value = 1;
EndIf;</Text>
		</Algorithm>
		<Algorithm Name="FillNumberOfCCDAndCountriesOfOrigin" UsedOnImport="true">
			<Text>// The algorithm is designed to fill CCD number and the country of origin
// in the rows of the Goods tabular section Called from the handler "after import" document OCR
For Each TSRow IN Object.Products Do
	DataProcessorTabularSections.FillNumberCCDAndCountryOfOrigin(TSRow, False, Object.Company, Object.Date);
EndDo;</Text>
		</Algorithm>
		<Algorithm Name="FillContentTablePartsServices" UsedOnImport="true">
			<Text>// The algorithm is designed to fill the Content attribute in
// the Documents services TS rows Called from the handler "After import" OCR document
For Each CurRow IN Object.Services Do	
	DataProcessorTabularSections.FillTabSectionContent(CurRow, Object);
EndDo;</Text>
		</Algorithm>
		<Algorithm Name="FillInVatRateOfRemuneration" UsedOnImport="false">
			<Text>If Source.VATCommissionFeePercent.NotTaxable Then
	Expression = "Enums.VATRates.WithoutVAT";	
ElsIf Source.VATCommissionFeePercent.Rate = 18
	 AND Not Source.VATCommissionFeePercent.Calculated Then
	Expression = "Enums.VATRates.VAT18";
ElsIf Source.VATCommissionFeePercent.Rate = 18
		AND Source.VATCommissionFeePercent.Calculated Then
	Expression = "Enums.VATRates.VAT18_118";
ElsIf Source.VATCommissionFeePercent.Rate = 10 
	 AND Not Source.VATCommissionFeePercent.Calculated Then
	Expression = "Enums.VATRates.VAT10";
ElsIf Source.VATCommissionFeePercent.Rate = 10 
		AND Source.VATCommissionFeePercent.Calculated Then
	Expression = "Enums.VATRates.VAT10_110";
ElsIf Source.VATCommissionFeePercent.Rate = 0 Then
	Expression = "Enums.VATRates.VAT0"; 
ElsIf Source.VATCommissionFeePercent.Rate = 20
	 AND Not Source.VATCommissionFeePercent.Calculated Then
	Expression = "Enums.VATRates.VAT20";
ElsIf Source.VATCommissionFeePercent.Rate = 20
		AND Source.VATCommissionFeePercent.Calculated Then
	Expression = "Enums.VATRates.VAT20_120";
Else
	Expression = "Enums.VATRates.VAT18";
EndIf;</Text>
		</Algorithm>
		<Algorithm Name="FillVatRateTableParts" UsedOnImport="false">
			<Text>// The algorithm is designed to fill in VAT rate
// in the typical tabular section Called in the handler "before export" PCR.
If CollectionObject.VATRate.NotTaxable Then
	Expression = "Enums.VATRates.WithoutVAT";	
ElsIf CollectionObject.VATRate.Rate = 18
		AND Not CollectionObject.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT18";
ElsIf CollectionObject.VATRate.Rate = 18
		AND CollectionObject.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT18_118";
ElsIf CollectionObject.VATRate.Rate = 10 
	 AND Not CollectionObject.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT10";
ElsIf CollectionObject.VATRate.Rate = 10 
		AND CollectionObject.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT10_110";
ElsIf CollectionObject.VATRate.Rate = 0 Then
	Expression = "Enums.VATRates.VAT0"; 
ElsIf CollectionObject.VATRate.Rate = 20
	 AND Not CollectionObject.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT20";
ElsIf CollectionObject.VATRate.Rate = 20
		AND CollectionObject.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT20_120";
Else
	Expression = "Enums.VATRates.VAT18";
EndIf;</Text>
		</Algorithm>
		<Algorithm Name="FillInVatRateCaps" UsedOnImport="false">
			<Text>If Source.VATRate.NotTaxable Then
	Expression = "Enums.VATRates.WithoutVAT";	
ElsIf Source.VATRate.Rate = 18
	 AND Not Source.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT18";
ElsIf Source.VATRate.Rate = 18
		AND Source.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT18_118";
ElsIf Source.VATRate.Rate = 10 
	 AND Not Source.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT10";
ElsIf Source.VATRate.Rate = 10 
		AND Source.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT10_110";
ElsIf Source.VATRate.Rate = 0 Then
	Expression = "Enums.VATRates.VAT0"; 
ElsIf Source.VATRate.Rate = 20
	 AND Not Source.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT20";
ElsIf Source.VATRate.Rate = 20
		AND Source.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT20_120";
Else
	Expression = "Enums.VATRates.VAT18";
EndIf;</Text>
		</Algorithm>
		<Algorithm Name="FillDocumentAmountByServices" UsedOnImport="true">
			<Text>// The algorithm is designed to calculate document amount by the
// Services tabular section and write it to the corresponding header
// attribute for showing in the logs Called from the handler "after import" document OCR
DocumentAmount = AccountingVAT.GetDocumentSumWithVAT(Object, "Services");</Text>
		</Algorithm>
		<Algorithm Name="FillAccountsGLAccounts" UsedOnImport="true">
			<Text>// For the objects imported for the first time
If Not ObjectFound Then
	
 	// Fill in the GL accounts of settlements	
	Object.FillAccountsGLAccounts();
	
EndIf;</Text>
		</Algorithm>
		<Algorithm Name="FillPriceInTabularSection" UsedOnImport="false">
			<Text>If TypeOf(CollectionObject.MeasurementUnit) = Type("CatalogRef.UOM") Then
	Factor = CollectionObject.MeasurementUnit.Factor;	
	If Factor &gt; 0 Then
		Value = CollectionObject.Price / Factor;
	EndIf;
Else
	Value = CollectionObject.Price;
EndIf;</Text>
		</Algorithm>
		<Algorithm Name="HandleCounterpartyContract" UsedOnImport="true">
			<Text>
If TypeOf(Object) = Type("DocumentObject.CashGoodsReceipt")
	OR TypeOf(Object) = Type("DocumentObject.CashGoodsExpense")
	OR TypeOf(Object) = Type("DocumentObject.ReceiptOnBankAccount")
	OR TypeOf(Object) = Type("DocumentObject.WriteOffFromAccount") Then
	
	For Each TabularSectionRow IN Object.PaymentDetails Do
		
		CounterpartyContract = TabularSectionRow.CounterpartyContract;
		If ValueIsFilled(CounterpartyContract) Then
			
			Contract = CounterpartyContract.GetObject();
			If Contract &lt;&gt; Undefined AND Not ValueIsFilled(Contract.Code) Then
				Contract.DataExchange.Load = True;
				Contract.AdditionalProperties.Insert("RecordObjectChangeAtSenderNode", False);
				Contract.AdditionalProperties.Insert("DisableObjectChangeRecordMechanism", True);
				Contract.SetNewCode();
				Contract.Write();
				Break;
			EndIf;
			
		EndIf;		
	EndDo;

Else

	CounterpartyContract = Object.CounterpartyContract;
	If ValueIsFilled(CounterpartyContract) Then
		
		Contract = CounterpartyContract.GetObject();
		If Contract &lt;&gt; Undefined AND Not ValueIsFilled(Contract.Code) Then
			Contract.DataExchange.Load = True;
			Contract.AdditionalProperties.Insert("RecordObjectChangeAtSenderNode", False);
			Contract.AdditionalProperties.Insert("DisableObjectChangeRecordMechanism", True);
			Contract.SetNewCode();
			Contract.Write();
		EndIf;
		
	EndIf;
	
EndIf;</Text>
		</Algorithm>
		<Algorithm Name="DetermineNameOfPwcFoundationDocument" UsedOnImport="false">
			<Text>If TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.CustomerOrder") Then
	If CollectionObject.DocumentType = "SalesOfGoodsAndServices" Then
		OCRName = "JobOrderImplementationProductsServices";
	Else
		OCRName = "JobOrderActOnProvisionOfIndustrialServices";
	EndIf;
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.CustomerInvoice") Then
	If CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.SaleToCustomer
	 OR CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.TransferForCommission Then
		OCRName = "GoodsServicesSale";
	ElsIf CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.TransferToProcessing Then
		OCRName = "TransferOfProducts";
	ElsIf CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToPrincipal
		  OR CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnFromProcessing
		  OR CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToVendor Then
		OCRName = "ReturnProductsToSupplier";
	EndIf;
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.SupplierInvoice") Then
	If CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromCustomer
	 OR CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromAgent Then
		OCRName = "ReturnOfProductsFromCustomer";
	ElsIf CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionForCommission
		  OR CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionIntoProcessing
		  OR CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceiptFromVendor Then
		OCRName = "ReceiptOfGoodsAndServices";
	EndIf;
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.AcceptanceCertificate") Then
	OCRName = "ActOnProvisionOfIndustrialServices";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.AgentReport") Then
	OCRName = "AgentSalesReport";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.PaymentExpense") Then
	OCRName = "WriteOffFromCurrentAccount";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.ProcessingReport") Then
	OCRName = "ImplementationServicesForProcessing";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.ExpenseReport") Then
	OCRName = "ExpenseReport";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.CustomerOrder") Then
	OCRName = "GoodsServicesSale";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.SubcontractorReport") Then
	OCRName = "ReceiptOfProcessing";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.ReportToPrincipal") Then
	OCRName = "SalesReportToPrincipal";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.CashPayment") Then
	OCRName = "ExpenseCashOrder";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.AdditionalCosts") Then
	OCRName = "ReceiptOfAdditionalCosts";
EndIf;</Text>
		</Algorithm>
		<Algorithm Name="DetermineOCRNameAccountsDocument" UsedOnImport="false">
			<Text>If TypeOf(CollectionObject.Document) = Type("DocumentRef.CustomerOrder") 
	AND CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerOrder.JobOrder Then
	
	If CollectionObject.Document.Works.Count() &gt; 0 Then
		OCRName = "ActOnProvisionOfIndustrialServices";
	Else
		OCRName = "GoodsServicesSale";
	EndIf;

ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.CustomerInvoice") Then
	If CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerInvoice.SaleToCustomer
	 OR CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerInvoice.TransferForCommission Then
		OCRName = "GoodsServicesSale";
	ElsIf CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerInvoice.TransferToProcessing Then
		OCRName = "TransferOfProducts";
	ElsIf CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToPrincipal
		  OR CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnFromProcessing
		  OR CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToVendor Then
		OCRName = "ReturnProductsToSupplier";
	EndIf;
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.SupplierInvoice") Then
	If CollectionObject.Document.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromCustomer
	 OR CollectionObject.Document.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromAgent Then
		OCRName = "ReturnOfProductsFromCustomer";
	ElsIf CollectionObject.Document.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionForCommission
		  OR CollectionObject.Document.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionIntoProcessing
		  OR CollectionObject.Document.OperationKind = Enums.OperationKindsSupplierInvoice.ReceiptFromVendor Then
		OCRName = "ReceiptOfGoodsAndServices";
	EndIf;
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.AcceptanceCertificate") Then
	OCRName = "ActOnProvisionOfIndustrialServices";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.AgentReport") Then
	OCRName = "AgentSalesReport";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.PaymentExpense") Then
	OCRName = "WriteOffFromCurrentAccount";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.ProcessingReport") Then
	OCRName = "ImplementationServicesForProcessing";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.ExpenseReport") Then
	OCRName = "ExpenseReport";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.CustomerOrder") Then
	OCRName = "GoodsServicesSale";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.SubcontractorReport") Then
	OCRName = "ReceiptOfProcessing";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.ReportToPrincipal") Then
	OCRName = "SalesReportToPrincipal";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.CashPayment") Then
	OCRName = "ExpenseCashOrder";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.AdditionalCosts") Then
	OCRName = "ReceiptOfAdditionalCosts";
EndIf;</Text>
		</Algorithm>
		<Algorithm Name="GenerateStructureOfMutualCountsContract" UsedOnImport="false">
			<Text>
Contract = ?(TabularSectionName = "", Source.Contract, CollectionObject.Contract);
Counterparty = ?(TabularSectionName = "Debitor", Source.CounterpartySource, Source.Counterparty); 

If Counterparty.DoOperationsByContracts &lt;&gt; True Then
	
	OCRName = "CounterpartyContracts";
	
	ContractKindsList = Catalogs.CounterpartyContracts.GetContractKindsListForDocument(Source, Source.OperationKind);
		
	If Contract.Company &lt;&gt; Source.Company
		OR ContractKindsList.FindByValue(Contract.ContractKind) = Undefined Then 
			
		StructureOfTreaty = New Structure;
		StructureOfTreaty.Insert("Description");
		StructureOfTreaty.Insert("Owner");
		StructureOfTreaty.Insert("Code");
		StructureOfTreaty.Insert("Company");
		StructureOfTreaty.Insert("DeletionMark");
		StructureOfTreaty.Insert("SettlementsInStandardUnits");
		StructureOfTreaty.Insert("SettlementsCurrency");
		StructureOfTreaty.Insert("IsFolder");
		StructureOfTreaty.Insert("ContractKind");
		StructureOfTreaty.Insert("PriceKind");
		StructureOfTreaty.Insert("ContractDate");
		StructureOfTreaty.Insert("ContractNo");
			
		FillPropertyValues(StructureOfTreaty, Contract);
			
		StructureOfTreaty.Code = "";
		StructureOfTreaty.Company = Source.Company;
			
		If ContractKindsList.Count() &gt; 0 Then
			StructureOfTreaty.ContractKind = ContractKindsList[0].Value;
		EndIf;
			
		Value = StructureOfTreaty;
			
	EndIf;
	
Else
	
	Value = Contract;
	OCRName = "CounterpartyContractsSearchByIdIdentificator";

EndIf;</Text>
		</Algorithm>
		<Algorithm Name="BuildingStructureOfContractCounterparty" UsedOnImport="false">
			<Text>
If Source.Counterparty.DoOperationsByContracts &lt;&gt; True Then
	
	OCRName = "CounterpartyContracts";
	
	If TypeOf(Source) = Type("DocumentObject.CustomerInvoiceNote") 
		OR TypeOf(Source) = Type("DocumentObject.SupplierInvoiceNote") Then
			
		Document = Source.BasisDocument;
	Else
		Document = Source.Ref;
	EndIf;
		
	If TypeOf(Document) = Type("DocumentRef.AcceptanceCertificate")
		OR TypeOf(Document) = Type("DocumentRef.ExpenseReport")
		OR TypeOf(Document) = Type("DocumentRef.AdditionalCosts")
		OR TypeOf(Document) = Type("DocumentRef.AgentReport") 
		OR TypeOf(Document) = Type("DocumentRef.ReportToPrincipal")
		OR TypeOf(Document) = Type("DocumentRef.ProcessingReport")
		OR TypeOf(Document) = Type("DocumentRef.SubcontractorReport")
		OR TypeOf(Document) = Type("DocumentRef.InvoiceForPayment") Then
			
		ContractKindsList = Catalogs.CounterpartyContracts.GetContractKindsListForDocument(Document);
	Else
		ContractKindsList = Catalogs.CounterpartyContracts.GetContractKindsListForDocument(Document, Document.OperationKind);
	EndIf;
		
	Contract = ?(ValueIsFilled(CollectionObject), CollectionObject.Contract, Source.Contract);
		
	If Contract.Company &lt;&gt; Source.Company
		OR ContractKindsList.FindByValue(Contract.ContractKind) = Undefined Then 
			
		StructureOfTreaty = New Structure;
		StructureOfTreaty.Insert("Description");
		StructureOfTreaty.Insert("Owner");
		StructureOfTreaty.Insert("Code");
		StructureOfTreaty.Insert("Company");
		StructureOfTreaty.Insert("DeletionMark");
		StructureOfTreaty.Insert("SettlementsInStandardUnits");
		StructureOfTreaty.Insert("SettlementsCurrency");
		StructureOfTreaty.Insert("IsFolder");
		StructureOfTreaty.Insert("ContractKind");
		StructureOfTreaty.Insert("PriceKind");
		StructureOfTreaty.Insert("ContractDate");
		StructureOfTreaty.Insert("ContractNo");
			
		FillPropertyValues(StructureOfTreaty, Contract);
			
		StructureOfTreaty.Code = "";
		StructureOfTreaty.Company = Source.Company;
			
		If ContractKindsList.Count() &gt; 0 Then
			StructureOfTreaty.ContractKind = ContractKindsList[0].Value;
		EndIf;
			
		If TypeOf(Source) = Type("DocumentObject.AdditionalCosts") Then
				
			For Each TabularSectionRow IN Source.Inventory Do
				If TypeOf(TabularSectionRow.ReceiptDocument) = Type("DocumentRef.SupplierInvoice")
					AND TabularSectionRow.ReceiptDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionForCommission Then
						
					StructureOfTreaty.ContractKind = Enums.ContractKinds.FromPrincipal;
					Break;
				EndIf;
			EndDo;
				
		EndIf;
			
		Value = StructureOfTreaty;
			
	EndIf;

Else
	
	OCRName = "CounterpartyContractsSearchByIdIdentificator";

EndIf;</Text>
		</Algorithm>
		<Algorithm Name="GenerateTableOfCustomers" UsedOnImport="false">
			<Text>ATableOfCustomers = New ValueTable;
ATableOfCustomers.Columns.Add("RowKey");
ATableOfCustomers.Columns.Add("Customer");
ATableOfCustomers.Columns.Add("CustomerInvoiceNoteIssued");
ATableOfCustomers.Columns.Add("InvoiceDate");
ATableOfCustomers.Columns.Add("CustomerInvoiceNote");

PaddingValuesLine = New Structure;
PaddingValuesLine.Insert("RowKey", 0);
PaddingValuesLine.Insert("Customer", Source.Counterparty); 

//If there is a written CIN in SB, put it in if there is not, output the check box and fill in the date
PaddingValuesLine.Insert("CustomerInvoiceNoteIssued", True); 

Query = New Query;
Query.Text = 
"SELECT
|	CustomerInvoiceNote.Ref AS InvoiceInvoice
|FROM
|	Document.CustomerInvoiceNote AS CustomerInvoiceNote
|WHERE
|	(CustomerInvoiceNote.BasisDocument = &amp;BasisDocument
|			OR CustomerInvoiceNote.BasisDocuments.Ref = &amp;BasisDocument)
|	AND CustomerInvoiceNote.Posted";

Query.SetParameter("BasisDocument", Source.Ref);
QueryExecutionResult = Query.Execute();

ThereIsWrittenInvoice = False;

If Not QueryExecutionResult.IsEmpty() Then
	
	Selection = QueryExecutionResult.Select();
	Selection.Next();
	
	If ValueIsFilled(Selection.InvoiceInvoice) Then
		
		//There is issued CIN
		PaddingValuesLine.Insert("InvoiceDate",			Selection.InvoiceInvoice.Date);
		PaddingValuesLine.Insert("CustomerInvoiceNote", 	Selection.InvoiceInvoice);
		
		Message("" + Selection.InvoiceInvoice);
		
		ThereIsWrittenInvoice = True;
	EndIf;
	
EndIf;

//There is no written up customer invoice note
If Not ThereIsWrittenInvoice Then 
	
	PaddingValuesLine.Insert("InvoiceDate",			Source.Date);
	
EndIf;

FillPropertyValues(ATableOfCustomers.Add(), PaddingValuesLine);

ObjectsCollection = ATableOfCustomers;</Text>
		</Algorithm>
		<Algorithm Name="GenerateTabularSectionAmountDebt" UsedOnImport="false">
			<Text>// The algorithm is designed to generate the typical Document
// debt amount tabular section Settlement Called from the handler "before process" PGCR

TargetTable = New ValueTable;
TargetTable.Columns.Add("KindOfDebt");
TargetTable.Columns.Add("CounterpartyContract");
TargetTable.Columns.Add("Deal");
TargetTable.Columns.Add("AmountMutualSettlements");
TargetTable.Columns.Add("Amount");
TargetTable.Columns.Add("MutualSettlementsExchangeRate");
TargetTable.Columns.Add("MutualSettlementsCurrencyRate");
TargetTable.Columns.Add("AdvanceFlag");

TargetTable.Columns.Add("Contract");
TargetTable.Columns.Add("Document");

SourceTable = Source.Debitor;
For Each CurRow IN SourceTable Do
	
	NewRow = TargetTable.Add();
	FillPropertyValues(NewRow, CurRow);
	
	If CurRow.AdvanceFlag Then
		NewRow.KindOfDebt = "Creditor";
	Else
		NewRow.KindOfDebt = "Accounts receivable";
	EndIf;
	NewRow.CounterpartyContract = CurRow.Contract;
	NewRow.Deal = CurRow.Document;
	NewRow.AmountMutualSettlements = CurRow.SettlementsAmount;
	
	ContractCurrency = CurRow.Contract.SettlementsCurrency;
	If ContractCurrency = Parameters.NationalCurrency Then
		NewRow.MutualSettlementsExchangeRate	   = 1;
		NewRow.MutualSettlementsCurrencyRate  = 1;
		NewRow.Amount = CurRow.SettlementsAmount;
	Else
		StructureRate = WorkWithCurrencyRates.GetCurrencyRate(ContractCurrency, Source.Date);
		NewRow.MutualSettlementsExchangeRate	   = StructureRate.ExchangeRate;
		NewRow.MutualSettlementsCurrencyRate  = StructureRate.Multiplicity;
		
		If CurRow.Contract.SettlementsInStandardUnits Then
			NewRow.Amount = WorkWithCurrencyRatesClientServer.RecalculateFromCurrencyToCurrency(CurRow.SettlementsAmount,
				ContractCurrency, Parameters.NationalCurrency,
				NewRow.MutualSettlementsExchangeRate, 1,
				NewRow.MutualSettlementsCurrencyRate, 1
			);
		Else
			NewRow.Amount = CurRow.SettlementsAmount;
		EndIf;
	EndIf;
	
EndDo;

SourceTable = Source.Creditor;
For Each CurRow IN SourceTable Do
	
	NewRow = TargetTable.Add();
	FillPropertyValues(NewRow, CurRow);
	
	If CurRow.AdvanceFlag Then
		NewRow.KindOfDebt = "Accounts receivable";
	Else
		NewRow.KindOfDebt = "Creditor";
	EndIf;
	NewRow.CounterpartyContract = CurRow.Contract;
	NewRow.Deal = CurRow.Document;
	NewRow.AmountMutualSettlements = CurRow.SettlementsAmount;
	
	ContractCurrency = CurRow.Contract.SettlementsCurrency;
	If ContractCurrency = Parameters.NationalCurrency Then
		NewRow.MutualSettlementsExchangeRate	   = 1;
		NewRow.MutualSettlementsCurrencyRate  = 1;
		NewRow.Amount = CurRow.SettlementsAmount;
	Else
		StructureRate = WorkWithCurrencyRates.GetCurrencyRate(ContractCurrency, Source.Date);
		NewRow.MutualSettlementsExchangeRate	   = StructureRate.ExchangeRate;
		NewRow.MutualSettlementsCurrencyRate  = StructureRate.Multiplicity;
		
		If CurRow.Contract.SettlementsInStandardUnits Then
			NewRow.Amount = WorkWithCurrencyRatesClientServer.RecalculateFromCurrencyToCurrency(CurRow.SettlementsAmount,
				ContractCurrency, Parameters.NationalCurrency,
				NewRow.MutualSettlementsExchangeRate, 1,
				NewRow.MutualSettlementsCurrencyRate, 1
			);
		Else
			NewRow.Amount = CurRow.SettlementsAmount;
		EndIf;
	EndIf;
	
EndDo;

ObjectsCollection = TargetTable;</Text>
		</Algorithm>
		<Algorithm Name="GenerateTableOfProducts" UsedOnImport="false">
			<Text>// The algorithm is designed to generate the typical
// Goods tabular section of the trade documents Called from the handler "before processor" PGCR

// Generate an empty table for storing goods based on the typical Goods tabular section
TableProducts = Source.Inventory.UnloadColumns();
TableProducts.Columns.Add("PlacesQuantity");
SourceTable = Source.Inventory;

// Fill in the result table from the Goods taublar section with products and services different from the services 
For Each CurRow IN SourceTable Do
	If CurRow.ProductsAndServices.ProductsAndServicesType = Enums.ProductsAndServicesTypes.InventoryItem Then
		NewRow = TableProducts.Add();
		FillPropertyValues(NewRow, CurRow);
		NewRow.PlacesQuantity = CurRow.Count;
	EndIf;
EndDo;

// Initialize the collection with the filled in table to prevent the standard collection receipt. 
ObjectsCollection = TableProducts;</Text>
		</Algorithm>
		<Algorithm Name="GenerateTableOfServices" UsedOnImport="false">
			<Text>// The algorithm is designed to generate the typical
// Services tabular section of the trade documents Called from the handler "before processor" PGCR

// Generate an empty table for storing services based on the typical Goods tabular section
TableService = Source.Inventory.UnloadColumns();
SourceTable = Source.Inventory;

// Fill in the result table from the Goods tabular section with services only 
For Each CurRow IN SourceTable Do
	If CurRow.ProductsAndServices.ProductsAndServicesType = Enums.ProductsAndServicesTypes.Service 
	 OR CurRow.ProductsAndServices.ProductsAndServicesType = Enums.ProductsAndServicesTypes.Work Then
		NewRow = TableService.Add();
		FillPropertyValues(NewRow, CurRow);
	EndIf;
EndDo;

// Initialize the collection with the filled in table to prevent the standard collection receipt
ObjectsCollection = TableService;</Text>
		</Algorithm>
	</Algorithms>
	<Queries/>
</ExchangeRules>