<?xml version="1.0" encoding="UTF-8"?>
<Rights xmlns="http://v8.1c.ru/8.2/roles" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Rights" version="2.2">
	<setForNewObjects>false</setForNewObjects>
	<setForAttributesByDefault>true</setForAttributesByDefault>
	<independentRightsOfChildObjects>false</independentRightsOfChildObjects>
	<object>
		<name>CommonCommand.AdditionalReportsCash</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.CompaniesTaxationSystems</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.EventAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.CurrentWorks</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Subsystem.SetupAndAdministration.Subsystem.SettingsAccounting</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>SessionParameter.DataAreasUse</name>
		<right>
			<name>Get</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalInformationProcessorsKittingAndProduction</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>ChartOfCharacteristicTypes.UserSettings</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionUseOrderWarehouse</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.IndividualsDocuments</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionTransferRawMaterialsForProcessing</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.SupplierAdvancesPickForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalReportsMarketingAndSales</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.PageMobileApplicationOnGooglePlay</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteFunctionalOptionShipDateInTabularSection</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionAccountingFixedAssets</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>FilterCriterion.Dependencies</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.UseProductionOrderStates</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.SpecificationsAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.InitialSettingCompanyDetailsFilled</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.SettlementsDocumentChoiceForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.CompaniesAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>DataProcessor.PickingReceipt</name>
		<right>
			<name>Use</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.QuantityAndPriceForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.ActivityKind</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalInformationProcessorsEnterprise</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.CustomerOrdersInProgressStatus</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalInformationProcessorsCashAssets</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.TabularSection.ContactInformation.Attribute.Country</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>CommonForm.PickupCCDNumbers</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.NationalCurrency</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>DataProcessor.AdministrationPanelPersonalSettings.Command.Reminders</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalInformationProcessorsInventoryAndPurchases</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalInformationProcessorsPayrollAndHumanResources</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Calendars</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>SessionParameter.CurrentUser</name>
		<right>
			<name>Get</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.InventoryReconciliationAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.PageMobileApplicationOnAppStore</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.FileFoldersAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalInformationProcessorsMarketingAndSales</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.SubsidiaryCompany</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteUnissuedReceiptsOnCloseCashCRSession</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.ProductsAndServicesSKUInContent</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionTolling</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.ObjectAdditionalPrintForms</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.VendorsAdvancesAndDebtsPickForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.ResponsiblePersons</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.CashRegisters</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionUseSubsystemPayroll</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FormPriceListByAvailabilityInWarehouses</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionReceiveGoodsOnCommission</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.PettyCashes.StandardAttribute.PredefinedDataName</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.PettyCashes.StandardAttribute.Predefined</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.PettyCashes.StandardAttribute.Ref</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.PettyCashes.StandardAttribute.DeletionMark</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.PettyCashes.StandardAttribute.IsFolder</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.PettyCashes.StandardAttribute.Owner</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.PettyCashes.StandardAttribute.Parent</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.PettyCashes.StandardAttribute.Description</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.PettyCashes.StandardAttribute.Code</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Subsystem.SetupAndAdministration</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.BulkMailAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>DataProcessor.PickingTransfer</name>
		<right>
			<name>Use</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>DataProcessor.AdministrationPanelPersonalSettings.Command.FilesProcessingInterface</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.PostponeEditProhibitionDate</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Subsystem.CounterpartiesCheck</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.MessageForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>ChartOfAccounts.Managerial</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteFunctionalOptionReceiptDateInHeader</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.TabularSection.ContactInformation.Attribute.FieldsValues</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalReportsPayrollAndHumanResources</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionAccountingByProjects</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.VendorPaymentDueDate</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.ExpenseReportAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.FilesInWorkingDirectory</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionAccountingByMultipleWarehouses</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.PaymentExpenseAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.ProxyServerParameters</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Banks</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalReportsInventoryAndPurchases</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.UseCounterpartiesVerification</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.BankAccounts</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Subsystem.SetupAndAdministration.Subsystem.ApplicationSettings</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.UserSettings</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.UserSettings.StandardAttribute.Active</name>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.UserSettings.StandardAttribute.LineNumber</name>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.UserSettings.StandardAttribute.Recorder</name>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.UserSettings.StandardAttribute.Period</name>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.IndividualsDocumentsKinds</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>Delete</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveDeleteMarked</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.VATRates</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteFunctionalOptionOrderOnShipmentInTabularSection</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionAccountingByMultipleDepartments</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.UpdateDateToRelease_1_2_1</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DoNotPostDocumentsWithIncorrectContracts</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionInventoryReservation</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionAccountingRetail</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.CustomerInvoiceNoteAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.CalendarForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.DeleteAlcoholVendorsLicenses</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMarkPredefinedData</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMarkPredefinedData</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionUseWorkSubsystem</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.CustomerOrdersCompletedStatus</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteFunctionalOptionShipDateInHeader</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.CustomersAdvancesAndDebtsPickForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.PettyCashes.Attribute.GLAccount</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteFunctionalOptionOrderOnShipmentInHeader</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.PlanningPeriods</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.ProxyServerAdditionalParameters</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Document.RegistersCorrection</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.Dependencies</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.TabularSection.ContactInformation.Attribute.EMail_Address</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalReportsEnterprise</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Document.FixedAssetsEnter</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.ControlBalancesDuringCreationCRReceipts</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionAccountingInVariousUOM</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.CashAssetsTypesForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.SupplierInvoiceAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Companies</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.TabularSection.ContactInformation.Attribute.PhoneNumberNoCodes</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>DataProcessor.AdministrationPanelPersonalSettings.Command.EmailAndSMS</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.DocumentSetting</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>DataProcessor.PickingSales</name>
		<right>
			<name>Use</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.CounterpartyVerificationsSetting</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.ProductionOrdersInProgressStatus</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionPlanEnterpriseResourcesImporting</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Positions</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.UserEmployees</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>DataProcessor.AdministrationPanelPersonalSettings</name>
		<right>
			<name>Use</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteFunctionalOptionKindOfWorkInHeader</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.AccountingBySubsidiaryCompany</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteFunctionalOptionOrderOnReceptionInHeader</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>DataProcessor.InstructionOnUsageCounterpartiesCheck</name>
		<right>
			<name>Use</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalReportsServices</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionUseBudgeting</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionPaymentCalendar</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.AutoTransferInventoryForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.WorkOrderAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.VendorDebtsPickForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionUsePeripherals</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.TextEdit</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.PriceListShowFullDescr</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.BalanceReservesPricesPickForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.PrefixForExchangeWithSite</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.UserSettings.Command.OpenUserSettings</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>DataProcessor.AdministrationPanelPersonalSettings.Command.CurrentUser</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionTransferGoodsOnCommission</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteFunctionalOptionOrderOnTransferInTabularSection</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalReportsKittingAndProduction</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.UseCustomerOrderStates</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Cells</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.VehiclesLicenseCards</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionUseJobSharing</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.SupplierInvoiceForPaymentAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.CustomerAdvancesPickForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.AdvanceHolderAdvancesPickForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.PurchaseOrderAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.Employees</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.Attribute.InfobaseUserID</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionAccountingByMultipleBusinessActivities</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.UserSettings.Dimension.Setting</name>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.CounterpartyContractsAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.DeleteDialogYesNoDoNotAskAgain</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.TabularSection.ContactInformation.Attribute.State</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalInformationProcessorsServices</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.TabularSection.ContactInformation.Attribute.Kind</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>CommonForm.MultiplePickSettingForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalReportsAnalysis</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionTransferInventoryOnSafeCustody</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteFunctionalOptionKindOfWorkInTabularSection</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.PriceListShowCode</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionUseBatches</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Document.EnterOpeningBalance</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionAccountingByMultipleCompanies</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.TabularSection.ContactInformation.Attribute.Presentation</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.TabularSection.ContactInformation.Attribute.PhoneNumber</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Constant.ProductionOrdersCompletedStatus</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteFunctionalOptionOrderOnReceptionInTabularSection</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Employees</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.PriceListUseProductsAndServicesHierarchy</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>DataProcessor.AdministrationPanelPersonalSettings.Command.Print</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.UseUserReminders</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.DeleteAlcoholicProductsKinds</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMarkPredefinedData</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMarkPredefinedData</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionUseDiscountsMarkups</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionUseCharacteristics</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalCurrencyTransactionsAccounting</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.CustomerPaymentDueDate</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DistributedInformationBaseNodePrefix</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.PaymentReceiptAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteFunctionalOptionReceiptDateInTabularSection</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.CounterpartiesStates</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.ProductPageOn1CSite</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.PickForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.PlannedTotalsOptimizationDate</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.TabularSection.ContactInformation.Attribute.Type</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.WorldCountries</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.PettyCashes.Attribute.CurrencyByDefault</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.UTIIUse</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.UserSettings.Dimension.User</name>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.CCDNumbers</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionUseTechOperations</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.ApplicationPageOn1CSite</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteFunctionalOptionOrderOnTransferInHeader</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.AlcoholicProductsVendorLicenses</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMarkPredefinedData</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMarkPredefinedData</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.PersonalSettings</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.CurrencyForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.PurchaseOrdersInProgressStatus</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.TabularSection.ContactInformation</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Constant.InitialSettingOpeningBalancesFilled</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.PricesAndCurrencyForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonCommand.AdditionalInformationProcessorsAnalysis</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Currencies</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionUseExchangeWithSites</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionDoStaffSchedule</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.PurchaseOrdersCompletedStatus</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.OffsetAdvancesDebtsAutomatically</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.ControlBalancesOnPosting</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.IndividualsDescriptionFull</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionAccountingByCells</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Subsystem.SetupAndAdministration.Subsystem.PersonalSettings</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.CustomerDebtsPickForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.CustomerInvoiceNote1137UsageBegin</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>CommonForm.DependenciesForm</name>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Vehicles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.AlcoholicProductsKinds</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMarkPredefinedData</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMarkPredefinedData</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.ThereAreAutomaticDiscounts</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionAccountingDoIncomeTax</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.AttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.StructuralUnits</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.UsePurchaseOrderStates</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.TabularSection.ContactInformation.Attribute.ServerDomainName</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Constant.UseDataSynchronization</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.BusinessActivities</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DeleteContractControllingOnPosting</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionUseSubsystemProduction</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.DiscountsMarkupsSharedUsageOptions</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.ProductsAndServicesAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>InformationRegister.UserSettings.Resource.Value</name>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.TaxTypes</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.StandardAttribute.Predefined</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.StandardAttribute.Ref</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.StandardAttribute.DeletionMark</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.StandardAttribute.IsFolder</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.StandardAttribute.Owner</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.StandardAttribute.Parent</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.StandardAttribute.Description</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.StandardAttribute.Code</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>SessionParameter.DataAreaValue</name>
		<right>
			<name>Get</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.CounterpartiesAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.ArchiveCRReceiptsOnCloseCashCRSession</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.FunctionalOptionAccountingCashMethodIncomeAndExpenses</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Constant.AccountingCurrency</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.CustomerOrderAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.SupplierInvoiceNoteAttachedFiles</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>Insert</name>
			<value>true</value>
		</right>
		<right>
			<name>Update</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveInsert</name>
			<value>true</value>
		</right>
		<right>
			<name>Edit</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveSetDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InteractiveClearDeletionMark</name>
			<value>true</value>
		</right>
		<right>
			<name>InputByString</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>DataProcessor.ToolTipManager</name>
		<right>
			<name>Use</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<object>
		<name>Catalog.Users.TabularSection.ContactInformation.Attribute.City</name>
		<right>
			<name>View</name>
			<value>false</value>
		</right>
		<right>
			<name>Edit</name>
			<value>false</value>
		</right>
	</object>
	<object>
		<name>Constant.UpdateDateToRelease_1_4_1</name>
		<right>
			<name>Read</name>
			<value>true</value>
		</right>
		<right>
			<name>View</name>
			<value>true</value>
		</right>
	</object>
	<restrictionTemplate>
		<name>ByValues</name>
		<condition>// ByValues(Table, -, Modifier, B1,P1, B2,P2, ..., IN(n), P(n)).
// No. parameter: 1, 2, 3, 4, 5, 6, 7, ..., 2+n*2,3+n*2.
// Read so: "access restriction by values".
// Parameters:
// Table - Name of the current table, for example, "Document.GoodsAndServicesReceipt".
// Modifier - changes template.
// 1-st modifier - the NotRestrictAccessToGroups
// row directs to unconditionally select groups of the hierarchical log. 
// Other modifiers in this version of the template are Не expected.
// K(n) - Access kind - access kind name, for example, Companies. It's a good idea to specify
// several names for fields of a composite
// type for productivity increase, for example, Companies,PrivateIndividualsGroups, by specifying several parameters blocks with the same field name.
// You can use special kinds of
// access Condition, RightsSettings,ReadRight, ChangeRight only separately.
// When K(n) = Condition (Или ""), then P(n) contains a condition row on
// language of query,
// for example, T.Author = &amp;AuthorizedUser, VALUETYPE (T.Owner) = TYPE (Catalog.Organization), where T - current table alias.
// When K(n) = ReadRight
// Или ChangeRight checking if you have rights for value table T.P(n) is performed.
// F(n) - Field of verified value, except of K(n) case = Condition (Или "").
// Note: you can increase the maximum quantity of simultaneously checked fields
// values by changing the template; but you should also specify all parameters of the pattern, namely specify empty rows, when the quantity of fields is less than maximum.
// can by editing the template but will specify all Required Parameters of the template ie to specify empty strings When quantity fields Less maximum.
// The pattern has the following structure:
// &lt;Conditions common part&gt; &lt;Condition by parameters group 1&gt; И &lt;Condition by parameters group 2&gt; И ... &lt;Condition by
// parameters group(n)&gt; Example:
// ByValues("Document.GoodsAndServicesReceipt", "", "",
// "Companies","Company",
// "Vendors","Counterparty", "","", ...)

// Verification of the Right parameter.
#If Не ("#Parameter(2)" = "Read" Или "#Parameter(2)" = "Insert" Или
 "#Parameter(2)" = "Update" Или "#Parameter(2)" = "Delete" Или "#Parameter(2)" = "")
 Или #CurrentAccessRightName &lt;&gt; "Read" И "#Parameter(2)" = "Read"
 Или #CurrentAccessRightName = "Read" И "#Parameter(2)" &lt;&gt; "Read" И "#Parameter(2)" &lt;&gt; "" #Then
 // When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
 InvalidRight: #Parameter(2)
#EndIf

// Verification of the TableName parameter.
#If "#Parameter(1)" &lt;&gt; #CurrentTableName #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	IncorrectCurrentTableName: "#Parameter(1)"
#EndIf

// Verification of the Modifier parameter.
#If Не ("#Parameter(3)" = "DontLimitAccessToGroups" Или "#Parameter(3)" = "") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	InvalidModifier: #Parameter(3)
#EndIf

// General checking of access restriction on record level
// И checking of usage at least of one restriction from listed access kinds.
#If &amp;LimitAccessOnRecordsLevel
 И Не (истина
 И ("#Parameter(4)" = "" И "#Parameter(5)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(4),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(4),"))
 И ("#Parameter(6)" = "" И "#Parameter(7)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(6),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(6),"))
 И ("#Parameter(8)" = "" И "#Parameter(9)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(8),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(8),"))
 И ("#Parameter(10)" = "" И "#Parameter(11)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(10),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(10),"))
 И ("#Parameter(12)" = "" И "#Parameter(13)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(12),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(12),"))
 И ("#Parameter(14)" = "" И "#Parameter(15)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(14),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(14),"))
 И ("#Parameter(16)" = "" И "#Parameter(17)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(16),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(16),"))
 И ("#Parameter(18)" = "" И "#Parameter(19)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(18),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(18),"))
 И ("#Parameter(20)" = "" И "#Parameter(21)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(20),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(20),"))
 И ("#Parameter(22)" = "" И "#Parameter(23)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(22),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(22),"))
 И ("#Parameter(24)" = "" И "#Parameter(25)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(24),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(24),"))
 И ("#Parameter(26)" = "" И "#Parameter(27)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(26),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(26),"))
 И ("#Parameter(28)" = "" И "#Parameter(29)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(28),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(28),"))
 И ("#Parameter(30)" = "" И "#Parameter(31)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(30),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(30),"))
 И ("#Parameter(32)" = "" И "#Parameter(33)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(32),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(32),"))
 И ("#Parameter(34)" = "" И "#Parameter(35)" = ""
 Или &amp;AccessKindsWithDisabledUse = "All"
 И Не StrContains(",Condition,,RightsSettings,Object, ,ReadRight,ChangeRight,", ",#Parameter(34),")
 Или StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(34),"))
 ) #Then

T WHERE // T - alias of the current table (selected short to reduce the quantity of characters in the parameter text - conditions on language of requests).

// Unconditionally select groups in the hierarchical metadata object (if needed).
#If "#Parameter(3)" = "DontLimitAccessToGroups" #Then
	T.IsFolder Или
#EndIf

истина In
(	// Overall verification of user's right for current table.
	// Table rights are formed according to the content of acces group profile roles.
	SELECT TOP 1 истина
	FROM
		Catalog.MetadataObjectIDs AS PropertiesCurrentTable
		INNER JOIN Catalog.AccessGroups AS AccessGroups
		ON
			 PropertiesCurrentTable.FullName = "#Parameter(1)"
			И истина In
			 (
				SELECT TOP 1 истина
				FROM
					InformationRegister.AccessGroupsTables AS AccessGroupsTables
					WHERE
						 AccessGroupsTables.Table = PropertiesCurrentTable.Ref
						И AccessGroupsTables.AccessGroup = AccessGroups.Ref
					#If Не #CurrentAccessRightName = "Read" #Then
						И AccessGroupsTables.Update
					#EndIf
			 )
			И AccessGroups.Ref In
			 (
				SELECT
					AccessGroupsUsers.Ref AS AccessGroup
				FROM
					Catalog.AccessGroups.Users AS AccessGroupsUsers
					INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
					ON
						 UsersGroupsContents.User = &amp;AuthorizedUser
						И UsersGroupsContents.UsersGroup = AccessGroupsUsers.User
			 )
	WHERE
 ( // Search values of specified fields in the allowed access groups values (of users).

//// Value verification of parameters group field 1.
#If "#Parameter(4)" = "Condition" Или "#Parameter(4)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	( #Parameter(5) )
#ElseIf "#Parameter(4)" = "ReadRight" Или "#Parameter(4)" = "EditRight" #Then
	 T.#Parameter(5) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(5))
		#If Не "#Parameter(4)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(4)" = "RightSettings" #Then
	
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(5)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(5)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(4),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(4)", ",") #Then
		InvalidAccessKind: "#Parameter(4)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(4)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(4),") #Then
	
	 (
			ISNULL(T.#Parameter(5), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(4),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(4),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(5)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(4),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(5)
		#ElseIf "T.#Parameter(5)" = "T.Ref" #Then
			#If StrContains("#Parameter(4)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(4)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(4),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(5)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(5)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(5))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#Else
	истина
#EndIf

//// Value verification of parameters group field 2.
#If "#Parameter(6)" = "" И "#Parameter(7)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(6)" = "Condition" Или "#Parameter(6)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(7) )
#ElseIf "#Parameter(6)" = "ReadRight" Или "#Parameter(6)" = "EditRight" #Then
	И T.#Parameter(7) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(7))
		#If Не "#Parameter(6)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(6)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(7)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(7)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(6),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(6)", ",") #Then
		InvalidAccessKind: "#Parameter(6)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(6)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(6),") #Then
	И
	 (
			ISNULL(T.#Parameter(7), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(6),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(6),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(7)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(6),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(7)
		#ElseIf "T.#Parameter(7)" = "T.Ref" #Then
			#If StrContains("#Parameter(6)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(6)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(6),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(7)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(7)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(7))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 3.
#If "#Parameter(8)" = "" И "#Parameter(9)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(8)" = "Condition" Или "#Parameter(8)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(9) )
#ElseIf "#Parameter(8)" = "ReadRight" Или "#Parameter(8)" = "EditRight" #Then
	И T.#Parameter(9) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(9))
		#If Не "#Parameter(8)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(8)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(9)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(9)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(8),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(8)", ",") #Then
		InvalidAccessKind: "#Parameter(8)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(8)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(8),") #Then
	И
	 (
			ISNULL(T.#Parameter(9), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(8),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(8),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(9)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(8),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(9)
		#ElseIf "T.#Parameter(9)" = "T.Ref" #Then
			#If StrContains("#Parameter(8)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(8)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(8),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(9)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(9)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(9))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 4.
#If "#Parameter(10)" = "" И "#Parameter(11)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(10)" = "Condition" Или "#Parameter(10)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(11) )
#ElseIf "#Parameter(10)" = "ReadRight" Или "#Parameter(10)" = "EditRight" #Then
	И T.#Parameter(11) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(11))
		#If Не "#Parameter(10)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(10)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(11)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(11)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(10),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(10)", ",") #Then
		InvalidAccessKind: "#Parameter(10)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(10)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(10),") #Then
	И
	 (
			ISNULL(T.#Parameter(11), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(10),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(10),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(11)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(10),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(11)
		#ElseIf "T.#Parameter(11)" = "T.Ref" #Then
			#If StrContains("#Parameter(10)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(10)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(10),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(11)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(11)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(11))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 5.
#If "#Parameter(12)" = "" И "#Parameter(13)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(12)" = "Condition" Или "#Parameter(12)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(13) )
#ElseIf "#Parameter(12)" = "ReadRight" Или "#Parameter(12)" = "EditRight" #Then
	И T.#Parameter(13) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(13))
		#If Не "#Parameter(12)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(12)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(13)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(13)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(12),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(12)", ",") #Then
		InvalidAccessKind: "#Parameter(12)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(12)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(12),") #Then
	И
	 (
			ISNULL(T.#Parameter(13), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(12),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(12),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(13)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(12),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(13)
		#ElseIf "T.#Parameter(13)" = "T.Ref" #Then
			#If StrContains("#Parameter(12)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(12)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(12),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(13)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(13)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(13))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 6.
#If "#Parameter(14)" = "" И "#Parameter(15)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(14)" = "Condition" Или "#Parameter(14)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(15) )
#ElseIf "#Parameter(14)" = "ReadRight" Или "#Parameter(14)" = "EditRight" #Then
	И T.#Parameter(15) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(15))
		#If Не "#Parameter(14)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(14)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(15)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(15)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(14),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(14)", ",") #Then
		InvalidAccessKind: "#Parameter(14)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(14)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(14),") #Then
	И
	 (
			ISNULL(T.#Parameter(15), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(14),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(14),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(15)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(14),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(15)
		#ElseIf "T.#Parameter(15)" = "T.Ref" #Then
			#If StrContains("#Parameter(14)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(14)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(14),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(15)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(15)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(15))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 7.
#If "#Parameter(16)" = "" И "#Parameter(17)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(16)" = "Condition" Или "#Parameter(16)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(17) )
#ElseIf "#Parameter(16)" = "ReadRight" Или "#Parameter(16)" = "EditRight" #Then
	И T.#Parameter(17) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(17))
		#If Не "#Parameter(16)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(16)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(17)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(17)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(16),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(16)", ",") #Then
		InvalidAccessKind: "#Parameter(16)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(16)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(16),") #Then
	И
	 (
			ISNULL(T.#Parameter(17), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(16),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(16),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(17)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(16),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(17)
		#ElseIf "T.#Parameter(17)" = "T.Ref" #Then
			#If StrContains("#Parameter(16)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(16)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(16),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(17)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(17)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(17))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 8.
#If "#Parameter(18)" = "" И "#Parameter(19)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(18)" = "Condition" Или "#Parameter(18)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(19) )
#ElseIf "#Parameter(18)" = "ReadRight" Или "#Parameter(18)" = "EditRight" #Then
	И T.#Parameter(19) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(19))
		#If Не "#Parameter(18)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(18)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(19)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(19)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(18),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(18)", ",") #Then
		InvalidAccessKind: "#Parameter(18)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(18)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(18),") #Then
	И
	 (
			ISNULL(T.#Parameter(19), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(18),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(18),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(19)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(18),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(19)
		#ElseIf "T.#Parameter(19)" = "T.Ref" #Then
			#If StrContains("#Parameter(18)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(18)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(18),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(19)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(19)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(19))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 9.
#If "#Parameter(20)" = "" И "#Parameter(21)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(20)" = "Condition" Или "#Parameter(20)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(21) )
#ElseIf "#Parameter(20)" = "ReadRight" Или "#Parameter(20)" = "EditRight" #Then
	И T.#Parameter(21) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(21))
		#If Не "#Parameter(20)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(20)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(21)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(21)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(20),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(20)", ",") #Then
		InvalidAccessKind: "#Parameter(20)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(20)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(20),") #Then
	И
	 (
			ISNULL(T.#Parameter(21), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(20),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(20),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(21)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(20),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(21)
		#ElseIf "T.#Parameter(21)" = "T.Ref" #Then
			#If StrContains("#Parameter(20)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(20)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(20),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(21)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(21)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(21))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 10.
#If "#Parameter(22)" = "" И "#Parameter(23)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(22)" = "Condition" Или "#Parameter(22)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(23) )
#ElseIf "#Parameter(22)" = "ReadRight" Или "#Parameter(22)" = "EditRight" #Then
	И T.#Parameter(23) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(23))
		#If Не "#Parameter(22)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(22)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(23)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(23)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(22),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(22)", ",") #Then
		InvalidAccessKind: "#Parameter(22)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(22)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(22),") #Then
	И
	 (
			ISNULL(T.#Parameter(23), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(22),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(22),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(23)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(22),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(23)
		#ElseIf "T.#Parameter(23)" = "T.Ref" #Then
			#If StrContains("#Parameter(22)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(22)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(22),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(23)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(23)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(23))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 11.
#If "#Parameter(24)" = "" И "#Parameter(25)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(24)" = "Condition" Или "#Parameter(24)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(25) )
#ElseIf "#Parameter(24)" = "ReadRight" Или "#Parameter(24)" = "EditRight" #Then
	И T.#Parameter(25) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(25))
		#If Не "#Parameter(24)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(24)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(25)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(25)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(24),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(24)", ",") #Then
		InvalidAccessKind: "#Parameter(24)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(24)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(24),") #Then
	И
	 (
			ISNULL(T.#Parameter(25), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(24),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(24),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(25)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(24),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(25)
		#ElseIf "T.#Parameter(25)" = "T.Ref" #Then
			#If StrContains("#Parameter(24)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(24)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(24),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(25)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(25)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(25))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 12.
#If "#Parameter(26)" = "" И "#Parameter(27)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(26)" = "Condition" Или "#Parameter(26)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(27) )
#ElseIf "#Parameter(26)" = "ReadRight" Или "#Parameter(26)" = "EditRight" #Then
	И T.#Parameter(27) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(27))
		#If Не "#Parameter(26)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(26)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(27)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(27)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(26),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(26)", ",") #Then
		InvalidAccessKind: "#Parameter(26)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(26)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(26),") #Then
	И
	 (
			ISNULL(T.#Parameter(27), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(26),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(26),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(27)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(26),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(27)
		#ElseIf "T.#Parameter(27)" = "T.Ref" #Then
			#If StrContains("#Parameter(26)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(26)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(26),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(27)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(27)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(27))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 13.
#If "#Parameter(28)" = "" И "#Parameter(29)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(28)" = "Condition" Или "#Parameter(28)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(29) )
#ElseIf "#Parameter(28)" = "ReadRight" Или "#Parameter(28)" = "EditRight" #Then
	И T.#Parameter(29) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(29))
		#If Не "#Parameter(28)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(28)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(29)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(29)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(28),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(28)", ",") #Then
		InvalidAccessKind: "#Parameter(28)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(28)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(28),") #Then
	И
	 (
			ISNULL(T.#Parameter(29), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(28),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(28),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(29)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(28),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(29)
		#ElseIf "T.#Parameter(29)" = "T.Ref" #Then
			#If StrContains("#Parameter(28)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(28)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(28),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(29)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(29)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(29))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 14.
#If "#Parameter(30)" = "" И "#Parameter(31)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(30)" = "Condition" Или "#Parameter(30)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(31) )
#ElseIf "#Parameter(30)" = "ReadRight" Или "#Parameter(30)" = "EditRight" #Then
	И T.#Parameter(31) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(31))
		#If Не "#Parameter(30)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(30)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(31)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(31)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(30),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(30)", ",") #Then
		InvalidAccessKind: "#Parameter(30)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(30)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(30),") #Then
	И
	 (
			ISNULL(T.#Parameter(31), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(30),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(30),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(31)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(30),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(31)
		#ElseIf "T.#Parameter(31)" = "T.Ref" #Then
			#If StrContains("#Parameter(30)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(30)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(30),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(31)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(31)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(31))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 15.
#If "#Parameter(32)" = "" И "#Parameter(33)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(32)" = "Condition" Или "#Parameter(32)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(33) )
#ElseIf "#Parameter(32)" = "ReadRight" Или "#Parameter(32)" = "EditRight" #Then
	И T.#Parameter(33) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(33))
		#If Не "#Parameter(32)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(32)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(33)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(33)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(32),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(32)", ",") #Then
		InvalidAccessKind: "#Parameter(32)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(32)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(32),") #Then
	И
	 (
			ISNULL(T.#Parameter(33), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(32),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(32),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(33)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(32),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(33)
		#ElseIf "T.#Parameter(33)" = "T.Ref" #Then
			#If StrContains("#Parameter(32)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(32)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(32),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(33)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(33)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(33))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

//// Value verification of parameters group field 16.
#If "#Parameter(34)" = "" И "#Parameter(35)" = "" #Then
	// Parameters group is Не used.
#ElseIf "#Parameter(34)" = "Condition" Или "#Parameter(34)" = "" #Then
	// When the Condition access kind name (Или ""), then instead of field name condition is specified.
	И ( #Parameter(35) )
#ElseIf "#Parameter(34)" = "ReadRight" Или "#Parameter(34)" = "EditRight" #Then
	И T.#Parameter(35) &lt;&gt; НЕОПРЕДЕЛЕНО
	И истина In
	 (	// Verification of user's right for the Values table set in the field.
		SELECT TOP 1 истина
		FROM InformationRegister.AccessGroupsTables AS AccessGroupTablesRightCheck
		WHERE
			 AccessGroupTablesRightCheck.AccessGroup = AccessGroups.Ref
			И VALUETYPE(AccessGroupTablesRightCheck.TableType) = VALUETYPE(T.#Parameter(35))
		#If Не "#Parameter(34)" = "ReadRight" #Then
			И AccessGroupTablesRightCheck.Update
		#EndIf
	 )
#ElseIf "#Parameter(34)" = "RightSettings" #Then
	И
	 (
		истина IN // Verifying that right is allowed for user Или a user group.
			(
			SELECT TOP 1 истина
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(35)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingPermissionLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangePermissionLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
		 И Не false IN // Verifying that right is Не allowed for user Или a user group.
			(
			SELECT TOP 1 false
			FROM InformationRegister.ObjectRightsSettings AS RightSettings
				INNER JOIN InformationRegister.ObjectRightsSettingsInheritance AS SettingsInheritance
				ON
					 SettingsInheritance.Object = T.#Parameter(35)
					И RightSettings.Object = SettingsInheritance.Parent
				#If #CurrentAccessRightName = "Read" #Then
					И SettingsInheritance.UseLevel &lt; RightSettings.ReadingDeniedLevel
				#Else
				 #If StrContains(&amp;TablesWithSeparateRightSettings, "|#Parameter(1);") #Then
					И RightSettings.Table = PropertiesCurrentTable.Ref
				 #Else
					И RightSettings.Table = ЗНАЧЕНИЕ(Catalog.MetadataObjectIDs.EmptyRef)
				 #EndIf
					И SettingsInheritance.UseLevel &lt; RightSettings.ChangeDeniedLevel
				#EndIf
				INNER JOIN InformationRegister.UsersGroupsContents AS UsersGroupsContents
				ON
					 UsersGroupsContents.User = &amp;AuthorizedUser
					И UsersGroupsContents.UsersGroup = RightSettings.User
			)
	 )
#ElseIf Не StrContains(&amp;AllAccessKindsExceptSpecial, ",#Parameter(34),") #Then
	// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
	#If StrContains("#Parameter(34)", ",") #Then
		InvalidAccessKind: "#Parameter(34)" - "The list of access type names is Не found"
	#Else
		InvalidAccessKind: "#Parameter(34)" - "Access type name is Не found"
	#EndIf
#ElseIf &amp;AccessKindsWithDisabledUse &lt;&gt; "All"
 И Не StrContains(&amp;AccessKindsWithDisabledUse, ",#Parameter(34),") #Then
	И
	 (
			ISNULL(T.#Parameter(35), НЕОПРЕДЕЛЕНО) &lt;&gt; НЕОПРЕДЕЛЕНО
			И
		#If (Не StrContains(&amp;AccessKindsWithDisabledUse, ",Users,") И StrContains(",#Parameter(34),", ",Users,"))
		 Или (Не StrContains(&amp;AccessKindsWithDisabledUse, ",ExternalUsers,") И StrContains(",#Parameter(34),", ",ExternalUsers,")) #Then
			Не
			(
			Не истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessValuesGroups AS AccessValuesGroups
				WHERE
					 AccessValuesGroups.AccessValue = T.#Parameter(35)
					И AccessValuesGroups.AccessValuesGroup = &amp;AuthorizedUser
				)
			И Не
		#Else
			(
		#EndIf
			CASE
			WHEN истина In
				(
		#If StrContains(&amp;AccessKindsWithoutGroupsForAccessValue, ",#Parameter(34),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.#Parameter(35)
		#ElseIf "T.#Parameter(35)" = "T.Ref" #Then
			#If StrContains("#Parameter(34)", ",") #Then
				// When the parameter is set incorrectly, a row is inserted to create an error of access restriction build.
				InvalidAccessKind: "#Parameter(34)" - "When verifying the access value table, you can specify only one access kind"
			#ElseIf StrContains(&amp;AccessKindsWithOneGroupForAccessValue, ",#Parameter(34),") #Then
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
				WHERE
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = T.AccessGroup
			#Else // Access values for which you can specify several access values groups.
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN #Parameter(1).AccessGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessGroup
					И ValueGroups.Ref = T.#Parameter(35)
			#EndIf
		#Else
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsValues AS Values
					INNER JOIN InformationRegister.AccessValuesGroups AS ValueGroups
				ON
					 Values.AccessGroup = AccessGroups.Ref
					И Values.AccessValue = ValueGroups.AccessValuesGroup
					И ValueGroups.AccessValue = T.#Parameter(35)
		#EndIf
				)
			THEN истина
			ELSE false
			END
			=
			CASE
			WHEN истина In
				(
				SELECT TOP 1 истина
				FROM InformationRegister.AccessGroupsDefaultValues AS DefaultValues
				WHERE
				 DefaultValues.AccessGroup = AccessGroups.Ref
				 И VALUETYPE(DefaultValues.AccessValuesType) = VALUETYPE(T.#Parameter(35))
				 И DefaultValues.AllAllowed = false
				)
			THEN истина
			ELSE false
			END
			)
	 )
#EndIf

 )
)
#EndIf

</condition>
	</restrictionTemplate>
</Rights>