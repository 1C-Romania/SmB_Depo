
#Region AutogeneratedCode
&AtClient
Procedure InaccessibleGroupFields()
	
	Items.GroupFieldsPages.CurrentPage = Items.GroupFieldsSettingsInaccessible;
					
EndProcedure

&AtClient
Procedure AccessibleSelectedFields(StructureItem)
	
	If Report.SettingsComposer.Settings.HasItemSelection(StructureItem) Then
				
		LocalSelectedFields = True;
		Items.SelectedFieldsPages.CurrentPage = Items.SelectedFieldsSettings;
			
	Else
			
		LocalSelectedFields = False;
		Items.SelectedFieldsPages.CurrentPage = Items.SelectedFieldsSettingsOff;
			
	EndIf;
		
	Items.LocalSelectedFields.ReadOnly = False;
					
EndProcedure

&AtClient
Procedure InaccessibleSelectedFields()
	
	LocalSelectedFields = False;
	Items.LocalSelectedFields.ReadOnly = True;
	Items.SelectedFieldsPages.CurrentPage = Items.SelectedFieldsSettingsInaccessible;
					
EndProcedure

&AtClient
Procedure AccessibleFilter(StructureItem)
	
	If Report.SettingsComposer.Settings.HasItemFilter(StructureItem) Then
		
		LocalFilter = True;
		Items.FilterPages.CurrentPage = Items.FilterSettings;
			
	Else
		
		LocalFilter = False;
		Items.FilterPages.CurrentPage = Items.FilterSettingsOff;
			
	EndIf;
			
	Items.LocalFilter.ReadOnly = False;
	
EndProcedure
		
&AtClient
Procedure InaccessibleFilter()
	
	LocalFilter = False;
	Items.LocalFilter.ReadOnly = True;
	Items.FilterPages.CurrentPage = Items.FilterSettingsInaccessible;
		
EndProcedure

&AtClient
Procedure AccessibleOrder(StructureItem)
	
	If Report.SettingsComposer.Settings.HasItemOrder(StructureItem) Then
		
		LocalOrder = True;
		Items.OrderPages.CurrentPage = Items.OrderSettings;
					
	Else
		
		LocalOrder = False;
		Items.OrderPages.CurrentPage = Items.OrderSettingsOff;
					
	EndIf;
			
	Items.LocalOrder.ReadOnly = False;
		
EndProcedure

&AtClient
Procedure InaccessibleOrder()
	
	LocalOrder = False;
	Items.LocalOrder.ReadOnly = True;
	Items.OrderPages.CurrentPage = Items.OrderSettingsInaccessible;
		
EndProcedure

&AtClient
Procedure AccessibleConditionalAppearance(StructureItem)
	
	If Report.SettingsComposer.Settings.HasItemConditionalAppearance(StructureItem) Then
		
		LocalConditionalAppearance = True;
		Items.ConditionalAppearancePages.CurrentPage = Items.ConditionalAppearanceSettings;
					
	Else
		
		LocalConditionalAppearance = False;
		Items.ConditionalAppearancePages.CurrentPage = Items.ConditionalAppearanceSettingsOff;
					
	EndIf;
			
	Items.LocalConditionalAppearance.ReadOnly = False;
		
EndProcedure

&AtClient
Procedure InaccessibleConditionalAppearance()
	
	LocalConditionalAppearance = False;
	Items.LocalConditionalAppearance.ReadOnly = True;
	Items.ConditionalAppearancePages.CurrentPage = Items.ConditionalAppearanceSettingsInaccessible;
		
EndProcedure

&AtClient
Procedure AccessibleOutputParameters(StructureItem)
	
	If Report.SettingsComposer.Settings.HasItemOutputParameters(StructureItem) Then
		
		LocalOutputParameters = True;
		Items.OutputParametersPages.CurrentPage = Items.OutputParametersSettings;
					
	Else
		
		LocalOutputParameters = False;
		Items.OutputParametersPages.CurrentPage = Items.OutputParametersSettingsOff;
					
	EndIf;
			
	Items.LocalOutputParameters.ReadOnly = False;
		
EndProcedure

&AtClient
Procedure InaccessibleOutputParameters()
	
	LocalOutputParameters = False;
	Items.LocalOutputParameters.ReadOnly = True;
	Items.OutputParametersPages.CurrentPage = Items.OutputParametersSettingsInaccessible;
	
EndProcedure

&AtClient
Procedure SettingsComposerSettingsOnActivateField(Item)
		
	Var SelectedPage;
	
	If Items.SettingsComposerSettings.CurrentItem.Name = "SettingsComposerSettingsHasSelection" Then
		
		SelectedPage = Items.SelectedFieldsPage;
		
	ElsIf Items.SettingsComposerSettings.CurrentItem.Name = "SettingsComposerSettingsHasFilter" Then
		
		SelectedPage = Items.FilterPage;
		
	ElsIf Items.SettingsComposerSettings.CurrentItem.Name = "SettingsComposerSettingsHasOrder" Then
		
		SelectedPage = Items.OrderPage;
		
	ElsIf Items.SettingsComposerSettings.CurrentItem.Name = "SettingsComposerSettingsHasConditionalAppearance" Then
		
		SelectedPage = Items.ConditionalAppearancePage;
		
	ElsIf Items.SettingsComposerSettings.CurrentItem.Name = "SettingsComposerSettingsHasOutputParameters" Then
		
		SelectedPage = Items.OutputParametersPage;
		
	EndIf;
	
	If SelectedPage <> Undefined Then
		
		Items.SettingPages.CurrentPage = SelectedPage;
		
	EndIf;

EndProcedure

&AtClient
Procedure SettingsComposerSettingsOnActivateRow(Item)
	
	StructureItem = Report.SettingsComposer.Settings.GetObjectByID(Items.SettingsComposerSettings.CurrentRow);
	ItemType = TypeOf(StructureItem); 
	
	If ItemType = Undefined  OR
	   ItemType = Type("DataCompositionChartStructureItemCollection") OR
	   ItemType = Type("DataCompositionTableStructureItemCollection") Then
		 
		InaccessibleGroupFields();
		InaccessibleSelectedFields();
		InaccessibleFilter();
		InaccessibleOrder();
		InaccessibleConditionalAppearance();
		InaccessibleOutputParameters();
		
	ElsIf ItemType = Type("DataCompositionSettings") OR
		  ItemType = Type("DataCompositionNestedObjectSettings") Then
		
		InaccessibleGroupFields();
		
		LocalSelectedFields = True;
		Items.LocalSelectedFields.ReadOnly = True;
		Items.SelectedFieldsPages.CurrentPage = Items.SelectedFieldsSettings;
		
		LocalFilter = True;
		Items.LocalFilter.ReadOnly = True;
		Items.FilterPages.CurrentPage = Items.FilterSettings;
		
		LocalOrder = True;
		Items.LocalOrder.ReadOnly = True;
		Items.OrderPages.CurrentPage = Items.OrderSettings;
		
		LocalConditionalAppearance = True;
		Items.LocalConditionalAppearance.ReadOnly = True;
		Items.ConditionalAppearancePages.CurrentPage = Items.ConditionalAppearanceSettings;
		
		LocalOutputParameters = True;
		Items.LocalOutputParameters.ReadOnly = True;
		Items.OutputParametersPages.CurrentPage = Items.OutputParametersSettings;
		
	ElsIf ItemType = Type("DataCompositionGroup") OR
		  ItemType = Type("DataCompositionTableGroup") OR
		  ItemType = Type("DataCompositionChartGroup") Then
		 
		Items.GroupFieldsPages.CurrentPage = Items.GroupFieldsSettings;
			
		AccessibleSelectedFields(StructureItem);
		AccessibleFilter(StructureItem);
		AccessibleOrder(StructureItem);
		AccessibleConditionalAppearance(StructureItem);
		AccessibleOutputParameters(StructureItem);
		
	ElsIf ItemType = Type("DataCompositionTable") OR
		  ItemType = Type("DataCompositionChart") Then
		
		InaccessibleGroupFields();
		AccessibleSelectedFields(StructureItem);
		InaccessibleFilter();
		InaccessibleOrder();
		AccessibleConditionalAppearance(StructureItem);
		AccessibleOutputParameters(StructureItem);
		
	EndIf;
	
EndProcedure

&AtClient
Procedure GoToReport(Item)
	
	StructureItem = Report.SettingsComposer.Settings.GetObjectByID(Items.SettingsComposerSettings.CurrentRow);
	ItemSettings =  Report.SettingsComposer.Settings.ItemSettings(StructureItem);
	Items.SettingsComposerSettings.CurrentRow = Report.SettingsComposer.Settings.GetIDByObject(ItemSettings);
	
EndProcedure

&AtClient
Procedure LocalSelectedFieldsOnChange(Item)
	
	If LocalSelectedFields Then
		
		Items.SelectedFieldsPages.CurrentPage = Items.SelectedFieldsSettings;
			
	Else
		
		Items.SelectedFieldsPages.CurrentPage = Items.SelectedFieldsSettingsOff;

		StructureItem = Report.SettingsComposer.Settings.GetObjectByID(Items.SettingsComposerSettings.CurrentRow);
		Report.SettingsComposer.Settings.ClearItemSelection(StructureItem);
		
	EndIf;
	
EndProcedure

&AtClient
Procedure LocalFilterOnChange(Item)
	
	If LocalFilter Then
		
		Items.FilterPages.CurrentPage = Items.FilterSettings;
			
	Else
		
		Items.FilterPages.CurrentPage = Items.FilterSettingsOff;

		StructureItem = Report.SettingsComposer.Settings.GetObjectByID(Items.SettingsComposerSettings.CurrentRow);
		Report.SettingsComposer.Settings.ClearItemFilter(StructureItem);
		
	EndIf;
	
EndProcedure

&AtClient
Procedure LocalOrderOnChange(Item)
	
	If LocalOrder Then
		
		Items.OrderPages.CurrentPage = Items.OrderSettings;
					
	Else
		
		Items.OrderPages.CurrentPage = Items.OrderSettingsOff;
					
		StructureItem = Report.SettingsComposer.Settings.GetObjectByID(Items.SettingsComposerSettings.CurrentRow);
		Report.SettingsComposer.Settings.ClearItemOrder(StructureItem);
		
	EndIf;
				
EndProcedure

&AtClient
Procedure LocalConditionalAppearanceOnChange(Item)

	If LocalConditionalAppearance Then
		
		Items.ConditionalAppearancePages.CurrentPage = Items.ConditionalAppearanceSettings;
					
	Else
		
		Items.ConditionalAppearancePages.CurrentPage = Items.ConditionalAppearanceSettingsOff;
					
		StructureItem = Report.SettingsComposer.Settings.GetObjectByID(Items.SettingsComposerSettings.CurrentRow);
		Report.SettingsComposer.Settings.ClearItemConditionalAppearance(StructureItem);
					
	EndIf;
				
EndProcedure

&AtClient
Procedure LocalOutputParametersOnChange(Item)
	
	If LocalOutputParameters Then
		
		Items.OutputParametersPages.CurrentPage = Items.OutputParametersSettings;
					
	Else
		
		Items.OutputParametersPages.CurrentPage = Items.OutputParametersSettingsOff;
					
		StructureItem = Report.SettingsComposer.Settings.GetObjectByID(Items.SettingsComposerSettings.CurrentRow);
		Report.SettingsComposer.Settings.ClearItemOutputParameters(StructureItem);
	EndIf;
			
EndProcedure

#EndRegion

#Region FormHandlers

&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	ReportObject = FormAttributeToValue("Report");
	ReportMetadataName = "Report."+ReportObject.Metadata().Name;
	ReportSynonym = ReportObject.Metadata().Synonym;
	
	// create list of mandatory data parameters from schema
	TempMandatoryAttributes = New Map;
	For Each SchemaParameter In ReportObject.DataCompositionSchema.Parameters Do
		
		If SchemaParameter.DenyIncompleteValues Then
			TempMandatoryAttributes.Insert(SchemaParameter.Name);
		EndIf;	
		
	EndDo;	
	
	MandatoryAttributes = New FixedMap(TempMandatoryAttributes);
	
	TempSpecialFieldsArray = New Array;
	For Each DataSet In ReportObject.DataCompositionSchema.DataSets Do
		
		For Each Field In DataSet.Fields Do
			
			If TypeOf(Field) = Type("DataCompositionSchemaDataSetField") AND Field.Role.PeriodNumber>0 Then
				
				TempSpecialFieldsArray.Add(Field.Field);
				
			EndIf;	
			
		EndDo;	
		
	EndDo;	
	
	SpecialFieldNamesArray = New FixedArray(TempSpecialFieldsArray);

EndProcedure

&AtClient
Procedure OnOpen(Cancel)
	
	If Parameters.RestoreFormData Then
		ThisForm.Report.SettingsComposer.LoadSettings(FormOwner.Report.SettingsComposer.Settings); 
	EndIf;
	
	If Parameters.BlankSettings Then
		PrepareBlankSetting();
	EndIf;	
	
	InitVisualItems(True);
	
	IsSimpleSettingsParameter = ReportsModulesAtClientAtServer.GetSettingsParameter(Report.SettingsComposer.Settings,"SimpleSetting");
	If IsSimpleSettingsParameter <> Undefined Then
		IsSimpleSettings = IsSimpleSettingsParameter.Value;
	Else
		IsSimpleSettings = False;
	EndIf;	
			
	If IsSimpleSettings Then
		TransformFullSettingsToSimpleSettings(True);
	EndIf;
	
	Report.SettingsComposer.Settings.AdditionalProperties.Property("SettingPresentation",SettingDescription);
	
	If Parameters.BlankSettings Then
		SettingDescription = Parameters.BlankSettingsName;
	EndIf;	
	
	SetFormTitle();
	
	UpdateDialog();
	
EndProcedure

&AtServer
Procedure FillCheckProcessingAtServer(Cancel, CheckedAttributes)
	For Each MapItem In MandatoryAttributes Do
		CheckedAttributes.Add(MapItem.Key);	
	EndDo;		
EndProcedure

#EndRegion

#Region CommandsHandlers

&AtClient
Procedure CancelEdit(Command)
	
	If Parameters.BlankSettings Then
		
		ThisForm.Report.SettingsComposer.LoadSettings(FormOwner.Report.SettingsComposer.Settings);
		
	EndIf;	
	
	Close(False);
	
EndProcedure

&AtClient
Procedure ApplyChangesAndCreateReport(Command)
	
	If CheckFilling() Then
		
		WriteVisualItems();
		
		If Items.GroupSettingsTypes.CurrentPage = Items.GroupSimpleSettings Then
			ApplySimpleSettings();
		EndIf;	
		
		Report.SettingsComposer.Settings.AdditionalProperties.Insert("SettingDescription",SettingDescription);
				
		FormOwner.Report.SettingsComposer = Report.SettingsComposer;
		
		Close(True);
		
	EndIf;
	
EndProcedure

&AtClient
Procedure SwitchToSimpleSettings(Command)
	
	If NOT IsSettingTransformPossible() Then
		
	EndIf;	

	IsSimpleSettings = True;
	ReportsModulesAtClientAtServer.SetSettingsParameter(Report.SettingsComposer.Settings,"SimpleSetting",IsSimpleSettings);
	TransformFullSettingsToSimpleSettings();
	UpdateDialog();
	
EndProcedure

&AtClient
Procedure SwitchToFullSettings(Command)
	
	IsSimpleSettings = False;
	ReportsModulesAtClientAtServer.SetSettingsParameter(Report.SettingsComposer.Settings,"SimpleSetting",IsSimpleSettings);
	ApplySimpleSettings();
	UpdateDialog();
	
EndProcedure

&AtClient
Procedure ChoosePeriodFromTo(Command)
	
	ChoiceParameters = New Structure("BeginOfPeriod,EndOfPeriod", BeginOfPeriod, EndOfPeriod);
	NotifyDescription = New NotifyDescription("ChoosePeriodFromToFinish", ThisObject);
	OpenForm("CommonForm.StandardPeriodChoiceForm", ChoiceParameters, Items.ChoosePeriodFromTo, , , , NotifyDescription);

EndProcedure

&AtClient
Procedure ChoosePeriodFromToFinish(Result, AdditionalParameters) Export
	
	If Result <> Undefined Then
		BeginOfPeriod = Result.BeginOfPeriod;
		EndOfPeriod  = Result.EndOfPeriod;
	EndIf;
	
EndProcedure

&AtClient
Procedure AddCurrentFieldToFilter(Command)
	
	NewFilter = Report.SettingsComposer.Settings.Filter.Items.Add(Type("DataCompositionFilterItem"));
	NewFilter.LeftValue = New DataCompositionField(Items.SettingsComposerSimpleSettingsSelectionSelectionAvailableFields.CurrentRow);
	
EndProcedure

&AtClient
Procedure AddCurrentFieldToOrder(Command)
	
	NewOrder = Report.SettingsComposer.Settings.Order.Items.Add(Type("DataCompositionOrderItem"));
	NewOrder.Field = New DataCompositionField(Items.SettingsComposerSimpleSettingsSelectionSelectionAvailableFields.CurrentRow);
	
EndProcedure

#EndRegion

#Region ItemsHandlers

&AtClient
Procedure SettingsComposerSimpleSettingsOrderOnChange(Item)
	
	
EndProcedure

&AtClient
Procedure SettingsComposerSimpleSettingsSelectionSelectionAvailableFieldsOnActivateRow(Item)
	FilterAvaliableField = Report.SettingsComposer.Settings.FilterAvailableFields.FindField(New DataCompositionField(Items.SettingsComposerSimpleSettingsSelectionSelectionAvailableFields.CurrentRow));
	Items.AddCurrentFieldToFilter.Enabled = (FilterAvaliableField<>Undefined) AND NOT FilterAvaliableField.Folder;
	
	OrderAvaliableField = Report.SettingsComposer.Settings.OrderAvailableFields.FindField(New DataCompositionField(Items.SettingsComposerSimpleSettingsSelectionSelectionAvailableFields.CurrentRow));
	Items.AddCurrentFieldToOrder.Enabled = (OrderAvaliableField<>Undefined) AND NOT OrderAvaliableField.Folder;
	
EndProcedure

&AtClient
Procedure SettingDescriptionOnChange(Item)
	Report.SettingsComposer.Settings.AdditionalProperties.Insert("SettingPresentation",SettingDescription);
	SetFormTitle();
EndProcedure

#EndRegion

#Region Other

&AtServer
Procedure TransformFullSettingsToSimpleSettings(Val IsDetailed = False)
		
	FullSettings = Report.SettingsComposer.GetSettings();
	Report.SettingsComposer.Settings.Structure.Clear();
	Report.SettingsComposer.Settings.ClearItemConditionalAppearance(Report.SettingsComposer.Settings);
	Report.SettingsComposer.Settings.ClearItemOrder(Report.SettingsComposer.Settings);
	Report.SettingsComposer.Settings.ClearItemSelection(Report.SettingsComposer.Settings);
	
	SimpleStructureItem = Report.SettingsComposer.Settings;
	
	FieldsTable = New ValueTable;
	FieldsTable.Columns.Add("Field");
	FieldsTable.Columns.Add("OrderType");
	FieldsTable.Columns.Add("Priority");
	
	TransformFullStructureToSimpleStructureRecursively(FullSettings,FieldsTable);
	
	FieldsTable.Sort("Priority Asc");
	
	For Each FieldsTableRow In FieldsTable Do
		
		SimpleStructureItemField = SimpleStructureItem.Order.Items.Add(Type("DataCompositionOrderItem"));
		SimpleStructureItemField.Field = FieldsTableRow.Field;
		If FieldsTableRow.OrderType<>Undefined Then
			SimpleStructureItemField.OrderType = FieldsTableRow.OrderType;
		EndIf;
		
	EndDo;	
	
	Report.SettingsComposer.Refresh(DataCompositionSettingsRefreshMethod.Full);
	
EndProcedure	

&AtServer
Procedure TransformFullStructureToSimpleStructureRecursively(Val FullStructureItem,FieldsTable)
	
	SimpleFieldsSets = New Array;

	If TypeOf(FullStructureItem) = Type("DataCompositionTable") Then
		For Each FullStructureItemRow In FullStructureItem.Rows Do
			TransformFullStructureToSimpleStructureRecursively(FullStructureItemRow,FieldsTable);
		EndDo;	
	Else
		SimpleFieldsSets.Add(FullStructureItem.Order);
		If TypeOf(FullStructureItem) = Type("DataCompositionGroup") Then
			SimpleFieldsSets.Add(FullStructureItem.GroupFields);
		EndIf;
		SimpleFieldsSets.Add(FullStructureItem.Selection);
		
		For Each SimpleFieldsSet In SimpleFieldsSets Do
			
			For Each SimpleFieldsSetField In SimpleFieldsSet.Items Do
				
				// skipping all autofields and unchecked fields
				If TypeOf(SimpleFieldsSetField) = Type("DataCompositionAutoOrderItem")
					OR TypeOf(SimpleFieldsSetField) = Type("DataCompositionAutoGroupField")
					OR TypeOf(SimpleFieldsSetField) = Type("DataCompositionAutoSelectedField")
					OR ((TypeOf(SimpleFieldsSetField) = Type("DataCompositionOrderItem")
					OR TypeOf(SimpleFieldsSetField) = Type("DataCompositionSelectedFieldGroup")
					OR TypeOf(SimpleFieldsSetField) = Type("DataCompositionSelectedField")) AND NOT SimpleFieldsSetField.Use)Then
					Continue;
				EndIf;	
				
				
				If TypeOf(SimpleFieldsSetField)=Type("DataCompositionSelectedFieldGroup") Then
					For Each SimpleFieldsSetFieldGroupItem In SimpleFieldsSetField.Items Do
						If SimpleFieldsSetFieldGroupItem.Use Then
							AddFieldIntoFieldsTable(SimpleFieldsSetFieldGroupItem,FieldsTable);
						EndIf;	
					EndDo;	
				Else	
					AddFieldIntoFieldsTable(SimpleFieldsSetField,FieldsTable);
				EndIf;	
				
			EndDo;
			
		EndDo;	
		
		If (TypeOf(FullStructureItem) = Type("DataCompositionGroup")
			OR TypeOf(FullStructureItem) = Type("DataCompositionSettings"))
			AND FullStructureItem.Structure.Count()>0 Then
			TransformFullStructureToSimpleStructureRecursively(FullStructureItem.Structure[0],FieldsTable);
		EndIf;	
	EndIf;

	
EndProcedure	

&AtServer
Procedure AddFieldIntoFieldsTable(Val SimpleFieldsSetField,FieldsTable)
	// priority 0 - is the most important, 2 - less, -1 is not arranged
	// 0 - group field with ordering
	// 1 - group field with no ordering
	// 2 - any resources
	
	FieldsTableRow = FieldsTable.Find(SimpleFieldsSetField.Field,"Field");
	
	If FieldsTableRow = Undefined Then
		FieldsTableRow = FieldsTable.Add();
		FieldsTableRow.Field = SimpleFieldsSetField.Field;
		FieldsTableRow.Priority = -1;
	EndIf;	
	If TypeOf(SimpleFieldsSetField) = Type("DataCompositionOrderItem") Then
		FieldsTableRow.OrderType = SimpleFieldsSetField.OrderType;
		FoundField = Report.SettingsComposer.Settings.GroupAvailableFields.FindField(SimpleFieldsSetField.Field);
		If FoundField <>Undefined AND NOT FoundField.Resource Then
			FieldsTableRow.Priority = 0;
		Else
			FieldsTableRow.Priority = 2;
		EndIf;	
	ElsIf TypeOf(SimpleFieldsSetField) = Type("DataCompositionGroupField") AND FieldsTableRow.Priority=-1 Then
		FieldsTableRow.Priority = 1;
	ElsIf TypeOf(SimpleFieldsSetField) = Type("DataCompositionSelectedField") AND FieldsTableRow.Priority=-1 Then
		FieldsTableRow.Priority = 2;
	EndIf;	

EndProcedure	

&AtClient
Function IsSettingTransformPossible()
	
	Return True;
	
EndFunction	

&AtClient
Procedure UpdateDialog()
	
	Items.SwitchToFullSettings.Visible = IsSimpleSettings;
	Items.SwitchToSimpleSettings.Visible = NOT IsSimpleSettings;
	
	If IsSimpleSettings Then
		Items.GroupSettingsTypes.CurrentPage = Items.GroupSimpleSettings;
	Else
		Items.GroupSettingsTypes.CurrentPage = Items.GroupFullSettings;
	EndIf;	
	
	RefreshDataRepresentation();
	
EndProcedure	

&AtClient
Procedure ApplySimpleSettings()
	
	Report.SettingsComposer.Settings.Structure.Clear();
	Report.SettingsComposer.Settings.Selection.Items.Clear();
	TopStructure = Report.SettingsComposer.Settings.Structure.Add(Type("DataCompositionGroup"));
	
	// special field is the field that can't be stored in group

	WasSpecialField = False;
	For Each OrderField In Report.SettingsComposer.Settings.Order.Items Do
		
		For Each SpecialFieldNamesArrayItem In SpecialFieldNamesArray Do
			If Upper(OrderField.Field) = Upper(SpecialFieldNamesArrayItem)
				OR Find(Upper(OrderField.Field),Upper(SpecialFieldNamesArrayItem+"."))>0 Then
				WasSpecialField = True;
			EndIf	
		EndDo;	
		
		SelectionField = Report.SettingsComposer.Settings.Selection.Items.Add(Type("DataCompositionSelectedField"));
		SelectionField.Field = OrderField.Field;
		SelectionField.Use = True;
		
		GroupAvailableField = TopStructure.GroupFields.GroupFieldsAvailableFields.FindField(OrderField.Field);
		
		If GroupAvailableField<>Undefined AND NOT GroupAvailableField.Resource Then
			GroupField = TopStructure.GroupFields.Items.Add(Type("DataCompositionGroupField"));
			GroupField.Field = OrderField.Field;
			GroupField.GroupType = DataCompositionGroupType.Items;
			GroupField.Use = True;
		EndIf;
		
	EndDo;	
	
	If WasSpecialField Then
		// need to clear group and use detail records instead
		TopStructure.GroupFields.Items.Clear();
	EndIf;	
	
	TopStructure.Selection.Items.Add(Type("DataCompositionAutoSelectedField"));
	TopStructure.Order.Items.Add(Type("DataCompositionAutoOrderItem"));
	
	For Each UserSettingItem In Report.SettingsComposer.UserSettings.Items Do
		UserSettingItem.UserSettingID = "";
	EndDo;	
	
	For Each FilterField In Report.SettingsComposer.Settings.Filter.Items Do
		FilterField.UserSettingID = New UUID;
		FilterField.ViewMode = DataCompositionSettingsItemViewMode.QuickAccess;
	EndDo;	
	
EndProcedure	

&AtClient
Procedure ApplyPeriodChanges()
	
	DataParameters = Report.SettingsComposer.Settings.DataParameters;
	BeginPeriodParameterValue = DataParameters.FindParameterValue(New DataCompositionParameter("BeginOfPeriod"));
	EndPeriodParameterValue = DataParameters.FindParameterValue(New DataCompositionParameter("EndOfPeriod"));
	PeriodParameterValue = DataParameters.FindParameterValue(New DataCompositionParameter("Period"));
	
	If BeginPeriodParameterValue <> Undefined Then
		BeginPeriodParameterValue.Use = True;
		BeginPeriodParameterValue.Value = BeginOfPeriod;
	EndIf;
	
	If EndPeriodParameterValue <> Undefined Then
		EndPeriodParameterValue.Use = True;
		EndPeriodParameterValue.Value = ?(EndOfPeriod = '00010101', EndOfPeriod, EndOfDay(EndOfPeriod));
	EndIf;
	
	If PeriodParameterValue <> Undefined Then
		PeriodParameterValue.Use = True;
		PeriodParameterValue.Value = ?(Period = '00010101', Period, EndOfDay(Period));
	EndIf;

EndProcedure	

&AtClient
Procedure ReadPeriods()
	
	DataParameters = Report.SettingsComposer.Settings.DataParameters;
	
	BeginPeriodParameterValue = DataParameters.FindParameterValue(New DataCompositionParameter("BeginOfPeriod"));
	ParameterEndPeriodValue = DataParameters.FindParameterValue(New DataCompositionParameter("EndOfPeriod"));
	PeriodParameterValue = DataParameters.FindParameterValue(New DataCompositionParameter("Period"));
	
	If BeginPeriodParameterValue <> Undefined 
		AND ParameterEndPeriodValue <> Undefined Then
		BeginOfPeriod = BeginPeriodParameterValue.Value;
		EndOfPeriod = ParameterEndPeriodValue.Value;
		Items.GroupPeriodSettingsTabs.CurrentPage = Items.GroupPeriodSettingsFromToPeriod;
	ElsIf PeriodParameterValue <> Undefined Then
		Period = PeriodParameterValue.Value;
		Items.GroupPeriodSettingsTabs.CurrentPage = Items.GroupPeriodSettingsSinglePeriodTab;
	Else
		Items.GroupPeriodSettingsTabs.CurrentPage = Items.GroupPeriodSettingsNoPeriod;
	EndIf;
	
EndProcedure

&AtClient
Procedure PrepareBlankSetting()
	
	Report.SettingsComposer.LoadSettings(Report.SettingsComposer.FixedSettings);
	
	Report.SettingsComposer.Settings.ClearItemFilter(Report.SettingsComposer.Settings);
	Report.SettingsComposer.Settings.ClearItemOrder(Report.SettingsComposer.Settings);
	Report.SettingsComposer.Settings.ClearItemSelection(Report.SettingsComposer.Settings);
	Report.SettingsComposer.Settings.Structure.Clear();
	
	ReportsModulesAtClientAtServer.SetOutputParameter(Report.SettingsComposer.Settings,"AppearanceTemplate","DefaultReportPresentationTemplate");
	ReportsModulesAtClientAtServer.SetOutputParameter(Report.SettingsComposer.Settings,"ResourcesAutoPosition",DataCompositionResourcesAutoPosition.DontUse);
	ReportsModulesAtClientAtServer.SetOutputParameter(Report.SettingsComposer.Settings,"FilterOutput",DataCompositionTextOutputType.DontOutput);
	ReportsModulesAtClientAtServer.SetOutputParameter(Report.SettingsComposer.Settings,"DataParametersOutput",DataCompositionTextOutputType.DontOutput);
	ReportsModulesAtClientAtServer.SetOutputParameter(Report.SettingsComposer.Settings,"TitleOutput",DataCompositionTextOutputType.DontOutput);
	ReportsModulesAtClientAtServer.SetOutputParameter(Report.SettingsComposer.Settings,"Title","");

	
	ReportsModulesAtClientAtServer.SetSettingsParameter(Report.SettingsComposer.Settings,"SimpleSetting",True);
	ReportsModulesAtClientAtServer.SetSettingsParameter(Report.SettingsComposer.Settings,"ExtendedSetting",True);
	
EndProcedure

&AtClient
Procedure SetFormTitle()
	
	If Report.SettingsComposer.Settings.AdditionalProperties.Property("DetailsSettingPresentation") Then
		TmpSettingPresentation = "";
		Report.SettingsComposer.Settings.AdditionalProperties.Property("DetailsSettingPresentation",TmpSettingPresentation);
		Title = ReportSynonym + " " + Nstr("en='(detailed ';pl='(uszczegółowiony ';ru='(подробный '") + TmpSettingPresentation + ")";
	Else	
		TmpSettingPresentation = "";
		Report.SettingsComposer.Settings.AdditionalProperties.Property("SettingPresentation",TmpSettingPresentation);
		Title = ReportSynonym + ?(IsBlankString(TmpSettingPresentation),""," ("+TmpSettingPresentation+")");
	EndIf;
	
EndProcedure	

&AtClient
Procedure SetReportTitle()
	Var LocalTitle;
	LocalTitle = ReportSynonym + " " + ReportsModulesAtClient.GetReportPeriodDescription(Report.SettingsComposer);
	TitleParameter = ReportsModulesAtClientAtServer.GetOutputParameter(Report.SettingsComposer.Settings,"Title");
	// dont use platforms SetParameterValue, because it's sets use mode, but it's controled other way in reports
	TitleParameter.Value = LocalTitle;
EndProcedure	

&AtClient
Procedure InitVisualItems(Val IsOnOpen = False)
	
	ReadPeriods();
		
EndProcedure

&AtClient
Procedure WriteVisualItems()
	
	ApplyPeriodChanges();
	
EndProcedure

#EndRegion
