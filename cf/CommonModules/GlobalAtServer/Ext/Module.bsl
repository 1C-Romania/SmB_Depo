
// calling at server
Function GetServerDate() Export
	
	Return CurrentDate();
	
EndFunction


//Function GetEnumValueByName(Val EnumObject, Val EnumName) Export
//	
//	If EnumName = "" Then
//		
//		Return EnumObject.EmptyRef();
//		

//	Else
//		Try
//		
//			GotEnum = EnumObject[EnumName];
//		
//		Except
//			
//			Return EnumObject.EmptyRef();
//			
//		EndTry; 
//		
//		Return GotEnum;
//		
//	EndIf;
//	
//EndFunction // GetEnumValueByName()

//Function IsUniqueBarCode(Val BarCode, Val ExcludeObjects = Undefined,Val FoundObjects = Undefined) Export
//	
//	Query = New Query;
//	Query.Text = "SELECT DISTINCT
//	             |	Items.Ref
//	             |FROM
//	             |	Catalog.Items AS Items
//	             |WHERE
//	             |	NOT Items.Ref IN (&ExcludeObjects)
//	             |	AND Items.MainBarCode = &BarCode
//	             |	AND Items.MainBarCode <> """"
//	             |
//	             |UNION
//	             |
//	             |SELECT
//	             |	BarCodes.Object
//	             |FROM
//	             |	InformationRegister.BarCodes AS BarCodes
//	             |WHERE
//	             |	NOT BarCodes.Object IN (&ExcludeObjects)
//	             |	AND BarCodes.BarCode = &BarCode
//	             |	AND BarCodes.BarCode <> """"";
//	Query.SetParameter("ExcludeObjects",ExcludeObjects);
//	Query.SetParameter("BarCode",BarCode);
//	FoundObjects = Query.Execute().Unload().UnloadColumn("Ref");
//	
//	Return (FoundObjects.Count()<1);
//	
//EndFunction	

//Function GetDocumentCaption(Val DocumentRef, Val DocumentSynonym = "") Export 
//	
//	DocumentSynonym = ?(IsBlankString(DocumentSynonym), DocumentRef.Metadata().Synonym, DocumentSynonym);
//	NumberAndDate = " #" + DocumentRef.Number + NStr("en=' date ';pl=' data '") + Format(DocumentRef.Date, "DLF=D");
//	Return DocumentSynonym + NumberAndDate;

//EndFunction // GetDocumentCaption()

/////////////////////////////////////////////////////////////////////

//Function GetNationalAmount(Val Amount, Val Currency, Val ExchangeRate) Export
//	
//	If ValueIsNotFilled(Currency) Or Currency = Constants.NationalCurrency.Get() Then
//		Return Amount;
//	Else
//		Return Round(Amount*ExchangeRate, 2);
//	EndIf;
//	
//EndFunction

//Function GetUserSettingsValue(Val Setting, Val User = Undefined) Export
//	
//	If TypeOf(Setting) = Type("String") Then
//		UserSetting = ChartsOfCharacteristicTypes.UserSettings[Setting];
//	ElsIf TypeOf(Setting) = TypeOf(ChartsOfCharacteristicTypes.UserSettings.EmptyRef()) Then
//		UserSetting = Setting;
//	Else
//		Raise NStr("en=""Wrong parameter type in function GetUserSettingsValue(). Parameter 1."";pl=""Niepoprawny typ parametru dla funkcji GetUserSettingsValue(). Parametr 1.""");
//	EndIf;
//	
//	If User = Undefined Then
//		User = SessionParameters.CurrentUser;
//	EndIf;
//	
//	Query = New Query;
//	Query.Text = "SELECT
//	             |	InformReg.Value
//	             |FROM
//	             |	InformationRegister.UserSettings AS InformReg
//	             |WHERE
//	             |	InformReg.User = &User
//	             |	AND InformReg.Setting = &Setting";
//	
//	Query.SetParameter("User",    User);
//	Query.SetParameter("Setting", UserSetting);
//	
//	Selection = Query.Execute().Select();
//	
//	EmptyValue = UserSetting.ValueType.AdjustValue();
//	
//	If Selection.Count() = 0 Then
//		Return EmptyValue;
//	ElsIf Selection.Next() Then
//		If ValueIsNotFilled(Selection.Value) Then
//			Return EmptyValue;
//		Else
//			Return Selection.Value;
//		EndIf;
//	Else
//		Return EmptyValue;
//	EndIf;
//	
//EndFunction // GetUserSettingsValue()

//Function GetGeneratedByText(LanguageCode = "") Export
//	
//	Return NStr("en = 'Generated by 1C:Enterpise 8.'; pl = 'Wygenerowany przez 1C:Enterprise 8.'; ru = 'Сформировано с помощью 1С:Предприятие 8.'", LanguageCode) + " " + NStr("en = 'Configuration'; pl = 'Konfiguracja'; ru = 'Конфигурация'", LanguageCode) + " " + Metadata.DetailedInformation;
//	
//EndFunction // GetGeneratedByText()

//Function GetCompanyLogo(Company) Export
//	
//	RecordSet = InformationRegisters.CompanyLogo.CreateRecordSet();
//	RecordSet.Filter.Company.Set(Company);
//	RecordSet.Read();
//	
//	If RecordSet.Count()>0 Then
//		
//		Record = RecordSet[0];
//		CompanyLogo = Record.Logo.Get();
//		
//		If TypeOf(CompanyLogo) = Type("BinaryData") Then
//			Return New Picture(CompanyLogo);
//		Else
//			Return New Picture;
//		EndIf;
//	Else	
//		Return New Picture;
//	EndIf;
//		
//EndFunction // GetCompanyLogo()

//Function PutCompanyLogoIntoTempStorage(Company,FormUUID) Export
//	
//	RecordSet = InformationRegisters.CompanyLogo.CreateRecordSet();
//	RecordSet.Filter.Company.Set(Company);
//	RecordSet.Read();
//	
//	If RecordSet.Count()>0 Then
//		
//		Record = RecordSet[0];
//		CompanyLogo = Record.Logo.Get();
//		
//		If TypeOf(CompanyLogo) = Type("BinaryData") Then
//			Return PutToTempStorage(CompanyLogo,FormUUID);
//		Else
//			Return "";
//		EndIf;
//	Else	
//		Return "";
//	EndIf;
//	
//EndFunction	
