////////////////////////////////////////////////////////////////////////////////
// MODULE VARIABLES

Var EthalonControl;
Var EthalonLabel;

Var BookkeepingOperationsTemplates;

////////////////////////////////////////////////////////////////////////////////
// FORM HANDLERS

Procedure BeforeOpen(Cancel, StandardProcessing)
	
	BookkeepingOperationsTemplates    = FormOwner.BookkeepingOperationsTemplate;
	ThisForm.Caption = Nstr("en='Bookkeeping operation template parameters';pl='Parametry schematu księgowania'") + ":  " + BookkeepingOperationsTemplates;

	FormStartHeight = 72;
	TotalControls     = Parameters.Count();

	EthalonControl      = Controls["TextBox1"];
	EthalonControl.Visible = False;
	EthalonLabel      = Controls["Label1"];
	EthalonLabel.Visible = False;

	// Fit form size
	Height = FormStartHeight + (EthalonLabel.Height + 0) * (TotalControls-1);

	For each Row In Parameters Do

		Cnt          = 1 + Parameters.Indexof(Row);
		LabelName  = "Label" + Row.Name;
		ControlName = Row.Name;

		// NewLabel
		Controls.Add(Type("Label"), LabelName);
		NewLabel = Controls[LabelName];
		ArrangeLabel(NewLabel, Cnt);
		NewLabel.Caption = TrimAll(Row.Presentation) + ":";

		// NewItem
		Controls.Add(Type("TextBox"), ControlName);
		NewItem = Controls[ControlName];
		ArrangeControl(NewItem, Cnt);

	EndDo;

	ActionOnParameterChange = New Action("ParameterOnChange");
	ActionParameterClearing      = New Action("ParameterClear");
	ActionChoiceProcessing       = New Action("ChoiceProcessing");
	ActionStartChoice          = New Action("StartChoice");

	IsAnyNotFilledValue = False;
	
	For each Row In Parameters Do

		Cnt = 1 + Parameters.Indexof(Row);

		ParameterDescription      = "";
		ParameterTypeDescription = GetParameterTypeDescription(Row.Name, ParameterDescription);

		TextBox     = Controls[Row.Name];
		
		If ValueIsNotFilled(Row.Value) Then
			IsAnyNotFilledValue = True;
		EndIf;	

		If ParameterTypeDescription <> Undefined Then

			TextBox.AutoChoiceIncomplete = True;
			Types = ParameterTypeDescription.Types();

			TextBox.ReadOnly     = False;
			TextBox.SkipOnInput = False;
			TextBox.ValueType  = ParameterTypeDescription;
			TextBox.Value     = ParameterTypeDescription.AdjustValue(Row.Value);
			TextBox.ChooseType  = Types.Count() > 1;
			TextBox.ChoiceButton = True;

			TextBox.HorizontalAlign = HorizontalAlign.Auto;

			If Types.Count() = 1 Then

				If Types[0] = Type("String") Then
					TextBox.ChoiceButton = False;
					TextBox.AutoChoiceIncomplete = False;
					TextBox.ChoiceIncomplete     = False;
				EndIf;

			Else                                                             
				TextBox.TypeRestriction = ParameterTypeDescription;
			EndIf;

		Else
			TextBox.ReadOnly     = True;
			TextBox.SkipOnInput = True;
			TextBox.ChoiceButton       = False;
			TextBox.ClearButton      = False;
		EndIf;

		TextBox.Tooltip                 = ParameterDescription.LongDescription;
		TextBox.AutoMarkIncomplete = ParameterDescription.Obligatory;

		TextBox.SetAction("OnChange",    ActionOnParameterChange);
		TextBox.SetAction("Clearing",         ActionParameterClearing);
		TextBox.SetAction("ChoiceProcessing", ActionChoiceProcessing);
		TextBox.SetAction("StartChoice",    ActionStartChoice);

		TextBox.TabOrder = Cnt;

	EndDo;
	
	If NOT IsAnyNotFilledValue AND ChooseDocumentBase Then
		AcceptParameters();
		DoneFlag = True;
		Cancel = True;
	EndIf;	

EndProcedure

////////////////////////////////////////////////////////////////////////////////
// GENERAL PURPOSE PROCEDURES AND FUNCTIONS

// Returns value of requested parameter by name
//
// Parameters:
//  Name - String - Parameter name
//
// Return Value:
//  Parameter's value
// 
Function GetParameterValue(Name)

	Return Controls[Name].Value;

EndFunction

// Returns TypeDescription of requested parameter
//
// Parameters:
//  Name - String - Parameter name
//  Par - Here will be stored ref on tabular section row
//
// Return Value:
//  TypeDescription of requested parameter
// 
Function GetParameterTypeDescription(Name, Par=Undefined) 

	If ChooseDocumentBase AND Name = "DocumentBase" Then
		
		Par = New Structure("Obligatory, LongDescription, Presentation", True,Nstr("en='Document base';pl='Dokument podstawa';ru='Документ-основание'"),Nstr("en='Document base';pl='Dokument podstawa';ru='Документ-основание'"));
		
		Return DocumentBaseTypeDescription;
		
	EndIf;	
	
	For each Par In BookkeepingOperationsTemplates.Parameters Do

		If Par.Name = Name Then

			If Par.LinkByType = "" Then
				Return Par.Type.Get();
			Else

				ParameterSettingTypeValue = GetParameterValue(Par.LinkByType);
				If ParameterSettingTypeValue = Undefined Then
					Return Undefined
				EndIf;

				Try

					If Par.ExtDimensionNumber > 0 Then
						Return ParameterSettingTypeValue.ExtDimensionTypes[Par.ExtDimensionNumber-1].ExtDimensionType.ValueType;
					Else
						Return ParameterSettingTypeValue.ValueType;
					EndIf;

				Except
					Return Undefined;
				EndTry;

			EndIf;

		EndIf;

	EndDo;

	Message(Nstr("en='In the setting of bookkeeping operation template not found parameter';pl='W ustawieniach schematu księgowania nie został znaleziony parametr'")+":  " + Name);

	Return Undefined;

EndFunction

// Set coordinates and links for TextBox control
// Parameters:
//  Control - control (TextBox)
//  Count - Number of control
//
Procedure ArrangeControl(Control, Count)

	Control.Top   = Number(EthalonControl.Top) + (EthalonControl.Height + 8) * (Count-1);
	Control.Left   = EthalonControl.Left;
	Control.Height = EthalonControl.Height;
	Control.Width = EthalonControl.Width;

	Control.SetLink(ControlEdge.Right, EthalonControl,ControlEdge.Right);

EndProcedure // ArrangeControl() 

// Set coordinates and links for Label control
// Parameters:
//  Control - control (Label)
//  Count -  Number of control
//
Procedure ArrangeLabel(Control, Count)

	Control.Top   = EthalonLabel.Top + (EthalonLabel.Height + 0) * (Count-1);
	Control.Left   = EthalonLabel.Left;
	Control.Height = EthalonLabel.Height;
	Control.Width = EthalonLabel.Width;

	Control.SetLink(ControlEdge.Right, EthalonLabel,ControlEdge.Right);

EndProcedure // ArrangeLabel() 

////////////////////////////////////////////////////////////////////////////////
// COMMAND BAR HANDLERS

Procedure ParameterOnChange(Control)

	ActionOnParameterChange = New Action("ParameterOnChange");
	ActionParameterClearing      = New Action("ParameterClear");

	BeforeAlgorithm = "";
	AfterAlgorithm  = "";

	For each Row In Parameters Do

		BeforeAlgorithm = BeforeAlgorithm + Row.Name + " = Controls." + Row.Name + ".Value;" + Chars.LF;
		AfterAlgorithm  = AfterAlgorithm  + "Controls." + Row.Name + ".Value = " + Row.Name + ";" + Chars.LF;

		If Not IsBlankString(Control) Then
			If Control.Name = Row.Name Then
				Continue;
			EndIf; 
		EndIf;

		Cnt = 1 + Parameters.Indexof(Row);

		ParameterDescription      = "";
		ParameterTypeDescription = GetParameterTypeDescription(Row.Name, ParameterDescription);

		TextBox = Controls[Row.Name];

		If ParameterTypeDescription <> Undefined Then

			Types = ParameterTypeDescription.Types();

			TextBox.AutoChoiceIncomplete = True;
			TextBox.ReadOnly          = False;
			TextBox.SkipOnInput      = False;

			If TextBox.ValueType <> ParameterTypeDescription Then
				TextBox.ValueType  = ParameterTypeDescription;
			EndIf;

			TextBox.Value     = ParameterTypeDescription.AdjustValue(TextBox.Value);
			TextBox.ChooseType  = Types.Count() > 1;
			TextBox.ChoiceButton = True;

			If Types.Count() = 1 Then

				If Types[0] = Type("String") Then
					TextBox.ChoiceButton            = False;
					TextBox.AutoChoiceIncomplete = False;
					TextBox.ChoiceIncomplete     = False;
				EndIf;

			Else
				TextBox.TypeRestriction = ParameterTypeDescription;
			EndIf;

		Else

			TextBox.ReadOnly     = True;
			TextBox.SkipOnInput = True;
			TextBox.Value      = Undefined;
			TextBox.ChoiceButton  = False;
			TextBox.ClearButton = False;

		EndIf;

		LinkByOwner = ParameterDescription.LinkByOwner;

		If Not IsBlankString(LinkByOwner) Then
			TextBox.ChoiceByOwner = Controls[LinkByOwner].Value;
		EndIf;

	EndDo;

	ParameterDescription      = "";
	ParameterTypeDescription = GetParameterTypeDescription(Control.Name, ParameterDescription);
	
EndProcedure // ParameterOnChange() 

Procedure ParameterClear(Control, StandardProcessing)

	StandardProcessing   = False;
	ParameterTypeDescription = GetParameterTypeDescription(Control.Name);

	If ParameterTypeDescription = Undefined Then

		Control.Value       = Undefined;
		Control.ReadOnly = True;
		Control.ChoiceButton   = False;
		Control.ClearButton  = False;

		Return;

	EndIf;

	Control.ReadOnly = False;
	Control.Value       = ParameterTypeDescription.AdjustValue(Undefined);

	ParameterOnChange(Control);

EndProcedure // ParameterClear() 

Procedure ChoiceProcessing(Control, SelectedValue, StandardProcessing)

	If TypeOf(SelectedValue) = Type("ValueTableRow") Then

		StandardProcessing = False;

	ElsIf TypeOf(SelectedValue) = Type("ChartOfAccountsRef.Bookkeeping") Then
		
		StandardProcessing = Accounting.AccountCanBeUsedInRecords(SelectedValue);

	EndIf;

EndProcedure

Procedure StartChoice(Control, StandardProcessing)

	ParametersList = New Structure;
	ParametersList.Insert("Date",         WorkingDate);
	ParametersList.Insert("Account",    Undefined);
	ParametersList.Insert("Item", Undefined);
	ParametersList.Insert("Warehouse",        Undefined);

	Accounting.HandleExtDimensionSelection(Control, StandardProcessing, FormOwner.Company, ParametersList);

EndProcedure

////////////////////////////////////////////////////////////////////////////////
// COMMAND BAR HANDLERS

Procedure ButtonOKOnClick(Control)

	DoneFlag = True;
	AcceptParameters();
	Close();
	
EndProcedure


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Procedure AcceptParameters()
	
	For each Parameter In Parameters Do

		Parameter.Value           = Controls[Parameter.Name].Value;
		ParameterDescription      = Undefined;
		ParameterTypeDescription = GetParameterTypeDescription(Parameter.Name, ParameterDescription);

		If ParameterDescription.Obligatory AND (Parameter.Value = ParameterTypeDescription.AdjustValue(Undefined)) Then

			Message(Nstr("en='Not filled mandatory parameter';pl='Nie został wypełniony obowiązkowy parametr'")+":  " + ParameterDescription.Presentation);
			currentcontrol = Controls[Parameter.Name];

			Return;

		EndIf;

	EndDo;
	
EndProcedure	



