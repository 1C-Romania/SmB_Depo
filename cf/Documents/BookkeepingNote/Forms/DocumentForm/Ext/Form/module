Var IsModified;
Var WasPosted;

////////////////////////////////////////////////////////////////////////////////
// PROCEDURES - EVENTS PROCESSING OF THE FORM

Procedure OnOpen()
	
	Common.CommonDocumentFormOnOpenBegin(ThisForm,ThisObject);
	
	WasPosted = Posted;
	
	If IsNew() Then
		
		CommonAtServer.FillDocumentHeader(ThisObject);
		
		// Showing number presentation with prefixes.
		Controls.Number.Data = "";
		Controls.Number.Value = DocumentsPostingAndNumbering.GetDocumentAutoNumberPresentation(ThisObject);
	
		
		If ValueIsFilled(Currency) Then
			ExchangeRate = CommonAtServer.GetExchangeRate(Currency, CommonAtServer.GetDocumentExchangeRateDate(ThisObject, True));
		EndIf;	
		
		PaymentDate = CommonAtServer.GetPaymentDate(Date, PaymentTerms);
		
		CommonAtServer.FillRemarks(ThisObject,Customer);
				
		If ValueIsFilled(Customer) Then
			CommonDue = APAR.GetCustomerCommonDue(Company,Customer);
			OverdueDue = APAR.GetCustomerOverdueDue(Company,Customer);
		EndIf;		
		
		If ValueIsNotFilled(OperationType) Then
			OperationType = Enums.OperationTypesBookkeepingNote.Positive;
		EndIf;	
		
	Else
		
		If Posted Then
			DontControlDues = True;
		Else
			CommonDue = APAR.GetCustomerCommonDue(Company,Customer);
			OverdueDue = APAR.GetCustomerOverdueDue(Company,Customer);
		EndIf;	
		
	EndIf;
	
	ShowDeliveryPointInHeader = CommonAtServer.GetUserSettingsValue("ShowDeliveryPointInDocumentHeader",SessionParameters.CurrentUser);
	DefaultDeliveryPoint = Catalogs.Customers.GetCustomerDeliveryPoint(Customer, Catalogs.Customers.EmptyRef());
	If NOT ShowDeliveryPointInHeader And (Customer.IsEmpty() Or DeliveryPoint = DefaultDeliveryPoint) Then
		Controls.DeliveryPointPanel.Collapse = ControlCollapseMode.Top;
	EndIf;
	
	Common.CommonDocumentFormOnOpenEnd(ThisForm,ThisObject);
	
	UpdateDialog();
	
EndProcedure

Procedure RefreshDisplay()
	
	AmountsStructure = GetDocumentTotalAmounts();
	TotalAmount = AmountsStructure.RecordsAmount;
		
EndProcedure

Procedure BeforeWrite(Cancel, WriteMode, PostingMode)
	
	If Controls.Number.Data = "" Then
		Number = "";
	EndIf;
	
	If WriteMode = DocumentWriteMode.Posting Then
		
		// parameter for checking
		AdditionalProperties.Insert("EditingInForm", ThisForm);
	EndIf;		
	
	IsModified = Dialogs.FillIsModifiedField(ThisForm, WriteMode, IsModified);
	
EndProcedure

Procedure AfterWrite()
	
	If Controls.Number.Data = "" Then
		Controls.Number.Data = "Number";
	EndIf;
	
	UpdateDialog();
	
	Printouts.PerformPrintOnPostAndPrintAndClose(ThisForm);
		
EndProcedure

Procedure BeforeClose(Cancel, StandardProcessing)
	
	Cancel = Dialogs.CheckDocumentModificate(ThisObject, ThisForm, IsModified);
	
EndProcedure

////////////////////////////////////////////////////////////////////////////////
// PROCEDURES - EVENTS PROCESSING OF ATTRIBUTES OF HEADER

Procedure FormActionsNestedStructure(Button)
	
	Dialogs.ShowSlaveDocuments(Ref);
	
EndProcedure

Procedure NumberStartChoice(Control, StandardProcessing)
	
	DocumentsPostingAndNumbering.OnStartChangeDocumentAutoNumber(ThisForm);
	
EndProcedure

Procedure DateOnChange(Control)
	
	Common.CommonDateOnChange(Control,ThisForm,ThisObject);
	
	ExchangeRate = CommonAtServer.GetExchangeRate(Currency, CommonAtServer.GetDocumentExchangeRateDate(ThisObject, True));
	
	PaymentDate = CommonAtServer.GetPaymentDate(Date, PaymentTerms);
	
EndProcedure

Procedure CompanyOnChange(Control)
	
	If Controls.Number.Data = "" Then
		Controls.Number.Value = DocumentsPostingAndNumbering.GetDocumentAutoNumberPresentation(ThisObject);
	EndIf;
	
EndProcedure

Procedure CustomerOnChange(Control)
	
	CustomerOnChangeCommon();
	
EndProcedure

Procedure CustomerStartChoice(Control, StandardProcessing)
	
	StandardProcessing = False;
	
	ChoiceForm = Catalogs.Customers.GetChoiceForm(, Control, Control);
	ChoiceForm.SetFilterByCustomerType(Enums.CustomerTypes.Independent, Customer);
	ChoiceForm.Open();
	
EndProcedure

Procedure DeliveryPointOnChange(Control)
	
	If ValueIsNotFilled(Customer) Then
		
		If ValueIsFilled(DeliveryPoint.HeadOffice) Then
			Customer = DeliveryPoint.HeadOffice;
		Else
			Customer = DeliveryPoint;
		EndIf;
		
		CustomerOnChangeCommon();
		
	EndIf;	

	DeliveryPointContactPerson = DeliveryPoint.DefaultContactPerson;
	
EndProcedure

Procedure DeliveryPointStartChoice(Control, StandardProcessing)
	
	StandardProcessing = False;
	
	ChoiceForm = Catalogs.Customers.GetChoiceForm(, Control, Control);
	ChoiceForm.SetFilterByHeadOffice(Customer, DeliveryPoint);
	ChoiceForm.Open();
	
EndProcedure

Procedure OperationTypeOnChange(Control)
	Records.Clear();
	Payments.Clear();
	UpdateDialog();
EndProcedure

Procedure CurrencyOnChange()
	
	ExchangeRate = CommonAtServer.GetExchangeRate(Currency, Date);
	UpdateDialog();
	
EndProcedure

Procedure ExchangeRateStartListChoice(Control, StandardProcessing)
	
	Dialogs.GlobalExchangeRateStartListChoice(Control, StandardProcessing, ThisForm, Currency);
	
EndProcedure

Procedure PaymentTermsOnChange(Control)
	
	PaymentDate = CommonAtServer.GetPaymentDate(Date, PaymentTerms);
	
EndProcedure

Procedure RemarksStartListChoice(Control, StandardProcessing)
	ChoiceList = New ValueList;
	ChoiceList.Add(CommonAtServer.GetDocumentRemarks(ThisObject,Customer));
	Control.ChoiceList = ChoiceList;
EndProcedure

Procedure PictureBoxCustomerClick(Control)
	
	If ValueIsFilled(Customer) Then
		
		CustomerForm = Customer.GetForm("ItemForm",ThisForm,ThisForm);
		CustomerForm.Controls.MainPanel.CurrentPage = CustomerForm.Controls.MainPanel.Pages.FinancialAnalysis;
		CustomerForm.GenerateFinancialData();
		CustomerForm.Open();
		
	EndIf;	
	
EndProcedure
////////////////////////////////////////////////////////////////////////////////
// PROCEDURES - EVENTS PROCESSING OF TABULAR PART RECORDS

Procedure RecordsOnStartEdit(Control, NewRow, Clone)
	
	If NewRow Then
		
		RecordsRow = Control.CurrentData;
		
		If RecordsRow.LineNumber > 1 Then
			PreviouseRow = Records.Get(RecordsRow.LineNumber-2); // Zero index base in tabular section
			RecordsRow.ExtDimension3 = PreviouseRow.ExtDimension3;
			RecordsRow.ExtDimension2 = PreviouseRow.ExtDimension2;
			RecordsRow.ExtDimension1 = PreviouseRow.ExtDimension1;
			RecordsRow.Account = PreviouseRow.Account;
		EndIf;
		
		Controls.Records.CurrentColumn = Controls.Records.Columns.Account;
	EndIf;
	
	BookkeepingCommon.AllowAccountsExtDimensions(Control.CurrentData.Account,,Control.Columns);
	DialogsAtServer.CheckAccountsExtDimensions(Control.CurrentData.Account,,Control.CurrentRow);
	
EndProcedure

Procedure RecordsAccountOnChange(Control)
	
	RecordsList = Controls.Records;
	
	BookkeepingCommon.AllowAccountsExtDimensions(RecordsList.CurrentData.Account,,RecordsList.Columns);
	DialogsAtServer.CheckAccountsExtDimensions(RecordsList.CurrentData.Account,,RecordsList.CurrentRow);
	
EndProcedure

Procedure RecordsAmountOnChange(Control)
	
	CurrentData = Controls.Records.CurrentData;
	If CurrentData <> Undefined Then
		
		CheckRecordAmount(CurrentData);
		
	EndIf;	
	
EndProcedure


//////////////////////////////////////////////////////////////////////////////
/// Payments

Procedure PaymentsOnStartEdit(Control, NewRow, Clone)
	
	CurrentRow = Controls.Payments.CurrentRow;
	
	If Clone AND NewRow Then
		
		CurrentRow.Document = Documents.CashIncomingFromPartner.EmptyRef();
		
	EndIf;	
	
	Controls.Payments.Columns.CashDesk.ReadOnly = NOT (CurrentRow.PaymentMethod.TransactionType = Enums.PaymentTransactionTypes.Cash);
	
EndProcedure

Procedure PaymentsOnDataGet(Control, RowAppearances)
	
	For Each RowAppearance In RowAppearances Do
		
		If ValueIsNotFilled(RowAppearance.RowData.Document) Then
			If ValueIsFilled(RowAppearance.RowData.PaymentMethod) AND RowAppearance.RowData.PaymentMethod.TransactionType = Enums.PaymentTransactionTypes.PaymentCard Then
				RowAppearance.Cells.Document.Text = Nstr("en = '<For current payment method no document is needed>'; pl = '<Dla bieżącego sposobU płatności dokument nie jest potrzebny>'");
			Else	
				RowAppearance.Cells.Document.Text = Nstr("en = '<Document will be created automatically>'; pl = '<Dokument zostanie stworzony automatycznie>'");
			EndIf;	
		EndIf;	
		
	EndDo;	
	
EndProcedure

Procedure PaymentsSelection(Control, RowSelected, Column, StandardProcessing)
	
	If Column = Control.Columns.Document 
		AND ValueIsFilled(RowSelected.Document) Then
		
		RowSelected.Document.GetForm(,Control,Control).Open();
		
	EndIf;	
	
EndProcedure

Procedure PaymentsPaymentMethodStartChoice(Control, StandardProcessing)
	
	StandardProcessing = False;
	CurrentRow = Controls.Payments.CurrentRow;
	If CurrentRow = Undefined Then
		Return
	EndIf;
	
	ChoiceForm = Catalogs.PaymentMethods.GetChoiceForm(,Control, Control);
	ChoiceForm.SetFilterByTransactionType(CurrentRow.PaymentMethod,GetAvailablePaymentTransactionTypes());
	ChoiceForm.Open();

EndProcedure

Procedure PaymentsPaymentMethodOnChange(Control)
	
	CurrentRow = Controls.Payments.CurrentRow;
	If CurrentRow.PaymentMethod.TransactionType = Enums.PaymentTransactionTypes.Cash Then
		CurrentRow.CashDesk = CommonAtServer.GetUserSettingsValue("DefaultCashDesk");
	EndIf;	
	Controls.Payments.Columns.CashDesk.ReadOnly = NOT (CurrentRow.PaymentMethod.TransactionType = Enums.PaymentTransactionTypes.Cash);

EndProcedure

////////////////////////////////////////////////////////////////////////////////
// OTHER PROCEDURES AND FUNCTIONS

Procedure UpdateDialog()
		
	If Not Customer.IsEmpty() And DeliveryPoint.IsEmpty()
		And Not Controls.DeliveryPointPanel.Collapse = ControlCollapseMode.None Then
		Controls.DeliveryPointPanel.Collapse = ControlCollapseMode.None;
	EndIf;	
	
	IsPositive = (OperationType = Enums.OperationTypesBookkeepingNote.Positive);
	Controls.Payments.Enabled = IsPositive;
	Controls.CommandBarPayments.Enabled = IsPositive;
	
	Dialogs.SetFormMainActionsButtonsProperties(ThisForm);
	
	UpdatePictureBoxCustomer();
	
EndProcedure // UpdateDialog()

Procedure UpdatePictureBoxCustomer()
	
	IsOverdueDue = (Customer.BlockOnOverdueDue AND (OverdueDue >0) AND Customer.MaxOverdueDueAmount<=OverdueDue);
	IsCommonDue = (Customer.WarnOnDue AND (CommonDue >0) AND Customer.MaxDueAmount<=CommonDue);
	If DontControlDues OR (NOT Customer.BlockOnOverdueDue AND NOT Customer.WarnOnDue) Then
		Controls.PictureBoxCustomer.Picture = PictureLib.GrayCommit;
		Controls.PictureBoxCustomer.ToolTip = Nstr("en = 'Customer''s dues are not controlled'; pl = 'Sprawdzanie należności klienta jest wyłączone'");
	ElsIf IsOverdueDue Then
		Controls.PictureBoxCustomer.Picture = PictureLib.Stop;
		Controls.PictureBoxCustomer.ToolTip = Nstr("en = 'Customer has overdrawed and overdue due'; pl = 'Klient przekrocił limit przeterminowanych należności'");
	ElsIf IsCommonDue Then
		Controls.PictureBoxCustomer.Picture = PictureLib.YellowAlertSmall;
		Controls.PictureBoxCustomer.ToolTip = Nstr("en = 'Customer has overdrawed due'; pl = 'Klient przekrocił limit należności'");
	Else
		Controls.PictureBoxCustomer.Picture = PictureLib.Commit;
		Controls.PictureBoxCustomer.ToolTip = Nstr("en = 'Customer has no overdraw limits'; pl = 'Klient nie ma przekroczonych limitów'");
	EndIf;
	
	
EndProcedure

Procedure CustomerOnChangeCommon()
	
	If Not Customer.IsEmpty() Then
		
		CustomerContactPerson = Customer.DefaultContactPerson;
		Currency              = Customer.Currency;
		ExchangeRate  = CommonAtServer.GetExchangeRate(Currency, Date);
		
		CustomerContactPerson = Customer.DefaultContactPerson;
		PaymentTerms          = Customer.PaymentTerms;
		PaymentMethod         = Customer.PaymentMethod;
		PaymentDate   = CommonAtServer.GetPaymentDate(Date, PaymentTerms);
		
		If ValueIsNotFilled(DeliveryPoint) OR (ValueIsFilled(DeliveryPoint) AND DeliveryPoint.HeadOffice <> Customer) Then
			DeliveryPoint = Catalogs.Customers.EmptyRef();
			DeliveryPoint         = Catalogs.Customers.GetCustomerDeliveryPoint(Customer, DeliveryPoint);
			If Not DeliveryPoint.IsEmpty() Then
				
				DeliveryPointContactPerson = DeliveryPoint.DefaultContactPerson;
				
			EndIf;
		EndIf;
		
		CommonAtServer.FillRemarks(ThisObject,Customer,True);
		
	Else		
		DeliveryPoint = Catalogs.Customers.EmptyRef();
	EndIf;
	
	CommonDue = APAR.GetCustomerCommonDue(Company,Customer);
	OverdueDue = APAR.GetCustomerOverdueDue(Company,Customer);
	
	UpdateDialog();	
	
EndProcedure // CustomerOnChangeCommon()

Procedure FormMainActionsQuickPrint(Button)
	
	Printouts.CallPrintoutSettingsForm(ThisForm);
	
EndProcedure

Procedure FormActionsPrint(Button)
	
	Printouts.CallPrintoutSettingsForm(ThisForm,True);

EndProcedure

Procedure PostAndPrintAndClose(Button)
	
	AdditionalProperties.Insert("PostAndPrintAndClose");
	If WriteInForm(DocumentWriteMode.Posting) Then
		Close();
	EndIf;
	
EndProcedure	

Procedure FormActionsShowRegisterRecords(Button)
	Dialogs.ShowRegistersRecords(ThisForm,Ref);
EndProcedure

Procedure FormActionsShowRegisterRecordsBookkeeping(Button)
	Dialogs.ShowDocumentsRecordsBookkeeping(Ref);
EndProcedure

Procedure FormActionsShowBookkeepingOperation(Button)
	Dialogs.ShowBookkeepingOperation(Ref);
EndProcedure





