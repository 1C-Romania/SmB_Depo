Var IsModified;

////////////////////////////////////////////////////////////////////////////////
// PROCEDURES - EVENTS PROCESSING OF THE FORM

Procedure OnOpen()
	
	Common.CommonDocumentFormOnOpenBegin(ThisForm,ThisObject);
	
	If IsNew() Then
		
		CommonAtServer.FillDocumentHeader(ThisObject);
		
		// Showing number presentation with prefixes.
		Controls.Number.Data = "";
		Controls.Number.Value = DocumentsPostingAndNumbering.GetDocumentAutoNumberPresentation(ThisObject);
		
		// fill tab sections
		ThisObject.Date = BegOfDay(BegOfMonth(CurrentDate()) - 1);
		ThisObject.FillAccounts();
		ThisObject.FillExchangeRates();
	EndIf;
	
	Common.CommonDocumentFormOnOpenEnd(ThisForm,ThisObject);
	UpdateDialog();
	
EndProcedure

Procedure RefreshDisplay()
EndProcedure

Procedure BeforeWrite(Cancel, WriteMode, PostingMode)
	
	If Controls.Number.Data = "" Then
		Number = "";
	EndIf;
	
	ThisObject.Amount = ThisObject.Valuation.Total("ValuationAmount");
	
	If WriteMode = DocumentWriteMode.Posting Then
		// Call checking
		AdditionalProperties.Insert("EditingInForm", ThisForm);
	EndIf;	
	
	IsModified = Dialogs.FillIsModifiedField(ThisForm, WriteMode, IsModified);
	
EndProcedure

Procedure AfterWrite()
	If Controls.Number.Data = "" Then
		Controls.Number.Data = "Number";
	EndIf;

	UpdateDialog();
	Printouts.PerformPrintOnPostAndPrintAndClose(ThisForm);
	
EndProcedure

Procedure BeforeClose(Cancel, StandardProcessing)
	
	Cancel = Dialogs.CheckDocumentModificate(ThisObject, ThisForm, IsModified);
	
EndProcedure


////////////////////////////////////////////////////////////////////////////////
// PROCEDURES - EVENTS PROCESSING OF ATTRIBUTES OF HEADER

Procedure NumberStartChoice(Control, StandardProcessing)
	
	DocumentsPostingAndNumbering.OnStartChangeDocumentAutoNumber(ThisForm);
	
EndProcedure

Procedure DateOnChange(Control)
	
	Common.CommonDateOnChange(Control,ThisForm,ThisObject);
	
EndProcedure

Procedure CompanyOnChange(Control)
	
	If Controls.Number.Data = "" Then
		Controls.Number.Value = DocumentsPostingAndNumbering.GetDocumentAutoNumberPresentation(ThisObject);
	EndIf;
	
EndProcedure

////////////////////////////////////////////////////////////////////////////////
// PROCEDURES - EVENTS PROCESSING OF TABULAR PART DOCUMENTS

Procedure ExchangeRatesCurrencyOnChange(Control)
	Controls.ExchangeRates.CurrentData.ExchangeRate = CommonAtServer.GetExchangeRate(Controls.ExchangeRates.CurrentData.Currency, ThisObject.Date);
EndProcedure

Procedure ExchangeRatesExchangeRateStartListChoice(Control, StandardProcessing)
	Dialogs.GlobalExchangeRateStartListChoice(Control, StandardProcessing, ThisForm, Controls.ExchangeRates.CurrentData.Currency);
EndProcedure

Procedure CommandBarAccountsUncheckAll(Button)
	For Each Item In Accounts Do
		Item.UseAccount = False;
	EndDo;
EndProcedure

Procedure CommandBarAccountsCheckAll(Button)
	For Each Item In Accounts Do
		Item.UseAccount = True;
	EndDo;
EndProcedure

Procedure ItemsOnStartEdit(Control, NewRow, Clone)
	If Control.CurrentRow <> Undefined Then
		BookkeepingCommon.AllowAccountsExtDimensions(Control.CurrentData.Account_AmountDue,,Control.Columns);
		DialogsAtServer.CheckAccountsExtDimensions(Control.CurrentData.Account_AmountDue,,Control.CurrentRow);
	EndIf;	
EndProcedure

Procedure ItemsAccount_AmountDueOnChange(Control)
	CostsLinesList = Controls.Items;
	BookkeepingCommon.AllowAccountsExtDimensions(CostsLinesList.CurrentData.Account_AmountDue,,CostsLinesList.Columns);
	DialogsAtServer.CheckAccountsExtDimensions(CostsLinesList.CurrentData.Account_AmountDue,,CostsLinesList.CurrentRow);
EndProcedure

////////////////////////////////////////////////////////////////////////////////
// OTHER PROCEDURES AND FUNCTIONS

Procedure UpdateDialog()
	
	Dialogs.SetFormMainActionsButtonsProperties(ThisForm);
	
EndProcedure

Procedure FormActionsNestedStructure(Button)
	
	Dialogs.ShowSlaveDocuments(Ref);
	
EndProcedure


Procedure CommandBarDocsListFillValuation(Button)
	
	If Modified() Then
		DoMessageBox(NStr("en='Please, save the document before filling.';pl='Zapisz dokument przed rozpoczęciem jego wypełniania.'"));
		Return;
	EndIf;
	
	If Not DocumentsTabularPartsProcessing.TabularPartCanBeFilled(Valuation, Posted) Then
		Return;
	EndIf;
	
	FillValuation();
	
EndProcedure

Procedure CommandBarExchangeRatesFillExchangeRates(Button)
	If Not DocumentsTabularPartsProcessing.TabularPartCanBeFilled(ThisObject.ExchangeRates, Posted) Then
		Return;
	EndIf;
	
	ThisObject.FillExchangeRates();
EndProcedure

Procedure CommandBarAccountsFillAccounts(Button)
	If Not DocumentsTabularPartsProcessing.TabularPartCanBeFilled(ThisObject.Accounts, Posted) Then
		Return;
	EndIf;
	
	ThisObject.FillAccounts();
EndProcedure


Procedure FormMainActionsQuickPrint(Button)
	Printouts.CallPrintoutSettingsForm(ThisForm);
EndProcedure

Procedure FormActionsPrint(Button)
	
	Printouts.CallPrintoutSettingsForm(ThisForm,True);

EndProcedure

Procedure FormActionsShowRegisterRecordsBookkeeping(Button)
	Dialogs.ShowDocumentsRecordsBookkeeping(Ref);
EndProcedure

Procedure FormActionsShowBookkeepingOperation(Button)
	Dialogs.ShowBookkeepingOperation(Ref);
EndProcedure
