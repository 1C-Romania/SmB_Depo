&AtClient
Var RefreshInterface;

////////////////////////////////////////////////////////////////////////////////
// FORM EVENT HANDLERS

&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	If Parameters.Property("AutoTest") Then
		Return;
	EndIf;
	
	// Attribute values of the form
	ConstantsSetContentForms    = GetSetOfConstantsForED(ConstantsSet);
	ExternalParentConstants = GetStructureConstantsOfParentalED(ConstantsSetContentForms);
	RunMode                  = CommonUseReUse.ApplicationRunningMode();
	
	ExternalParentConstants.Insert("UseDigitalSignatures");
	
	RunMode.Insert("ConstantsSetContentForms",    New FixedStructure(ConstantsSetContentForms));
	RunMode.Insert("ExternalParentConstants", New FixedStructure(ExternalParentConstants));
	RunMode.Insert("BaseVersion"               , 
						ElectronicDocumentsServiceCallServer.GetFunctionalOptionValue("BaseVersion"));
	
	RunMode = New FixedStructure(RunMode);
	
	// Settings of visible on launch
	Items.GroupUseDigitalSignatures.Visible        = Not RunMode.BaseVersion;
	Items.GroupUseEDExchangeBetweenBanks.Visible               = Not RunMode.BaseVersion;
	Items.GroupUseEDExchangeBetweenCompanies.Visible         = Not RunMode.BaseVersion;
	
	// Update items states
	SetEnabled();
	
EndProcedure

&AtClient
Procedure OnClose()
	
	RefreshApplicationInterface();
	
EndProcedure

&AtClient
// Handler of form notification.
//
// Parameters:
// EventName - String - only event Record_ConstantsSet generated by administration panels is processed.
// Parameter   - Structure - contains names of the constants subordinate to modified constant which "caused" the alert.
// Source   - String - name of changed constant which "caused" the alert.
//
Procedure NotificationProcessing(EventName, Parameter, Source)
	
	If EventName <> "Record_ConstantsSet" Then
		Return; // Such events are not processed
	EndIf;
	
	// If it is a modified constant located in another form and it affects values
	// of constants in this form, then read values of the constants and update items of this form.
	If RunMode.ExternalParentConstants.Property(Source)
		OR (TypeOf(Parameter) = Type("Structure")
			AND GetCommonKeyStructuresED(Parameter, RunMode.ExternalParentConstants).Count() > 0) Then
		
		ThisObject.Read();
		SetEnabled();
		
	EndIf;
	
EndProcedure

////////////////////////////////////////////////////////////////////////////////
// FORM HEADER ITEM EVENT HANDLERS

&AtClient
Procedure UseEDExchangeOnChange(Item)
	Attachable_OnAttributeChange(Item);
EndProcedure

&AtClient
Procedure UseElectronicSignsOnChange(Item)
	Attachable_OnAttributeChange(Item);
EndProcedure

&AtClient
Procedure UseEdExchangeBetweenCompaniesOnChange(Item)
	Attachable_OnAttributeChange(Item);
EndProcedure

&AtClient
Procedure UseEDExchangeWithBanksOnChange(Item)
	Attachable_OnAttributeChange(Item);
EndProcedure

&AtClient
Procedure DetachImmediateEDSendingOnChange(Item)
	Attachable_OnAttributeChange(Item, False);
EndProcedure

////////////////////////////////////////////////////////////////////////////////
// FORM COMMAND HANDLERS

&AtClient
Procedure OpenEDFProfilesSettings(Command)
	OpenForm("Catalog.EDFProfileSettings.Form.ListForm", , ThisObject);
EndProcedure

&AtClient
Procedure OpenAgreementsAboutEDUsage(Command)
	OpenForm("Catalog.EDUsageAgreements.Form.ListForm", , ThisObject);
EndProcedure

&AtClient
Procedure Open1CTaxcomServiceConnectionAssistant(Command)
	ElectronicDocumentsClient.ConnectionAssistant1CTaxcomService();
EndProcedure

&AtClient
Procedure OpenDirectExchangeConnectionAssistant(Command)
	ElectronicDocumentsClient.DirectExchangeConnectionAssistant();
EndProcedure

// StandardSubsystems.DigitalSignature
&AtClient
Procedure DigitalSignaturesAndEncryptionSettings(Command)
	
	OpenForm("CommonForm.DigitalSignaturesAndEncryptionSettings");
	
EndProcedure
// End StandardSubsystems.DigitalSignature


////////////////////////////////////////////////////////////////////////////////
// SERVICE PROCEDURES AND FUNCTIONS

////////////////////////////////////////////////////////////////////////////////
// Client

&AtClient
Procedure Attachable_OnAttributeChange(Item, RefreshingInterface = True)
	
	Result = OnAttributeChangeServer(Item.Name);
	
	If RefreshingInterface Then
		#If Not WebClient Then
		AttachIdleHandler("RefreshApplicationInterface", 1, True);
		RefreshInterface = True;
		#EndIf
	EndIf;
	
	If Result.Property("NotificationForms") Then
		Notify(Result.NotificationForms.EventName, Result.NotificationForms.Parameter, Result.NotificationForms.Source);
	EndIf;
	
EndProcedure

&AtClient
Procedure RefreshApplicationInterface()
	
	#If Not WebClient Then
	If RefreshInterface = True Then
		RefreshInterface = False;
		RefreshInterface();
	EndIf;
	#EndIf
	
EndProcedure

// Constants

&AtClient
// Returns the structure which contains the keys from both original structures.
//
Function GetCommonKeyStructuresED(Structure1, Structure2)
	
	Result = New Structure;
	
	For Each KeyAndValue IN Structure1 Do
		If Structure2.Property(KeyAndValue.Key) Then
			Result.Insert(KeyAndValue.Key);
		EndIf;
	EndDo;
	
	Return Result;
	
EndFunction

////////////////////////////////////////////////////////////////////////////////
// Calling the server

&AtServer
Function OnAttributeChangeServer(ItemName)
	
	Result = New Structure;
	
	AttributePathToData = Items[ItemName].DataPath;
	
	SaveAttributeValue(AttributePathToData, Result);
	
	SetEnabled(AttributePathToData);
	
	RefreshReusableValues();
	
	Return Result;
	
EndFunction

////////////////////////////////////////////////////////////////////////////////
// Server

&AtServer
Procedure SaveAttributeValue(AttributePathToData, Result)
	
	// Save attribute values not connected with constants directly (one-to-one ratio).
	If AttributePathToData = "" Then
		Return;
	EndIf;
	
	// Definition of constant name.
	ConstantName = "";
	If Lower(Left(AttributePathToData, 13)) = Lower("ConstantsSet.") Then
		// If the path to attribute data is specified through "ConstantsSet".
		ConstantName = Mid(AttributePathToData, 14);
	Else
		// Definition of name and attribute value record in the corresponding constant from "ConstantsSet".
		// Used for the attributes of the form directly connected with constants (one-to-one ratio).
	EndIf;
	
	// Saving the constant value.
	If ConstantName <> "" Then
		ConstantManager = Constants[ConstantName];
		ConstantValue = ConstantsSet[ConstantName];
		
		If ConstantManager.Get() <> ConstantValue Then
			ConstantManager.Set(ConstantValue);
		EndIf;
		
		If AreSubordinatesConstantsED(ConstantName, ConstantValue) Then
			SetDependentConstantsValues(ConstantName);
			ThisObject.Read();
		EndIf;
		
		NotificationForms = New Structure(
			"EventName, Parameter, Source",
			"Record_ConstantsSet", GetStructureOfSubordinateConstantsED(ConstantName), ConstantName);
		Result.Insert("NotificationForms", NotificationForms);
		
	EndIf;
	
EndProcedure

&AtServer
Procedure SetEnabled(AttributePathToData = "")
	
	InfobaseUserWithFullAccess = Users.InfobaseUserWithFullAccess();
	
	SetPrivilegedMode(True);
	UseDigitalSignatures = Constants.UseDigitalSignatures.Get();
	
	If AttributePathToData = "ConstantsSet.UseEDExchange"
		OR AttributePathToData = "ConstantsSet.UseDigitalSignatures" OR AttributePathToData = "" Then
		
		ConstantValue = ConstantsSet.UseEDExchange;
		InludedEDandDS    = ConstantValue AND UseDigitalSignatures;
		
		CommonUseClientServer.SetFormItemProperty(Items, "OpenTypicalAgreementsAboutEDUsage",           "Enabled", ConstantValue);
		CommonUseClientServer.SetFormItemProperty(Items, "OpenAgreementsAboutEDUsage", 				  "Enabled", ConstantValue);
		CommonUseClientServer.SetFormItemProperty(Items, "UseElectronicDocumentsDelayedSending", "Enabled", ConstantValue);
		CommonUseClientServer.SetFormItemProperty(Items, "OpenDirectExchangeConnectionAssistant",			  "Enabled", ConstantValue);
		
		CommonUseClientServer.SetFormItemProperty(Items, "OpenElectronicDocumentsExchangeSettings", 	  "Enabled", InludedEDandDS);
		CommonUseClientServer.SetFormItemProperty(Items, "UseEDExchangeWithBanks",                         "Enabled", ConstantValue);
		CommonUseClientServer.SetFormItemProperty(Items, "UseEDExchangeBetweenCompanies", 			  "Enabled", InludedEDandDS);
		CommonUseClientServer.SetFormItemProperty(Items, "Open1CTaxcomServiceConnectionAssistant",		  "Enabled", InludedEDandDS);
		
		CommonUseClientServer.SetFormItemProperty(Items, "UseDigitalSignatures", 			  "Enabled", InfobaseUserWithFullAccess);
		
	EndIf;
	
	SetPrivilegedMode(False);
	
EndProcedure

// Constants

&AtServer
Procedure SetDependentConstantsValues(ParentConstantName)
	
	StructureOfSubordinateConstants = GetStructureOfSubordinateConstantsED(ParentConstantName);
	For Each ConstantName IN StructureOfSubordinateConstants Do
		Constants[ConstantName.Key].Set(ConstantsSet[ParentConstantName]);
	EndDo;
	
EndProcedure

&AtServer
// Returns content constants set.
//
// Parameters:
// Set - ConstantsSet
//
// Returns:
//  Structure
// 	Key - constant name from the set
//
Function GetSetOfConstantsForED(Set)
	
	Result = New Structure;
	
	For Each MetaConstant IN Metadata.Constants Do
		If IsObjectAttribute(Set, MetaConstant.Name) Then
			Result.Insert(MetaConstant.Name);
		EndIf;
	EndDo;
	
	Return Result;
	
EndFunction

&AtServer
Function IsObjectAttribute(Object, AttributeName)
	
	EDUniqunessKey   = New UUID;
	AttributeStructure = New Structure(AttributeName, EDUniqunessKey);

	FillPropertyValues(AttributeStructure, Object);
	
	Return AttributeStructure[AttributeName] <> EDUniqunessKey;
	
EndFunction

&AtServer
// Returns the structure that describes "subordinate" constants for specified "parent" constant.
//
//	Parameters:
//		ParentConstantName - Structure - name of parent constant
//
//	Returns:
//		Structure
//			Key - name of subordinate constant
//
Function GetStructureOfSubordinateConstantsED(ParentConstantName)
	
	Result       = New Structure;
	TableConstants = TableDependenciesGetConstantsED();
	
	SubordinateConstants = TableConstants.FindRows(
		New Structure("ParentConstantName", ParentConstantName));
	
	For Each StringSubordinate IN SubordinateConstants Do
		
		If Result.Property(StringSubordinate.NameRelatedConstant) Then
			Continue;
		EndIf;
		
		Result.Insert(StringSubordinate.NameRelatedConstant);
		
		SuborderedOfSubordered = GetStructureOfSubordinateConstantsED(StringSubordinate.NameRelatedConstant);
		
		For Each SubordinateOfSubordinate IN SuborderedOfSubordered Do
			Result.Insert(SubordinateOfSubordinate.Key);
		EndDo;
		
	EndDo;
	
	Return Result;
	
EndFunction

&AtServer
// Returns the structure that describes "parent" constants for specified "subordinate" constants.
//
//	Parameters:
//		StructureDependentConstants - Structure - names of subordinate constants
//
//	Returns:
//		Structure
//			Key - name of parent constant
//
Function GetStructureConstantsOfParentalED(StructureDependentConstants)
	
	Result       = New Structure;
	TableConstants = TableDependenciesGetConstantsED();
	
	For Each SoughtForConstant IN StructureDependentConstants Do
		
		ParentConstants = TableConstants.FindRows(
			New Structure("NameRelatedConstant", SoughtForConstant.Key));
		
		For Each ParentRow IN ParentConstants Do
			
			If Result.Property(ParentRow.ParentConstantName)
			 OR StructureDependentConstants.Property(ParentRow.ParentConstantName) Then
				Continue;
			EndIf;
			
			Result.Insert(ParentRow.ParentConstantName);
			
			ParentParents = GetStructureConstantsOfParentalED(New Structure(ParentRow.ParentConstantName));
			
			For Each ParentsParent IN ParentParents Do
				Result.Insert(ParentsParent.Key);
			EndDo;
			
		EndDo;
		
	EndDo;
	
	Return Result;
	
EndFunction

&AtServer
// Returns the table that describes the dependence of constants in the configuration.
// Each table string means:
// for a parent constant with value X only value Y for subordinate constants is allowed.
//
// Returns:
// ValuesTable with columns
// 	- ParentConstantName
// 	- NameRelatedConstant
// 	- ParentConstantValue
// 	- ValueOfRelatedConstant
//
Function TableDependenciesGetConstantsED()
	
	Result = New ValueTable;
	
	Result.Columns.Add("ParentConstantName", New TypeDescription("String"));
	Result.Columns.Add("NameRelatedConstant",  New TypeDescription("String"));
	Result.Columns.Add("ParentConstantValue");
	Result.Columns.Add("ValueOfRelatedConstant");
	
	Result.Indexes.Add("ParentConstantName");
	Result.Indexes.Add("NameRelatedConstant");
	
	// EDF
	AddTableRowConstantsEDDependencies(Result,
		"UseEDExchange", 						False, "UseEDExchangeBetweenCompanies", 				 False);
	AddTableRowConstantsEDDependencies(Result,
		"UseEDExchange", 						False, "UseEDExchangeWithBanks", 						 False);
	AddTableRowConstantsEDDependencies(Result,
		"UseEDExchange", 						False, "UseElectronicDocumentsDelayedSending", False);
	
	AddTableRowConstantsEDDependencies(Result,
		"UseDigitalSignatures", 	False, "UseEDExchangeBetweenCompanies", 			   	 False);
	AddTableRowConstantsEDDependencies(Result,
		"UseDigitalSignatures", 	False, "UseEDExchangeWithBanks", 						 False);
	
	Return Result;
	
EndFunction

&AtServer
Procedure AddTableRowConstantsEDDependencies(TableConstants,
			ParentConstantName, ParentConstantValue, NameRelatedConstant, ValueOfRelatedConstant)
	
	NewRow = TableConstants.Add();
	NewRow.ParentConstantName      = ParentConstantName;
	NewRow.ParentConstantValue = ParentConstantValue;
	NewRow.NameRelatedConstant       = NameRelatedConstant;
	NewRow.ValueOfRelatedConstant  = ValueOfRelatedConstant;
	
EndProcedure

&AtServer
// Returns the sign that the constant has "subordinate" constants.
//
//	Parameters:
//		ParentConstantName 	  - String - name of constant as it is
//		set in the configurator ParentConstantValue - Arbitrary - Constant value
//
//	Returns:
//		Boolean - If True, then the constant has "subordinate" constants.
//
Function AreSubordinatesConstantsED(ParentConstantName, ParentConstantValue)
	
	TableConstants = TableDependenciesGetConstantsED();
	
	SubordinateConstants = TableConstants.FindRows(
		New Structure(
			"ParentConstantName, ParentConstantValue",
			ParentConstantName, ParentConstantValue));
	
	Return SubordinateConstants.Count() > 0;
	
EndFunction













