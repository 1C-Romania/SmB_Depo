<ExchangeRules>
	<FormatVersion CompatibilityMode="CompatibilityWithSSL21Mode">2.01</FormatVersion>
	<ID>de8e9a6d-18a0-418c-9f0b-c328a26af0f7    </ID>
	<Description>SmallBusiness --&gt; EnterpriseAccounting</Description>
	<CreationDateTime>2015-01-23T11:44:57</CreationDateTime>
	<Source PlatformVersion="8.0" ConfigurationVersion="1.5.3.27" ConfigurationSynonym="Small Business, version 1.5">SmallBusiness</Source>
	<Receiver PlatformVersion="8.0" ConfigurationVersion="3.0.38.35" ConfigurationSynonym="Company accounting, edition 3.0">EnterpriseAccounting</Receiver>
	<BeforeGetChangedObjects>Parameters.Insert("NodeForExchangeRef", NodeForExchange);
Parameters.Insert("ManualExchange", 		  NodeForExchange.ManualExchange);</BeforeGetChangedObjects>
	<AfterGetExchangeNodeDetails>Parameters.Insert("ExchangeNodeForDataImport", ExchangeNodeForDataImport);</AfterGetExchangeNodeDetails>
	<BeforeDataExport>
Parameters.Insert("AccountingCurrency", Constants.AccountingCurrency.Get());
Parameters.Insert("NationalCurrency", Constants.NationalCurrency.Get());
Parameters.Insert("UsedProductionSubsystem", GetFunctionalOption("UseSubsystemProduction"));</BeforeDataExport>
	<AfterDataExport>If Parameters.ManualExchange Then
	
	ExchangePlanName = DataExchangeReUse.GetExchangePlanName(Parameters.NodeForExchangeRef);
	ExchangePlanContent = Metadata.ExchangePlans[ExchangePlanName].Content;
	
	For Each ExchangePlanContentItem IN ExchangePlanContent Do
		If CommonUse.ThisIsDocument(ExchangePlanContentItem.Metadata) Then
			ExchangePlans.DeleteChangeRecords(Parameters.NodeForExchangeRef, ExchangePlanContentItem.Metadata);
		EndIf;
	EndDo;
	
EndIf;</AfterDataExport>
	<BeforeDataImport>Parameters.Insert("CurrencyOfRegulatedAccounting", Constants.CurrencyOfRegulatedAccounting.Get());
Parameters.Insert("ProductionActivitiesExecuted", Constants.ProductionActivitiesExecuted.Get());
Parameters.Insert("PricesTypePlannedPrimecost", Constants.PricesTypePlannedPrimecostProductsAndServices.Get());
Parameters.Insert("MainCompany", AccountingAccountingOverridable.GetDefaultValue("MainCompany"));

ImportedByCompanies = New Array();
Parameters.Insert("ImportedByCompanies", ImportedByCompanies);

ImportedObjectsTable = New ValueTable();
ImportedObjectsTable.Columns.Add("ImportingObject");
ImportedObjectsTable.Columns.Add("Ref");
ImportedObjectsTable.Columns.Add("ObjectParameters");

Parameters.Insert("ImportedObjectsTable", ImportedObjectsTable);</BeforeDataImport>
	<AfterDataImport>
CompaniesArray = Parameters.ImportedByCompanies;
Execute(Algorithms.CreateDefaultPolicyForCompanies);

Execute(Algorithms.CheckOptionValueUseMultipleCompanies);

Execute(Algorithms.CheckOptionValueUseMultipleWarehouses);

Execute(Algorithms.CheckOptionValueUseAccountingCurrency);

Execute(Algorithms.CheckOptionValueUseCommissionOnSale);

Execute(Algorithms.CheckUseImportGoodsOptionValue);

For Each TableRow IN Parameters.ImportedObjectsTable Do
	
	If TypeOf(TableRow.ImportingObject) = Type("DocumentObject.PaymentOrder") Then
		
		Try
			Object = TableRow.ImportingObject.Ref.GetObject();
			If Not Object.DeletionMark Then
				Object.Write(DocumentWriteMode.Posting);
			EndIf;
		Except
		EndTry;
		
	Else
	
		Try
			Filter = New Structure("StructuralUnit");
			Filter.StructuralUnit = TableRow.ImportingObject;
			SliceLast = InformationRegisters.ResponsiblePersons.SliceLast(CurrentDate(), Filter);
			
			RecordPeriod = CurrentDate();
			
			FRP = "";
			If TableRow.ObjectParameters &lt;&gt; Undefined Then
				FRP = TableRow.ObjectParameters.Get("FRP");
			EndIf;
			
			If ValueIsFilled(FRP)
				AND (SliceLast.Count() &lt; 1
				OR FRP &lt;&gt; SliceLast[0].Individual) Then 
				
				RecordManager = InformationRegisters.ResponsiblePersons.CreateRecordManager();
				RecordManager.Period             = RecordPeriod;
				RecordManager.StructuralUnit = ?(ValueIsFilled(TableRow.Ref), TableRow.Ref, TableRow.ImportingObject.Ref);
				RecordManager.Individual     = FRP;
				RecordManager.Write();
				
			EndIf;
		Except
		EndTry;
	
	EndIf;
	
EndDo;</AfterDataImport>
	<AftertObjectImport>If ObjectTypeName = "Document" AND Not ObjectFound Then
	Execute(Algorithms.FillDocumentAttributes);
EndIf;</AftertObjectImport>
	<OnGetDeletionInfo>ObjectMetadata = Object.Metadata();

If Metadata.Catalogs.Contains(ObjectMetadata) Then
	
	Cancel  = True;
	
	SetObjectDeletionMark(Object, True, "Catalog");
	
ElsIf Metadata.Documents.Contains(ObjectMetadata) Then
	
	Cancel  = True;
	
	If Object.Posted Then
		
		UndoObjectPostingInIB(Object, TypeOf(Object));
		
	EndIf;
	
	If Not Object.Posted Then
		
		SetObjectDeletionMark(Object, True, "Document");
		
	EndIf;
	
ElsIf Metadata.ChartsOfCharacteristicTypes.Contains(ObjectMetadata) Then
	
	Cancel  = True;
	
	SetObjectDeletionMark(Object, True, "ChartOfCharacteristicTypes");
	
EndIf;</OnGetDeletionInfo>
	<Parameters/>
	<DataProcessors/>
	<ObjectConversionRules>
		<Group>
			<Code>Enums</Code>
			<Description>Enums</Description>
			<Order>50</Order>
			<Rule>
				<Code>ContactInformationTypes</Code>
				<Description>Enum: Types contact information</Description>
				<Order>50</Order>
				<Source>EnumRef.ContactInformationTypes</Source>
				<Receiver>EnumRef.ContactInformationTypes</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Address --&gt; Address</Description>
						<Order>50</Order>
						<Source>Address</Source>
						<Receiver>Address</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>EmailAddress --&gt; EmailAddress</Description>
						<Order>100</Order>
						<Source>EmailAddress</Source>
						<Receiver>EmailAddress</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>WebPage --&gt; WebPage</Description>
						<Order>150</Order>
						<Source>WebPage</Source>
						<Receiver>WebPage</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>Another --&gt; Another</Description>
						<Order>200</Order>
						<Source>Another</Source>
						<Receiver>Another</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>Phone --&gt; Phone</Description>
						<Order>250</Order>
						<Source>Phone</Source>
						<Receiver>Phone</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>Fax --&gt;</Description>
						<Order>300</Order>
						<Source>Fax</Source>
						<Receiver>Fax</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>LegalEntityIndividual</Code>
				<Description>Enum: Legal ind person</Description>
				<Order>100</Order>
				<Source>EnumRef.LegalEntityIndividual</Source>
				<Receiver>EnumRef.LegalIndividual</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>3</Code>
						<Description>Ind --&gt; Individual</Description>
						<Order>150</Order>
						<Source>Ind</Source>
						<Receiver>Individual</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>LegalEntity --&gt; LegalEntity</Description>
						<Order>200</Order>
						<Source>LegalEntity</Source>
						<Receiver>LegalEntity</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>RoundingMethods</Code>
				<Description>Enum: Methods rounding</Description>
				<Order>150</Order>
				<Source>EnumRef.RoundingMethods</Source>
				<Receiver>EnumRef.RoundingMethods</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Round0_01 --&gt; Round0_01</Description>
						<Order>50</Order>
						<Source>Round0_01</Source>
						<Receiver>Round0_01</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>Round0_05 --&gt; Round0_05</Description>
						<Order>100</Order>
						<Source>Round0_05</Source>
						<Receiver>Round0_05</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>Round0_1 --&gt; Round0_1</Description>
						<Order>150</Order>
						<Source>Round0_1</Source>
						<Receiver>Round0_1</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>Round0_5 --&gt; Round0_5</Description>
						<Order>200</Order>
						<Source>Round0_5</Source>
						<Receiver>Round0_5</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>Round1 --&gt; Round1</Description>
						<Order>250</Order>
						<Source>Round1</Source>
						<Receiver>Round1</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>Round10 --&gt; Round10</Description>
						<Order>300</Order>
						<Source>Round10</Source>
						<Receiver>Round10</Receiver>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>Round100 --&gt; Round100</Description>
						<Order>350</Order>
						<Source>Round100</Source>
						<Receiver>Round100</Receiver>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>Round5 --&gt; Round5</Description>
						<Order>400</Order>
						<Source>Round5</Source>
						<Receiver>Round5</Receiver>
					</Value>
					<Value>
						<Code>9</Code>
						<Description>Round50 --&gt; Round50</Description>
						<Order>450</Order>
						<Source>Round50</Source>
						<Receiver>Round50</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>CommissionFeeCalculationMethods</Code>
				<Description>Enum: Ways calculation commission brokerages</Description>
				<Order>250</Order>
				<Source>EnumRef.CommissionFeeCalculationMethods</Source>
				<Receiver>EnumRef.CommissionFeeCalculationMethods</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>IsNotCalculating --&gt; IsNotCalculating</Description>
						<Order>50</Order>
						<Source>IsNotCalculating</Source>
						<Receiver>IsNotCalculating</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>PercentFromDifferenceOfSaleAndAmountReceipts --&gt; Procedure</Description>
						<Order>100</Order>
						<Source>PercentFromDifferenceOfSaleAndAmountReceipts</Source>
						<Receiver>PercentFromDifferenceOfSaleAndAmountReceipts</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>PercentFromSaleAmount --&gt; PercentFromSaleAmount</Description>
						<Order>150</Order>
						<Source>PercentFromSaleAmount</Source>
						<Receiver>PercentFromSaleAmount</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>GenderIndividuals</Code>
				<Description>Enum: Gender actual person</Description>
				<Order>300</Order>
				<Source>EnumRef.IndividualGender</Source>
				<Receiver>EnumRef.IndividualGender</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Female --&gt; Female</Description>
						<Order>50</Order>
						<Source>Female</Source>
						<Receiver>Female</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>Male --&gt; Male</Description>
						<Order>100</Order>
						<Source>Male</Source>
						<Receiver>Male</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsImplementationProducts</Code>
				<Description>Enum: Kinds operations "Customer invoice"</Description>
				<Order>350</Order>
				<Source>EnumRef.OperationKindsCustomerInvoice</Source>
				<Receiver>EnumRef.OperationKindsImplementationProducts</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>TransferForCommission --&gt; RetailComission</Description>
						<Order>50</Order>
						<Source>TransferForCommission</Source>
						<Receiver>RetailComission</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>SaleToCustomer --&gt; RetailComission</Description>
						<Order>100</Order>
						<Source>SaleToCustomer</Source>
						<Receiver>RetailComission</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ReturnFromProcessing --&gt;</Description>
						<Order>150</Order>
						<Source>ReturnFromProcessing</Source>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>ReturnToPrincipal --&gt;</Description>
						<Order>200</Order>
						<Source>ReturnToPrincipal</Source>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>ReturnToVendor --&gt;</Description>
						<Order>250</Order>
						<Source>ReturnToVendor</Source>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>ReturnFromSafeCustody --&gt;</Description>
						<Order>300</Order>
						<Source>ReturnFromSafeCustody</Source>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>TransferToProcessing --&gt;</Description>
						<Order>350</Order>
						<Source>TransferToProcessing</Source>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>TransferForSafeCustody --&gt;</Description>
						<Order>400</Order>
						<Source>TransferForSafeCustody</Source>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsReturnProductsFromCustomer</Code>
				<Description>Enum: Kinds operations "Supplier invoice"</Description>
				<Order>400</Order>
				<Source>EnumRef.OperationKindsSupplierInvoice</Source>
				<Receiver>EnumRef.OperationKindsReturnProductsFromCustomer</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>ReturnFromCustomer --&gt; RetailComission</Description>
						<Order>50</Order>
						<Source>ReturnFromCustomer</Source>
						<Receiver>RetailComission</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>ReturnFromAgent --&gt; RetailComission</Description>
						<Order>100</Order>
						<Source>ReturnFromAgent</Source>
						<Receiver>RetailComission</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ReturnFromSubcontractor --&gt;</Description>
						<Order>150</Order>
						<Source>ReturnFromSubcontractor</Source>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>ReturnFromSafeCustody --&gt;</Description>
						<Order>200</Order>
						<Source>ReturnFromSafeCustody</Source>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>ReceiptFromVendor --&gt;</Description>
						<Order>250</Order>
						<Source>ReceiptFromVendor</Source>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>ReceptionIntoProcessing --&gt;</Description>
						<Order>300</Order>
						<Source>ReceptionIntoProcessing</Source>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>ReceptionForCommission --&gt;</Description>
						<Order>350</Order>
						<Source>ReceptionForCommission</Source>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>ReceptionForSafeCustody --&gt;</Description>
						<Order>400</Order>
						<Source>ReceptionForSafeCustody</Source>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsFlowOfGoodsAndServices</Code>
				<Description>Enum: Kinds operations "Supplier invoice"</Description>
				<Order>450</Order>
				<Source>EnumRef.OperationKindsSupplierInvoice</Source>
				<Receiver>EnumRef.OperationKindsFlowOfGoodsAndServices</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>ReceiptFromVendor --&gt; PurchaseComission</Description>
						<Order>50</Order>
						<Source>ReceiptFromVendor</Source>
						<Receiver>PurchaseComission</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>ReceptionIntoProcessing --&gt; InProcessing</Description>
						<Order>100</Order>
						<Source>ReceptionIntoProcessing</Source>
						<Receiver>InProcessing</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ReceptionForCommission --&gt; PurchaseComission</Description>
						<Order>150</Order>
						<Source>ReceptionForCommission</Source>
						<Receiver>PurchaseComission</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>ReturnFromAgent --&gt;</Description>
						<Order>200</Order>
						<Source>ReturnFromAgent</Source>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>ReturnFromSubcontractor --&gt;</Description>
						<Order>250</Order>
						<Source>ReturnFromSubcontractor</Source>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>ReturnFromCustomer --&gt;</Description>
						<Order>300</Order>
						<Source>ReturnFromCustomer</Source>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>ReturnFromSafeCustody --&gt;</Description>
						<Order>350</Order>
						<Source>ReturnFromSafeCustody</Source>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>ReceptionForSafeCustody --&gt;</Description>
						<Order>400</Order>
						<Source>ReceptionForSafeCustody</Source>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsProductsTransfer</Code>
				<Description>Enum: Kinds operations "Customer invoice"</Description>
				<Order>500</Order>
				<Source>EnumRef.OperationKindsCustomerInvoice</Source>
				<Receiver>EnumRef.OperationKindsProductsTransfer</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>ReturnFromProcessing --&gt; OfProcessing</Description>
						<Order>50</Order>
						<Source>ReturnFromProcessing</Source>
						<Receiver>OfProcessing</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>TransferToProcessing --&gt; InProcessing</Description>
						<Order>100</Order>
						<Source>TransferToProcessing</Source>
						<Receiver>InProcessing</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ReturnToPrincipal --&gt;</Description>
						<Order>150</Order>
						<Source>ReturnToPrincipal</Source>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>ReturnToVendor --&gt;</Description>
						<Order>200</Order>
						<Source>ReturnToVendor</Source>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>ReturnFromSafeCustody --&gt;</Description>
						<Order>250</Order>
						<Source>ReturnFromSafeCustody</Source>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>TransferForCommission --&gt;</Description>
						<Order>300</Order>
						<Source>TransferForCommission</Source>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>TransferForSafeCustody --&gt;</Description>
						<Order>350</Order>
						<Source>TransferForSafeCustody</Source>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>SaleToCustomer --&gt;</Description>
						<Order>400</Order>
						<Source>SaleToCustomer</Source>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsReturnProductsVendor</Code>
				<Description>Enum: Kinds operations "Customer invoice"</Description>
				<Order>550</Order>
				<Source>EnumRef.OperationKindsCustomerInvoice</Source>
				<Receiver>EnumRef.OperationKindsReturnProductsVendor</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>ReturnFromProcessing --&gt; OfProcessing</Description>
						<Order>50</Order>
						<Source>ReturnFromProcessing</Source>
						<Receiver>OfProcessing</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>ReturnToPrincipal --&gt; PurchaseComission</Description>
						<Order>100</Order>
						<Source>ReturnToPrincipal</Source>
						<Receiver>PurchaseComission</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ReturnToVendor --&gt; PurchaseComission</Description>
						<Order>150</Order>
						<Source>ReturnToVendor</Source>
						<Receiver>PurchaseComission</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>ReturnFromSafeCustody --&gt;</Description>
						<Order>200</Order>
						<Source>ReturnFromSafeCustody</Source>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>TransferToProcessing --&gt;</Description>
						<Order>250</Order>
						<Source>TransferToProcessing</Source>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>TransferForCommission --&gt;</Description>
						<Order>300</Order>
						<Source>TransferForCommission</Source>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>TransferForSafeCustody --&gt;</Description>
						<Order>350</Order>
						<Source>TransferForSafeCustody</Source>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>SaleToCustomer --&gt;</Description>
						<Order>400</Order>
						<Source>SaleToCustomer</Source>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>AccrualDepreciationMethodsOS</Code>
				<Description>Enum: Ways accrual depreciation noncurrent assets (OS)</Description>
				<Order>600</Order>
				<Source>EnumRef.FixedAssetsDepreciationMethods</Source>
				<Receiver>EnumRef.AccrualDepreciationMethodsOS</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Linear --&gt; Linear</Description>
						<Order>50</Order>
						<Source>Linear</Source>
						<Receiver>Linear</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>ProportionallyToProductsVolume --&gt; Proportionally</Description>
						<Order>100</Order>
						<Source>ProportionallyToProductsVolume</Source>
						<Receiver>ProportionallyToProductsVolume</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description> --&gt; ByENAOF</Description>
						<Order>150</Order>
						<Receiver>ByENAOF</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description> --&gt; ByENAOFOn1000KmMileage</Description>
						<Order>200</Order>
						<Receiver>ByENAOFOn1000KmMileage</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description> --&gt; AmountOfNumbersByYearsOfUse</Description>
						<Order>250</Order>
						<Receiver>AmountOfNumbersByYearsOfUse</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description> --&gt; ReducingBalance</Description>
						<Order>300</Order>
						<Receiver>ReducingBalance</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>WaysAccrualDepreciationNMA</Code>
				<Description>Enum: Ways accrual depreciation noncurrent assets (IA)</Description>
				<Order>650</Order>
				<Source>EnumRef.FixedAssetsDepreciationMethods</Source>
				<Receiver>EnumRef.WaysAccrualDepreciationNMA</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Linear --&gt; Linear</Description>
						<Order>50</Order>
						<Source>Linear</Source>
						<Receiver>Linear</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>ProportionallyToProductsVolume --&gt; Proportionally</Description>
						<Order>100</Order>
						<Source>ProportionallyToProductsVolume</Source>
						<Receiver>ProportionallyToProductsVolume</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description> --&gt; ReducingBalance</Description>
						<Order>150</Order>
						<Receiver>ReducingBalance</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsReceiptOfNonCashCashValues</Code>
				<Description>Enum: Kinds operations "Payment receipt"</Description>
				<Order>700</Order>
				<Source>EnumRef.OperationKindsPaymentReceipt</Source>
				<Receiver>EnumRef.OperationKindsOfCashReceipt</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>FromAdvanceHolder --&gt; OthersReceiptOfNoncashDen</Description>
						<Order>50</Order>
						<Source>FromAdvanceHolder</Source>
						<Receiver>OtherReceipt</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>FromCustomer --&gt; BuyerPayment</Description>
						<Order>100</Order>
						<Source>FromCustomer</Source>
						<Receiver>BuyerPayment</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>FromVendor --&gt; ReturnCashFundsByProvider</Description>
						<Order>150</Order>
						<Source>FromVendor</Source>
						<Receiver>ReturnFromVendor</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>Other --&gt; ReceiptNonCashFunds</Description>
						<Order>200</Order>
						<Source>Other</Source>
						<Receiver>OtherReceipt</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>CurrencyPurchase --&gt; PurchaseOfForeignCurrencies</Description>
						<Order>250</Order>
						<Source>CurrencyPurchase</Source>
						<Receiver>PurchaseOfForeignCurrencies</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationCashWithdrawalOfKinds</Code>
				<Description>Enum: Kinds operations "Payment expense"</Description>
				<Order>750</Order>
				<Source>EnumRef.OperationKindsPaymentExpense</Source>
				<Receiver>EnumRef.OperationCashWithdrawalOfKinds</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Taxes --&gt; TaxTransfer</Description>
						<Order>50</Order>
						<Source>Taxes</Source>
						<Receiver>TaxTransfer</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>ToAdvanceHolder --&gt; TransferOfCashFundsAdvanceHolder</Description>
						<Order>100</Order>
						<Source>ToAdvanceHolder</Source>
						<Receiver>EnumerationOfAccountablePerson</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ToCustomer --&gt; ReturnCashMeansToCustomer</Description>
						<Order>150</Order>
						<Source>ToCustomer</Source>
						<Receiver>ReturnToCustomer</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>Vendor --&gt; VendorsPayment</Description>
						<Order>200</Order>
						<Source>Vendor</Source>
						<Receiver>VendorsPayment</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>Other --&gt; OthersCancellationNonCashCashFunds</Description>
						<Order>250</Order>
						<Source>Other</Source>
						<Receiver>OtherWriteOff</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>Salary --&gt; TransferSalary</Description>
						<Order>300</Order>
						<Source>Salary</Source>
						<Receiver>TransferSalary</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OCROperationsKinds</Code>
				<Description>Enum: Kinds operations "Petty cash receipt"</Description>
				<Order>800</Order>
				<Source>EnumRef.OperationKindsCashReceipt</Source>
				<Receiver>EnumRef.OCROperationsKinds</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>FromAdvanceHolder --&gt; ReturnCashFundsAdvanceHolder</Description>
						<Order>50</Order>
						<Source>FromAdvanceHolder</Source>
						<Receiver>ReturnFromAccountablePerson</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>FromCustomer --&gt; BuyerPayment</Description>
						<Order>100</Order>
						<Source>FromCustomer</Source>
						<Receiver>BuyerPayment</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>FromVendor --&gt; ReturnCashFundsByProvider</Description>
						<Order>150</Order>
						<Source>FromVendor</Source>
						<Receiver>ReturnFromVendor</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>Other --&gt; ReceiptOfCashFundsOthers</Description>
						<Order>200</Order>
						<Source>Other</Source>
						<Receiver>OtherIncome</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>RetailIncome --&gt; RetailIncome</Description>
						<Order>250</Order>
						<Source>RetailIncome</Source>
						<Receiver>RetailIncome</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>RetailIncomeAccrualAccounting --&gt; RetailIncome</Description>
						<Order>300</Order>
						<Source>RetailIncomeAccrualAccounting</Source>
						<Receiver>RetailIncome</Receiver>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>CurrencyPurchase --&gt; OtherIncome</Description>
						<Order>350</Order>
						<Source>CurrencyPurchase</Source>
						<Receiver>OtherIncome</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsRKO</Code>
				<Description>Enum: Kinds operations "Cash payment"</Description>
				<Order>850</Order>
				<Source>EnumRef.OperationKindsCashPayment</Source>
				<Receiver>EnumRef.OperationKindsRKO</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Salary --&gt; SalaryPayStatements</Description>
						<Order>50</Order>
						<Source>Salary</Source>
						<Receiver>SalaryPayStatements</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>Taxes --&gt; CashExpenseOthers</Description>
						<Order>100</Order>
						<Source>Taxes</Source>
						<Receiver>OtherExpense</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ToAdvanceHolder --&gt; IssuanceOfCashFundsToAdvanceHolder</Description>
						<Order>150</Order>
						<Source>ToAdvanceHolder</Source>
						<Receiver>IssuanceToAccountablePerson</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>ToCustomer --&gt; ReturnCashMeansToCustomer</Description>
						<Order>200</Order>
						<Source>ToCustomer</Source>
						<Receiver>ReturnToCustomer</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>Vendor --&gt; VendorsPayment</Description>
						<Order>250</Order>
						<Source>Vendor</Source>
						<Receiver>VendorsPayment</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>Other --&gt; CashExpenseOthers</Description>
						<Order>300</Order>
						<Source>Other</Source>
						<Receiver>OtherExpense</Receiver>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>TransferToCashCR --&gt; OtherExpense</Description>
						<Order>350</Order>
						<Source>TransferToCashCR</Source>
						<Receiver>OtherExpense</Receiver>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>SalaryForEmployee --&gt; SalaryPayWorks</Description>
						<Order>400</Order>
						<Source>SalaryForEmployee</Source>
						<Receiver>SalaryPayEmployee</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>ContractKindsCounterparties</Code>
				<Description>Enum: Kinds contracts</Description>
				<Order>900</Order>
				<Source>EnumRef.ContractKinds</Source>
				<Receiver>EnumRef.ContractKindsCounterparties</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Other --&gt; Other</Description>
						<Order>50</Order>
						<Source>Other</Source>
						<Receiver>Other</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>WithAgent --&gt; WithAgent</Description>
						<Order>100</Order>
						<Source>WithAgent</Source>
						<Receiver>WithAgent</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>FromPrincipal --&gt; FromPrincipal</Description>
						<Order>150</Order>
						<Source>FromPrincipal</Source>
						<Receiver>FromPrincipal</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>WithCustomer --&gt; WithCustomer</Description>
						<Order>200</Order>
						<Source>WithCustomer</Source>
						<Receiver>WithCustomer</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>WithVendor --&gt; WithVendor</Description>
						<Order>250</Order>
						<Source>WithVendor</Source>
						<Receiver>WithVendor</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>ReceivedInvoiceKind</Code>
				<Description>Enum: Kinds operations "Account-texture"</Description>
				<Order>950</Order>
				<Source>EnumRef.OperationKindsSupplierInvoiceNote</Source>
				<Receiver>EnumRef.ReceivedInvoiceKind</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Advance --&gt; Prepayment</Description>
						<Order>50</Order>
						<Source>Advance</Source>
						<Receiver>Prepayment</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>Receipt --&gt; OnIncome</Description>
						<Order>100</Order>
						<Source>Receipt</Source>
						<Receiver>OnIncome</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>AccrualDifferences --&gt;</Description>
						<Order>150</Order>
						<Source>AccrualDifferences</Source>
					</Value>
					<Value>
						<Code>4</Code>
						<Description> --&gt; TrueUp</Description>
						<Order>200</Order>
						<Receiver>TrueUp</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>VATAccountTypeInvoice</Code>
				<Description>Enum: Kinds operations "Account-texture"</Description>
				<Order>950</Order>
				<Source>EnumRef.OperationKindsCustomerInvoiceNote</Source>
				<Receiver>EnumRef.AccountTypeCustomerInvoiceNoteBy</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Advance --&gt; Prepayment</Description>
						<Order>50</Order>
						<Source>Advance</Source>
						<Receiver>Prepayment</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>Sale --&gt; OnImplementation</Description>
						<Order>100</Order>
						<Source>Sale</Source>
						<Receiver>OnImplementation</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>AccrualDifferences --&gt; OnSummDifference</Description>
						<Order>150</Order>
						<Source>AccrualDifferences</Source>
						<Receiver>OnSummDifference</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>OnPrincipalAdvance --&gt; OnPrincipalAdvance</Description>
						<Order>200</Order>
						<Source>OnPrincipalAdvance</Source>
						<Receiver>OnPrincipalAdvance</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>BudgetTransferKinds</Code>
				<Description>Enum: Kinds enumerations in budget</Description>
				<Order>1050</Order>
				<Source>EnumRef.BudgetTransferKinds</Source>
				<Receiver>EnumRef.BudgetTransferKinds</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>OtherPayment --&gt; OtherPayment</Description>
						<Order>50</Order>
						<Source>OtherPayment</Source>
						<Receiver>OtherPayment</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>TaxPayment --&gt; TaxPayment</Description>
						<Order>100</Order>
						<Source>TaxPayment</Source>
						<Receiver>TaxPayment</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>CustomsPayment --&gt; CustomsPayment</Description>
						<Order>150</Order>
						<Source>CustomsPayment</Source>
						<Receiver>CustomsPayment</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>KindsWarehouses</Code>
				<Description>Enum: Types structural units</Description>
				<Order>1100</Order>
				<Source>EnumRef.StructuralUnitsTypes</Source>
				<Receiver>EnumRef.TypesWarehouses</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Warehouse --&gt; WholesaleWarehouse</Description>
						<Order>50</Order>
						<Source>Warehouse</Source>
						<Receiver>WholesaleWarehouse</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>Retail --&gt; RetailShop</Description>
						<Order>100</Order>
						<Source>Retail</Source>
						<Receiver>RetailShop</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>RetailAccrualAccounting --&gt; ManualBidding</Description>
						<Order>150</Order>
						<Source>RetailAccrualAccounting</Source>
						<Receiver>NotAutomateTradingPoint</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>Division --&gt;</Description>
						<Order>200</Order>
						<Source>Division</Source>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>OperationKindsDebtAdjustment</Code>
				<Description>Enum: Kinds operations "Netting"</Description>
				<Order>1150</Order>
				<Source>EnumRef.OperationKindsNetting</Source>
				<Receiver>EnumRef.OperationKindsDebtAdjustment</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>Netting --&gt; Other</Description>
						<Order>50</Order>
						<Source>Netting</Source>
						<Receiver>Other</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>CustomerDebtAdjustment --&gt; Other</Description>
						<Order>100</Order>
						<Source>CustomerDebtAdjustment</Source>
						<Receiver>DebtCancellation</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>VendorDebtAdjustment --&gt; Other</Description>
						<Order>150</Order>
						<Source>VendorDebtAdjustment</Source>
						<Receiver>DebtCancellation</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>CustomerDebtAssignment --&gt; TransferDebt</Description>
						<Order>200</Order>
						<Source>CustomerDebtAssignment</Source>
						<Receiver>DebtTransfer</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>DebtAssignmentToVendor --&gt; TransferDebt</Description>
						<Order>250</Order>
						<Source>DebtAssignmentToVendor</Source>
						<Receiver>DebtTransfer</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>AlcoholSaleLicensesKinds</Code>
				<Description>Enum: Kinds licenses alcohol products</Description>
				<Order>1200</Order>
				<Source>EnumRef.LicenseKindsOnAlcoholicProducts</Source>
				<Receiver>EnumRef.AlcoholSaleLicensesKinds</Receiver>
				<Properties/>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>AlcoholicProducts --&gt; AlcoholicProducts</Description>
						<Order>50</Order>
						<Source>AlcoholicProducts</Source>
						<Receiver>AlcoholicProducts</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>Beer --&gt; Beer</Description>
						<Order>100</Order>
						<Source>Beer</Source>
						<Receiver>Beer</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>AlcoholContainingNonFoodProducts --&gt; Alcohol-containing</Description>
						<Order>150</Order>
						<Source>AlcoholContainingNonFoodProducts</Source>
						<Receiver>AlcoholContainingNonFoodProducts</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>AlcoholContainingFoodProducts --&gt; Alcohol-containing</Description>
						<Order>200</Order>
						<Source>AlcoholContainingFoodProducts</Source>
						<Receiver>AlcoholContainingFoodProducts</Receiver>
					</Value>
				</Values>
			</Rule>
		</Group>
		<Group>
			<Code>Catalogs</Code>
			<Description>Catalogs</Description>
			<Order>100</Order>
			<Group>
				<Code>Basic Classifiers</Code>
				<Description>Basic Classifiers</Description>
				<Order>50</Order>
				<Rule>
					<Code>Banks</Code>
					<Description>Catalog: Banks</Description>
					<Order>50</Order>
					<Donotreplace>true</Donotreplace>
					<SynchronizeByID>true</SynchronizeByID>
					<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
					<Source>CatalogRef.Banks</Source>
					<Receiver>CatalogRef.Banks</Receiver>
					<Properties>
						<Property Search="true">
							<Code>3</Code>
							<Description>Code --&gt; Code</Description>
							<Order>150</Order>
							<Source Name="Code" Kind="Property" Type="String"/>
							<Receiver Name="Code" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Description --&gt; Description</Description>
							<Order>250</Order>
							<Source Name="Description" Kind="Property" Type="String"/>
							<Receiver Name="Description" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Address --&gt; Address</Description>
							<Order>300</Order>
							<Source Name="Address" Kind="Attribute" Type="String"/>
							<Receiver Name="Address" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>City --&gt; City</Description>
							<Order>350</Order>
							<Source Name="City" Kind="Attribute" Type="String"/>
							<Receiver Name="City" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>CorrAccount --&gt; CorrAccount</Description>
							<Order>400</Order>
							<Source Name="CorrAccount" Kind="Attribute" Type="String"/>
							<Receiver Name="CorrAccount" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>PhoneNumbers --&gt; PhoneNumbers</Description>
							<Order>450</Order>
							<Source Name="PhoneNumbers" Kind="Attribute" Type="String"/>
							<Receiver Name="PhoneNumbers" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>500</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Parent --&gt; Parent</Description>
							<Order>550</Order>
							<Source Name="Parent" Kind="Property" Type="CatalogRef.Banks"/>
							<Receiver Name="Parent" Kind="Property" Type="CatalogRef.Banks"/>
							<ConversionRuleCode>Banks                                             </ConversionRuleCode>
						</Property>
						<Property Search="true" Required="true">
							<Code>12</Code>
							<Description>IsFolder --&gt; IsFolder</Description>
							<Order>600</Order>
							<Source Name="IsFolder" Kind="Property" Type="Boolean"/>
							<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>Currencies</Code>
					<Description>Catalog: Currencies</Description>
					<Order>100</Order>
					<Donotreplace>true</Donotreplace>
					<SynchronizeByID>true</SynchronizeByID>
					<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
					<Source>CatalogRef.Currencies</Source>
					<Receiver>CatalogRef.Currencies</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Code --&gt; Code</Description>
							<Order>50</Order>
							<Source Name="Code" Kind="Property" Type="String"/>
							<Receiver Name="Code" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>Description --&gt; Description</Description>
							<Order>100</Order>
							<Source Name="Description" Kind="Property" Type="String"/>
							<Receiver Name="Description" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>DescriptionFull --&gt; DescriptionFull</Description>
							<Order>150</Order>
							<Source Name="DescriptionFull" Kind="Attribute" Type="String"/>
							<Receiver Name="DescriptionFull" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>WritingParametersInEnglish --&gt; WritingParametersInEnglish</Description>
							<Order>200</Order>
							<Source Name="WritingParametersInEnglish" Kind="Attribute" Type="String"/>
							<Receiver Name="WritingParametersInEnglish" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>250</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>UOMClassifier</Code>
					<Description>Catalog: Classifier units measurements</Description>
					<Order>150</Order>
					<SynchronizeByID>true</SynchronizeByID>
					<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
					<UseQuickSearchOnImport>true</UseQuickSearchOnImport>
					<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
					<Source>CatalogRef.UOMClassifier</Source>
					<Receiver>CatalogRef.UOMClassifier</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Code --&gt; Code</Description>
							<Order>50</Order>
							<Source Name="Code" Kind="Property" Type="String"/>
							<Receiver Name="Code" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>Description --&gt; Description</Description>
							<Order>100</Order>
							<Source Name="Description" Kind="Property" Type="String"/>
							<Receiver Name="Description" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>DescriptionFull --&gt; DescriptionFull</Description>
							<Order>150</Order>
							<Source Name="DescriptionFull" Kind="Attribute" Type="String"/>
							<Receiver Name="DescriptionFull" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>WorldCountries</Code>
					<Description>Catalog: Countries world</Description>
					<Order>200</Order>
					<SynchronizeByID>true</SynchronizeByID>
					<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
					<UseQuickSearchOnImport>true</UseQuickSearchOnImport>
					<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
					<Source>CatalogRef.WorldCountries</Source>
					<Receiver>CatalogRef.WorldCountries</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Code --&gt; Code</Description>
							<Order>50</Order>
							<Source Name="Code" Kind="Property" Type="String"/>
							<Receiver Name="Code" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>AlphaCode2 --&gt; AlphaCode2</Description>
							<Order>100</Order>
							<Source Name="AlphaCode2" Kind="Attribute" Type="String"/>
							<Receiver Name="AlphaCode2" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>AlphaCode3 --&gt; AlphaCode3</Description>
							<Order>150</Order>
							<Source Name="AlphaCode3" Kind="Attribute" Type="String"/>
							<Receiver Name="AlphaCode3" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Description --&gt; Description</Description>
							<Order>200</Order>
							<Source Name="Description" Kind="Property" Type="String"/>
							<Receiver Name="Description" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DescriptionFull --&gt; DescriptionFull</Description>
							<Order>250</Order>
							<Source Name="DescriptionFull" Kind="Attribute" Type="String"/>
							<Receiver Name="DescriptionFull" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
					</Properties>
					<Values>
						<Value>
							<Code>1</Code>
							<Description>Russia --&gt; Russia</Description>
							<Order>50</Order>
							<Source>Russia</Source>
							<Receiver>Russia</Receiver>
						</Value>
					</Values>
				</Rule>
			</Group>
			<Rule>
				<Code>BankAccounts</Code>
				<Description>Catalog: Bank account</Description>
				<Order>100</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.BankAccounts</Source>
				<Receiver>CatalogRef.BankAccounts</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Bank --&gt; Bank</Description>
						<Order>50</Order>
						<Source Name="Bank" Kind="Attribute" Type="CatalogRef.Banks"/>
						<Receiver Name="Bank" Kind="Attribute" Type="CatalogRef.Banks"/>
						<ConversionRuleCode>Banks                                             </ConversionRuleCode>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>CashCurrency --&gt; CashCurrency</Description>
						<Order>100</Order>
						<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<Receiver Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>AccountType --&gt; AccountType</Description>
						<Order>150</Order>
						<Source Name="AccountType" Kind="Attribute" Type="String"/>
						<Receiver Name="AccountType" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>4</Code>
						<Description>Owner --&gt; Owner</Description>
						<Order>200</Order>
						<Source Name="Owner" Kind="Property"/>
						<Receiver Name="Owner" Kind="Property"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>ClosingDate --&gt; ClosingDate</Description>
						<Order>250</Order>
						<Source Name="ClosingDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="ClosingDate" Kind="Attribute" Type="Date"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>OpeningDate --&gt; OpeningDate</Description>
						<Order>300</Order>
						<Source Name="OpeningDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="OpeningDate" Kind="Attribute" Type="Date"/>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>Code --&gt; Code</Description>
						<Order>350</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>Description --&gt; Description</Description>
						<Order>400</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>9</Code>
						<Description>PermissionNumberAndDate --&gt; PermissionNumberAndDate</Description>
						<Order>450</Order>
						<Source Name="PermissionNumberAndDate" Kind="Attribute" Type="String"/>
						<Receiver Name="PermissionNumberAndDate" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>10</Code>
						<Description>AccountNo --&gt; AccountNo</Description>
						<Order>500</Order>
						<Source Name="AccountNo" Kind="Attribute" Type="String"/>
						<Receiver Name="AccountNo" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>11</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>550</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>12</Code>
						<Description>AmountWithoutCents --&gt; AmountWithoutCents</Description>
						<Order>600</Order>
						<Source Name="AmountWithoutCents" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="AmountWithoutCents" Kind="Attribute" Type="Boolean"/>
					</Property>
					<Property>
						<Code>13</Code>
						<Description>CorrespondentText --&gt; CorrespondentText</Description>
						<Order>650</Order>
						<Source Name="CorrespondentText" Kind="Attribute" Type="String"/>
						<Receiver Name="CorrespondentText" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>14</Code>
						<Description>DestinationText --&gt; DestinationText</Description>
						<Order>700</Order>
						<Source Name="DestinationText" Kind="Attribute" Type="String"/>
						<Receiver Name="DestinationText" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>15</Code>
						<Description>KPPIndicationVersion --&gt; AlwaysSpecifyPPC</Description>
						<Order>750</Order>
						<Source Name="KPPIndicationVersion" Kind="Attribute" Type="EnumRef.KPPIndicationVariants"/>
						<Receiver Name="AlwaysSpecifyPPC" Kind="Attribute" Type="Boolean"/>
						<BeforeExport>Value = (Source.KPPIndicationVersion = Enums.KPPIndicationVariants.InAllPaymentOrders);</BeforeExport>
					</Property>
					<Property>
						<Code>16</Code>
						<Description>MonthOutputOption --&gt; MonthInWords</Description>
						<Order>800</Order>
						<Source Name="MonthOutputOption" Kind="Attribute" Type="EnumRef.MonthInDocumentDateOutputVariants"/>
						<Receiver Name="MonthInWords" Kind="Attribute" Type="Boolean"/>
						<BeforeExport>Value = (Source.MonthOutputOption = Enums.MonthOutputTypesInDocumentDate.InWords);</BeforeExport>
					</Property>
					<Property>
						<Code>17</Code>
						<Description>AccountsBank --&gt; SettlementBank</Description>
						<Order>850</Order>
						<Source Name="AccountsBank" Kind="Attribute" Type="CatalogRef.Banks"/>
						<Receiver Name="SettlementBank" Kind="Attribute" Type="CatalogRef.Banks"/>
						<ConversionRuleCode>Banks                                             </ConversionRuleCode>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>Counterparties</Code>
				<Description>Catalog: Counterparties</Description>
				<Order>150</Order>
				<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Not Object.IsFolder
		AND Not ValueIsFilled(Object.RegistrationCountry) Then
		Object.RegistrationCountry = Catalogs.WorldCountries.Russia;
	EndIf;
	
EndIf;
</AfterImport>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.Counterparties</Source>
				<Receiver>CatalogRef.Counterparties</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>100</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>150</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.Counterparties"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.Counterparties"/>
						<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						<BeforeExport>If Source.Parent = Source.Ref Then
	Value = Undefined;	
EndIf;</BeforeExport>
					</Property>
					<Property Search="true" Required="true">
						<Code>4</Code>
						<Description>IsFolder --&gt; IsFolder</Description>
						<Order>200</Order>
						<Source Name="IsFolder" Kind="Property" Type="Boolean"/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
					</Property>
					<Property Search="true">
						<Code>5</Code>
						<Description>TIN --&gt; TIN</Description>
						<Order>250</Order>
						<Source Name="TIN" Kind="Attribute" Type="String"/>
						<Receiver Name="TIN" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>CodeByOKPO --&gt; CodeByOKPO</Description>
						<Order>300</Order>
						<Source Name="CodeByOKPO" Kind="Attribute" Type="String"/>
						<Receiver Name="CodeByOKPO" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>7</Code>
						<Description>KPP --&gt; KPP</Description>
						<Order>350</Order>
						<Source Name="KPP" Kind="Attribute" Type="String"/>
						<Receiver Name="KPP" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>DescriptionFull --&gt; DescriptionFull</Description>
						<Order>400</Order>
						<Source Name="DescriptionFull" Kind="Attribute" Type="String"/>
						<Receiver Name="DescriptionFull" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>9</Code>
						<Description>LegalEntityIndividual --&gt; LegalIndividual</Description>
						<Order>450</Order>
						<Source Name="LegalEntityIndividual" Kind="Attribute" Type="EnumRef.LegalEntityIndividual"/>
						<Receiver Name="LegalIndividual" Kind="Attribute" Type="EnumRef.LegalEntityIndividual"/>
						<ConversionRuleCode>LegalEntityIndividual                                         </ConversionRuleCode>
					</Property>
					<Property>
						<Code>10</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>500</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>11</Code>
						<Description>BankAccountByDefault --&gt; DefaultBankAccount</Description>
						<Order>550</Order>
						<Source Name="BankAccountByDefault" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
						<Receiver Name="DefaultBankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
						<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
					</Property>
					<Property>
						<Code>12</Code>
						<Description>ContractByDefault --&gt; CounterpartyMainContract</Description>
						<Order>600</Order>
						<Source Name="ContractByDefault" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
						<Receiver Name="CounterpartyMainContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
						<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
					</Property>
					<Property>
						<Code>13</Code>
						<Description> --&gt; HeadCounterparty</Description>
						<Order>650</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="HeadCounterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
						<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						<BeforeExport>Value = Source.Ref;</BeforeExport>
					</Property>
					<Group>
						<Code>14</Code>
						<Description>ContactInformation --&gt; ContactInformation</Description>
						<Order>700</Order>
						<Source Name="ContactInformation" Kind="TabularSection"/>
						<Receiver Name="ContactInformation" Kind="TabularSection"/>
						<BeforeProcessExport>If Source.IsFolder = True Then
	
	Cancel = True;
	
EndIf;</BeforeProcessExport>
						<Property>
							<Code>15</Code>
							<Description>EMail_Address --&gt; EMail_Address</Description>
							<Order>50</Order>
							<Source Name="EMail_Address" Kind="Attribute" Type="String"/>
							<Receiver Name="EMail_Address" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>Type --&gt; Type</Description>
							<Order>100</Order>
							<Source Name="Type" Kind="Attribute" Type="EnumRef.ContactInformationTypes"/>
							<Receiver Name="Type" Kind="Attribute" Type="EnumRef.ContactInformationTypes"/>
							<ConversionRuleCode>ContactInformationTypes                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>FieldsValues --&gt; FieldsValues</Description>
							<Order>150</Order>
							<Source Name="FieldsValues" Kind="Attribute" Type="String"/>
							<Receiver Name="FieldsValues" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>18</Code>
							<Description>Presentation --&gt; Presentation</Description>
							<Order>200</Order>
							<Source Name="Presentation" Kind="Attribute" Type="String"/>
							<Receiver Name="Presentation" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>20</Code>
							<Description>Kind --&gt; Kind</Description>
							<Order>250</Order>
							<Source Name="Kind" Kind="Attribute" Type="CatalogRef.ContactInformationTypes"/>
							<Receiver Name="Kind" Kind="Attribute" Type="CatalogRef.ContactInformationTypes"/>
							<ConversionRuleCode>ContactInformationTypes                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>21</Code>
							<Description>City --&gt; City</Description>
							<Order>300</Order>
							<Source Name="City" Kind="Attribute" Type="String"/>
							<Receiver Name="City" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>22</Code>
							<Description>ServerDomainName --&gt; ServerDomainName</Description>
							<Order>350</Order>
							<Source Name="ServerDomainName" Kind="Attribute" Type="String"/>
							<Receiver Name="ServerDomainName" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>23</Code>
							<Description>PhoneNumber --&gt; PhoneNumber</Description>
							<Order>400</Order>
							<Source Name="PhoneNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="PhoneNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>24</Code>
							<Description>PhoneNumberNoCodes --&gt; PhoneNumberNoCodes</Description>
							<Order>450</Order>
							<Source Name="PhoneNumberNoCodes" Kind="Attribute" Type="String"/>
							<Receiver Name="PhoneNumberNoCodes" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>25</Code>
							<Description>Region --&gt; Region</Description>
							<Order>500</Order>
							<Source Name="Region" Kind="Attribute" Type="String"/>
							<Receiver Name="Region" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>26</Code>
							<Description>Country --&gt; Country</Description>
							<Order>550</Order>
							<Source Name="Country" Kind="Attribute" Type="String"/>
							<Receiver Name="Country" Kind="Attribute" Type="String"/>
						</Property>
					</Group>
					<Property>
						<Code>19</Code>
						<Description>Comment --&gt; Comment</Description>
						<Order>750</Order>
						<Source Name="Comment" Kind="Attribute" Type="String"/>
						<Receiver Name="Comment" Kind="Attribute" Type="String"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>ProductsAndServices</Code>
				<Description>Catalog: ProductsAndServices</Description>
				<Order>200</Order>
				<AfterImport>
If Not ValueIsFilled(Object.ProductsAndServicesKind) Then
	
	If ValueIsFilled(Object.Parent) Then
		ProductsAndServicesKind = CommonUse.ObjectAttributeValue(Object.Parent, "ProductsAndServicesKind");		
		If ValueIsFilled(ProductsAndServicesKind) 
			AND Object.Service = ProductsAndServicesKind.Service Then
			Object.ProductsAndServicesKind = ProductsAndServicesKind;
		EndIf;
	EndIf;
	
	If Not ValueIsFilled(Object.ProductsAndServicesKind) Then
		
		IsService = Object.Service = True;
		Object.ProductsAndServicesKind = Catalogs.ProductsAndServicesKinds.ProductsAndServicesDefaultItem(IsService);
		
	EndIf;
	
EndIf;

Execute(Algorithms.ImportInformationAboutAlcoholicProducts);</AfterImport>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.ProductsAndServices</Source>
				<Receiver>CatalogRef.ProductsAndServices</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Comment --&gt; Comment</Description>
						<Order>100</Order>
						<Source Name="Comment" Kind="Attribute" Type="String"/>
						<Receiver Name="Comment" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>15</Code>
						<Description>SKU --&gt; SKU</Description>
						<Order>150</Order>
						<Source Name="SKU" Kind="Attribute" Type="String"/>
						<Receiver Name="SKU" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>3</Code>
						<Description>Description --&gt; Description</Description>
						<Order>200</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>DescriptionFull --&gt; DescriptionFull</Description>
						<Order>250</Order>
						<Source Name="DescriptionFull" Kind="Attribute" Type="String"/>
						<Receiver Name="DescriptionFull" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>ProductsAndServicesCategory --&gt; ProductsAndServicesCategory</Description>
						<Order>300</Order>
						<Source Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
						<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
						<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>350</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property Search="true">
						<Code>7</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>400</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.ProductsAndServices"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.ProductsAndServices"/>
						<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
						<BeforeExport>If Source.Parent = Source.Ref Then
	Value = Undefined;	
EndIf;</BeforeExport>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>VATRate --&gt; VATRate</Description>
						<Order>450</Order>
						<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
						<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
						<BeforeExport>If Not Source.IsFolder Then
	If Source.VATRate.NotTaxable Then
		Expression = "Enums.VATRates.WithoutVAT";	
	ElsIf Source.VATRate.Rate = 18
		 AND Not Source.VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT18";
	ElsIf Source.VATRate.Rate = 18
			AND Source.VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT18_118";
	ElsIf Source.VATRate.Rate = 10 
		 AND Not Source.VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT10";
	ElsIf Source.VATRate.Rate = 10 
			AND Source.VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT10_110";
	ElsIf Source.VATRate.Rate = 0 Then
		Expression = "Enums.VATRates.VAT0"; 
	ElsIf Source.VATRate.Rate = 20
		 AND Not Source.VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT20";
	ElsIf Source.VATRate.Rate = 20
			AND Source.VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT20_120";
	Else
		Expression = "Enums.VATRates.VAT18";
	EndIf;
EndIf;</BeforeExport>
					</Property>
					<Property Search="true" Required="true">
						<Code>9</Code>
						<Description>IsFolder --&gt; IsFolder</Description>
						<Order>500</Order>
						<Source Name="IsFolder" Kind="Property" Type="Boolean"/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>10</Code>
						<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
						<Order>550</Order>
						<Source Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
						<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
						<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
					</Property>
					<Property>
						<Code>11</Code>
						<Description>Specification --&gt; MainProductsAndServicesSpecification</Description>
						<Order>600</Order>
						<Source Name="Specification" Kind="Attribute" Type="CatalogRef.Specifications"/>
						<Receiver Name="MainProductsAndServicesSpecification" Kind="Attribute" Type="CatalogRef.ProductsAndServicesSpecifications"/>
						<ConversionRuleCode>SpecificationsProductsAndServices                          </ConversionRuleCode>
					</Property>
					<Property>
						<Code>13</Code>
						<Description>ProductsAndServicesType --&gt; Service</Description>
						<Order>650</Order>
						<Source Name="ProductsAndServicesType" Kind="Attribute" Type="EnumRef.ProductsAndServicesTypes"/>
						<Receiver Name="Service" Kind="Attribute" Type="Boolean"/>
						<BeforeExport>If Not Source.IsFolder Then
	
	Value = (Source.ProductsAndServicesType = Enums.ProductsAndServicesTypes.Service)
		OR (Source.ProductsAndServicesType = Enums.ProductsAndServicesTypes.Work);
	
EndIf;</BeforeExport>
					</Property>
					<Property>
						<Code>14</Code>
						<Description>CountryOfOrigin --&gt; CountryOfOrigin</Description>
						<Order>700</Order>
						<Source Name="CountryOfOrigin" Kind="Attribute" Type="CatalogRef.WorldCountries"/>
						<Receiver Name="CountryOfOrigin" Kind="Attribute" Type="CatalogRef.WorldCountries"/>
						<ConversionRuleCode>WorldCountries                                        </ConversionRuleCode>
						<BeforeExport>If Source.CountryOfOrigin = Catalogs.WorldCountries.Russia Then
	Cancel = True;	
EndIf;</BeforeExport>
					</Property>
					<Property>
						<Code>21</Code>
						<Description>AlcoholicProductsKind --&gt; AlcoholicProducts</Description>
						<Order>750</Order>
						<Source Name="AlcoholicProductsKind" Kind="Attribute" Type="CatalogRef.AlcoholicProductsKinds"/>
						<Receiver Name="" Kind=""/>
						<ParameterForTransferName>AlcoholicProducts</ParameterForTransferName>
						<BeforeExport>Value = ValueIsFilled(Source.AlcoholicProductsKind);</BeforeExport>
					</Property>
					<Property>
						<Code>17</Code>
						<Description>VolumeDAL --&gt; VolumeDAL</Description>
						<Order>800</Order>
						<Source Name="VolumeDAL" Kind="Attribute" Type="Number"/>
						<Receiver Name="" Kind=""/>
						<ParameterForTransferName>VolumeDAL</ParameterForTransferName>
					</Property>
					<Property>
						<Code>16</Code>
						<Description>AlcoholicProductsKind --&gt; AlcoholicProductsKind</Description>
						<Order>850</Order>
						<Source Name="AlcoholicProductsKind" Kind="Attribute" Type="CatalogRef.AlcoholicProductsKinds"/>
						<Receiver Name="" Kind=""/>
						<ConversionRuleCode>AlcoholicProductsKinds                          </ConversionRuleCode>
						<ParameterForTransferName>AlcoholicProductsKind</ParameterForTransferName>
					</Property>
					<Property>
						<Code>18</Code>
						<Description>AlcoholicProductsKind --&gt; LicenseKind</Description>
						<Order>900</Order>
						<Source Name="AlcoholicProductsKind" Kind="Attribute" Type="CatalogRef.AlcoholicProductsKinds"/>
						<Receiver Name="" Kind=""/>
						<ConversionRuleCode>AlcoholSaleLicensesKinds                     </ConversionRuleCode>
						<ParameterForTransferName>LicenseKind</ParameterForTransferName>
						<OnExport>If ValueIsFilled(Value) Then
	StructureValue = CommonUse.ObjectAttributesValues(Value, "LicenseKind");
	Value = StructureValue.LicenseKind;
Else
	Value = Enums.LicenseKindsOnAlcoholicProducts.EmptyRef();
EndIf;</OnExport>
					</Property>
					<Property>
						<Code>19</Code>
						<Description>ImportedAlcoholicProducts --&gt; ImportedAlcoholicProducts</Description>
						<Order>950</Order>
						<Source Name="ImportedAlcoholicProducts" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="" Kind=""/>
						<ParameterForTransferName>ImportedAlcoholicProducts</ParameterForTransferName>
					</Property>
					<Property>
						<Code>20</Code>
						<Description>AlcoholicProductsManufacturerImporter --&gt; AlcoholicProductsManufacturerImporter</Description>
						<Order>1050</Order>
						<Source Name="AlcoholicProductsManufacturerImporter" Kind="Attribute" Type="CatalogRef.Counterparties"/>
						<Receiver Name="" Kind=""/>
						<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						<ParameterForTransferName>AlcoholicProductsManufacturerImporter</ParameterForTransferName>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>Companies</Code>
				<Description>Catalog: Companies</Description>
				<Order>250</Order>
				<BeforeExport>If Source.IsFolder = True Then
	
	Cancel = True;
	
EndIf;</BeforeExport>
				<AfterImport>If Not ObjectFound Then
	Parameters.ImportedByCompanies.Add(Object);
EndIf;</AfterImport>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.Companies</Source>
				<Receiver>CatalogRef.Companies</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>100</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>3</Code>
						<Description>TIN --&gt; TIN</Description>
						<Order>150</Order>
						<Source Name="TIN" Kind="Attribute" Type="String"/>
						<Receiver Name="TIN" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>CodeByOKPO --&gt; CodeByOKPO</Description>
						<Order>250</Order>
						<Source Name="CodeByOKPO" Kind="Attribute" Type="String"/>
						<Receiver Name="CodeByOKPO" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>6</Code>
						<Description>KPP --&gt; KPP</Description>
						<Order>300</Order>
						<Source Name="KPP" Kind="Attribute" Type="String"/>
						<Receiver Name="KPP" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>DescriptionFull --&gt; DescriptionFull</Description>
						<Order>350</Order>
						<Source Name="DescriptionFull" Kind="Attribute" Type="String"/>
						<Receiver Name="DescriptionFull" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>Prefix --&gt; Prefix</Description>
						<Order>400</Order>
						<Source Name="Prefix" Kind="Attribute" Type="String"/>
						<Receiver Name="Prefix" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>9</Code>
						<Description>LegalEntityIndividual --&gt; LegalIndividual</Description>
						<Order>450</Order>
						<Source Name="LegalEntityIndividual" Kind="Attribute" Type="EnumRef.LegalEntityIndividual"/>
						<Receiver Name="LegalIndividual" Kind="Attribute" Type="EnumRef.LegalEntityIndividual"/>
						<ConversionRuleCode>LegalEntityIndividual                                         </ConversionRuleCode>
					</Property>
					<Property>
						<Code>10</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>500</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>11</Code>
						<Description>BankAccountByDefault --&gt; DefaultBankAccount</Description>
						<Order>550</Order>
						<Source Name="BankAccountByDefault" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
						<Receiver Name="DefaultBankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
						<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
					</Property>
					<Property>
						<Code>12</Code>
						<Description>Individual --&gt; AnIndividualEntrepreneur</Description>
						<Order>600</Order>
						<Source Name="Individual" Kind="Attribute" Type="CatalogRef.Individuals"/>
						<Receiver Name="AnIndividualEntrepreneur" Kind="Attribute" Type="CatalogRef.Individuals"/>
						<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
					</Property>
					<Property>
						<Code>18</Code>
						<Description>CertificateIssueDate --&gt; CertificateIssueDate</Description>
						<Order>650</Order>
						<Source Name="CertificateIssueDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="CertificateIssueDate" Kind="Attribute" Type="Date"/>
					</Property>
					<Property>
						<Code>20</Code>
						<Description> --&gt; RegionRate</Description>
						<Order>700</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="RegionRate" Kind="Attribute" Type="Number"/>
						<OnExport>Value  = 1;</OnExport>
					</Property>
					<Property>
						<Code>19</Code>
						<Description>CertificateSeriesNumber --&gt; CertificateSeriesNumber</Description>
						<Order>750</Order>
						<Source Name="CertificateSeriesNumber" Kind="Attribute" Type="String"/>
						<Receiver Name="CertificateSeriesNumber" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>34</Code>
						<Description> --&gt; ParentCompany</Description>
						<Order>800</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="ParentCompany" Kind="Attribute" Type="CatalogRef.Companies"/>
						<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						<BeforeExport>Value = Source.Ref;</BeforeExport>
					</Property>
					<Group>
						<Code>21</Code>
						<Description>ContactInformation --&gt; ContactInformation</Description>
						<Order>850</Order>
						<Source Name="ContactInformation" Kind="TabularSection"/>
						<Receiver Name="ContactInformation" Kind="TabularSection"/>
						<Property>
							<Code>22</Code>
							<Description>EMail_Address --&gt; EMail_Address</Description>
							<Order>50</Order>
							<Source Name="EMail_Address" Kind="Attribute" Type="String"/>
							<Receiver Name="EMail_Address" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>23</Code>
							<Description>Kind --&gt; Kind</Description>
							<Order>100</Order>
							<Source Name="Kind" Kind="Attribute" Type="CatalogRef.ContactInformationTypes"/>
							<Receiver Name="Kind" Kind="Attribute" Type="CatalogRef.ContactInformationTypes"/>
							<ConversionRuleCode>ContactInformationTypes                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>24</Code>
							<Description>City --&gt; City</Description>
							<Order>150</Order>
							<Source Name="City" Kind="Attribute" Type="String"/>
							<Receiver Name="City" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>25</Code>
							<Description>ServerDomainName --&gt; ServerDomainName</Description>
							<Order>200</Order>
							<Source Name="ServerDomainName" Kind="Attribute" Type="String"/>
							<Receiver Name="ServerDomainName" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>26</Code>
							<Description>FieldsValues --&gt; FieldsValues</Description>
							<Order>250</Order>
							<Source Name="FieldsValues" Kind="Attribute" Type="String"/>
							<Receiver Name="FieldsValues" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>27</Code>
							<Description>PhoneNumber --&gt; PhoneNumber</Description>
							<Order>300</Order>
							<Source Name="PhoneNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="PhoneNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>28</Code>
							<Description>PhoneNumberNoCodes --&gt; PhoneNumberNoCodes</Description>
							<Order>350</Order>
							<Source Name="PhoneNumberNoCodes" Kind="Attribute" Type="String"/>
							<Receiver Name="PhoneNumberNoCodes" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>29</Code>
							<Description>Presentation --&gt; Presentation</Description>
							<Order>400</Order>
							<Source Name="Presentation" Kind="Attribute" Type="String"/>
							<Receiver Name="Presentation" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>30</Code>
							<Description>Region --&gt; Region</Description>
							<Order>450</Order>
							<Source Name="Region" Kind="Attribute" Type="String"/>
							<Receiver Name="Region" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>31</Code>
							<Description>Country --&gt; Country</Description>
							<Order>500</Order>
							<Source Name="Country" Kind="Attribute" Type="String"/>
							<Receiver Name="Country" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>32</Code>
							<Description>Type --&gt; Type</Description>
							<Order>550</Order>
							<Source Name="Type" Kind="Attribute" Type="EnumRef.ContactInformationTypes"/>
							<Receiver Name="Type" Kind="Attribute" Type="EnumRef.ContactInformationTypes"/>
							<ConversionRuleCode>ContactInformationTypes                          </ConversionRuleCode>
						</Property>
					</Group>
					<Property>
						<Code>33</Code>
						<Description>Description --&gt; AbbreviatedName</Description>
						<Order>900</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="AbbreviatedName" Kind="Attribute" Type="String"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>ProductsAndServicesCategories</Code>
				<Description>Catalog: ProductsAndServices groups</Description>
				<Order>300</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.ProductsAndServicesCategories</Source>
				<Receiver>CatalogRef.ProductsAndServicesCategories</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>100</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>200</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property Search="true" Required="true">
						<Code>5</Code>
						<Description> --&gt; IsFolder</Description>
						<Order>250</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
						<BeforeExport>Value = False;</BeforeExport>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>Individuals</Code>
				<Description>Catalog: Actual person</Description>
				<Order>350</Order>
				<BeforeExport>If Source.IsFolder = True Then
	
	Cancel = True;
	
EndIf;</BeforeExport>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.Individuals</Source>
				<Receiver>CatalogRef.Individuals</Receiver>
				<Properties>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>1</Code>
						<Description>BirthDate --&gt; BirthDate</Description>
						<Order>100</Order>
						<Source Name="BirthDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="BirthDate" Kind="Attribute" Type="Date"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Gender --&gt; Gender</Description>
						<Order>150</Order>
						<Source Name="Gender" Kind="Attribute" Type="EnumRef.PrivatePersonGender"/>
						<Receiver Name="Gender" Kind="Attribute" Type="EnumRef.PrivatePersonGender"/>
						<ConversionRuleCode>GenderIndividuals                                  </ConversionRuleCode>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>200</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>Code --&gt; Code</Description>
						<Order>350</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Group>
						<Code>8</Code>
						<Description>ContactInformation --&gt; ContactInformation</Description>
						<Order>400</Order>
						<Source Name="ContactInformation" Kind="TabularSection"/>
						<Receiver Name="ContactInformation" Kind="TabularSection"/>
						<BeforeProcessExport>If Source.IsFolder = True Then
	
	Cancel = True;
	
EndIf;</BeforeProcessExport>
						<Property>
							<Code>15</Code>
							<Description>EMail_Address --&gt; EMail_Address</Description>
							<Order>50</Order>
							<Source Name="EMail_Address" Kind="Attribute" Type="String"/>
							<Receiver Name="EMail_Address" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>Kind --&gt; Kind</Description>
							<Order>100</Order>
							<Source Name="Kind" Kind="Attribute" Type="CatalogRef.ContactInformationTypes"/>
							<Receiver Name="Kind" Kind="Attribute" Type="CatalogRef.ContactInformationTypes"/>
							<ConversionRuleCode>ContactInformationTypes                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>City --&gt; City</Description>
							<Order>150</Order>
							<Source Name="City" Kind="Attribute" Type="String"/>
							<Receiver Name="City" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>18</Code>
							<Description>ServerDomainName --&gt; ServerDomainName</Description>
							<Order>200</Order>
							<Source Name="ServerDomainName" Kind="Attribute" Type="String"/>
							<Receiver Name="ServerDomainName" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>19</Code>
							<Description>FieldsValues --&gt; FieldsValues</Description>
							<Order>250</Order>
							<Source Name="FieldsValues" Kind="Attribute" Type="String"/>
							<Receiver Name="FieldsValues" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>20</Code>
							<Description>PhoneNumber --&gt; PhoneNumber</Description>
							<Order>300</Order>
							<Source Name="PhoneNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="PhoneNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>21</Code>
							<Description>PhoneNumberNoCodes --&gt; PhoneNumberNoCodes</Description>
							<Order>350</Order>
							<Source Name="PhoneNumberNoCodes" Kind="Attribute" Type="String"/>
							<Receiver Name="PhoneNumberNoCodes" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>22</Code>
							<Description>Presentation --&gt; Presentation</Description>
							<Order>400</Order>
							<Source Name="Presentation" Kind="Attribute" Type="String"/>
							<Receiver Name="Presentation" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>23</Code>
							<Description>Region --&gt; Region</Description>
							<Order>450</Order>
							<Source Name="Region" Kind="Attribute" Type="String"/>
							<Receiver Name="Region" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>24</Code>
							<Description>Country --&gt; Country</Description>
							<Order>500</Order>
							<Source Name="Country" Kind="Attribute" Type="String"/>
							<Receiver Name="Country" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>25</Code>
							<Description>Type --&gt; Type</Description>
							<Order>550</Order>
							<Source Name="Type" Kind="Attribute" Type="EnumRef.ContactInformationTypes"/>
							<Receiver Name="Type" Kind="Attribute" Type="EnumRef.ContactInformationTypes"/>
							<ConversionRuleCode>ContactInformationTypes                          </ConversionRuleCode>
						</Property>
					</Group>
					<Property>
						<Code>13</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>450</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.Individuals"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.Individuals"/>
						<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
					</Property>
					<Property Search="true" Required="true">
						<Code>14</Code>
						<Description>IsFolder --&gt; IsFolder</Description>
						<Order>500</Order>
						<Source Name="IsFolder" Kind="Property" Type="Boolean"/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>CounterpartyContracts</Code>
				<Description>Catalog: Contracts counterparties</Description>
				<Order>400</Order>
				<AfterImport>CurrencyOfRegulatedAccounting	= Parameters.CurrencyOfRegulatedAccounting;
Object.PaymentInCurrency 			= (Object.SettlementsCurrency &lt;&gt; CurrencyOfRegulatedAccounting)
										AND Not Object.SettlementsInStandardUnits;

Object.PaymentDueDateSet 	= Object.PaymentDueDate &lt;&gt; 0;</AfterImport>
				<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
				<Source>CatalogRef.CounterpartyContracts</Source>
				<Receiver>CatalogRef.CounterpartyContracts</Receiver>
				<Properties>
					<Property Search="true">
						<Code>3</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>1</Code>
						<Description>Owner --&gt; Owner</Description>
						<Order>100</Order>
						<Source Name="Owner" Kind="Property" Type="CatalogRef.Counterparties"/>
						<Receiver Name="Owner" Kind="Property" Type="CatalogRef.Counterparties"/>
						<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Code --&gt; Code</Description>
						<Order>150</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>4</Code>
						<Description>Company --&gt; Company</Description>
						<Order>200</Order>
						<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
						<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
						<ConversionRuleCode>Companies                                       </ConversionRuleCode>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>250</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>SettlementsInStandardUnits --&gt; SettlementsInStandardUnits</Description>
						<Order>300</Order>
						<Source Name="SettlementsInStandardUnits" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="SettlementsInStandardUnits" Kind="Attribute" Type="Boolean"/>
					</Property>
					<Property Search="true">
						<Code>9</Code>
						<Description>SettlementsCurrency --&gt; SettlementsCurrency</Description>
						<Order>350</Order>
						<Source Name="SettlementsCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<Receiver Name="SettlementsCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
					</Property>
					<Property Search="true" Required="true">
						<Code>11</Code>
						<Description> --&gt; IsFolder</Description>
						<Order>400</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
						<BeforeExport>Value = False;</BeforeExport>
					</Property>
					<Property Search="true">
						<Code>12</Code>
						<Description>ContractKind --&gt; ContractKind</Description>
						<Order>450</Order>
						<Source Name="ContractKind" Kind="Attribute" Type="EnumRef.ContractsKinds"/>
						<Receiver Name="ContractKind" Kind="Attribute" Type="EnumRef.CounterpartiesContractsKinds"/>
						<ConversionRuleCode>ContractKindsCounterparties                         </ConversionRuleCode>
					</Property>
					<Property>
						<Code>13</Code>
						<Description>PriceKind --&gt; PricesType</Description>
						<Order>500</Order>
						<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
						<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
						<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
					</Property>
					<Property>
						<Code>14</Code>
						<Description>ContractDate --&gt; Date</Description>
						<Order>550</Order>
						<Source Name="ContractDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="Date" Kind="Attribute" Type="Date"/>
					</Property>
					<Property>
						<Code>15</Code>
						<Description>ContractNo --&gt; Number</Description>
						<Order>600</Order>
						<Source Name="ContractNo" Kind="Attribute" Type="String"/>
						<Receiver Name="Number" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>16</Code>
						<Description>CustomerPaymentDueDate --&gt; PaymentDueDate</Description>
						<Order>650</Order>
						<Source Name="CustomerPaymentDueDate" Kind="Attribute" Type="Number"/>
						<Receiver Name="PaymentDueDate" Kind="Attribute" Type="Number"/>
						<BeforeExport>
If Source.ContractKind = Enums.ContractKinds.WithCustomer
	OR Source.ContractKind = Enums.ContractKinds.WithAgent Then
	Value = Source.CustomerPaymentDueDate;
ElsIf Source.ContractKind = Enums.ContractKinds.WithVendor
	OR Source.ContractKind = Enums.ContractKinds.FromPrincipal Then
	Value = Source.VendorPaymentDueDate;
Else
	Value = 0;
EndIf;
</BeforeExport>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>CounterpartyContractsSearchByIdIdentificator</Code>
				<Description>Catalog: Contracts counterparties</Description>
				<Order>450</Order>
				<AfterImport>CurrencyOfRegulatedAccounting	= Parameters.CurrencyOfRegulatedAccounting;
Object.PaymentInCurrency 			= (Object.SettlementsCurrency &lt;&gt; CurrencyOfRegulatedAccounting)
										AND Not Object.SettlementsInStandardUnits;
										
Object.PaymentDueDateSet     = Object.PaymentDueDate &lt;&gt; 0;</AfterImport>
				<SynchronizeByID>true</SynchronizeByID>
				<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
				<Source>CatalogRef.CounterpartyContracts</Source>
				<Receiver>CatalogRef.CounterpartyContracts</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Owner --&gt; Owner</Description>
						<Order>100</Order>
						<Source Name="Owner" Kind="Property" Type="CatalogRef.Counterparties"/>
						<Receiver Name="Owner" Kind="Property" Type="CatalogRef.Counterparties"/>
						<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Code --&gt; Code</Description>
						<Order>150</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>4</Code>
						<Description>Company --&gt; Company</Description>
						<Order>200</Order>
						<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
						<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
						<ConversionRuleCode>Companies                                       </ConversionRuleCode>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>250</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>SettlementsInStandardUnits --&gt; SettlementsInStandardUnits</Description>
						<Order>300</Order>
						<Source Name="SettlementsInStandardUnits" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="SettlementsInStandardUnits" Kind="Attribute" Type="Boolean"/>
					</Property>
					<Property Search="true">
						<Code>7</Code>
						<Description>SettlementsCurrency --&gt; SettlementsCurrency</Description>
						<Order>350</Order>
						<Source Name="SettlementsCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<Receiver Name="SettlementsCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
					</Property>
					<Property Search="true" Required="true">
						<Code>8</Code>
						<Description> --&gt; IsFolder</Description>
						<Order>400</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
						<BeforeExport>Value = False;</BeforeExport>
					</Property>
					<Property Search="true">
						<Code>9</Code>
						<Description>ContractKind --&gt; ContractKind</Description>
						<Order>450</Order>
						<Source Name="ContractKind" Kind="Attribute" Type="EnumRef.ContractsKinds"/>
						<Receiver Name="ContractKind" Kind="Attribute" Type="EnumRef.CounterpartiesContractsKinds"/>
						<ConversionRuleCode>ContractKindsCounterparties                         </ConversionRuleCode>
					</Property>
					<Property>
						<Code>10</Code>
						<Description>PriceKind --&gt; PricesType</Description>
						<Order>500</Order>
						<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
						<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
						<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
					</Property>
					<Property>
						<Code>11</Code>
						<Description>ContractDate --&gt; Date</Description>
						<Order>550</Order>
						<Source Name="ContractDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="Date" Kind="Attribute" Type="Date"/>
					</Property>
					<Property>
						<Code>12</Code>
						<Description>ContractNo --&gt; Number</Description>
						<Order>600</Order>
						<Source Name="ContractNo" Kind="Attribute" Type="String"/>
						<Receiver Name="Number" Kind="Attribute" Type="String"/>
					</Property>
					<Property>
						<Code>13</Code>
						<Description>CustomerPaymentDueDate --&gt; PaymentDueDate</Description>
						<Order>650</Order>
						<Source Name="CustomerPaymentDueDate" Kind="Attribute" Type="Number"/>
						<Receiver Name="PaymentDueDate" Kind="Attribute" Type="Number"/>
						<BeforeExport>
If Source.ContractKind = Enums.ContractKinds.WithCustomer
	OR Source.ContractKind = Enums.ContractKinds.WithAgent Then
	Value = Source.CustomerPaymentDueDate;
ElsIf Source.ContractKind = Enums.ContractKinds.WithVendor
	OR Source.ContractKind = Enums.ContractKinds.FromPrincipal Then
	Value = Source.VendorPaymentDueDate;
Else
	Value = 0;
EndIf;
</BeforeExport>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>CCDNumbers</Code>
				<Description>Catalog: Numbers CCD</Description>
				<Order>500</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.CCDNumbers</Source>
				<Receiver>CatalogRef.CCDNumbers</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>100</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>CashFlowItems</Code>
				<Description>Catalog:Cash flow items</Description>
				<Order>550</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.CashFlowItems</Source>
				<Receiver>CatalogRef.CashFlowItems</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>100</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>150</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property Search="true" Required="true">
						<Code>4</Code>
						<Description>IsFolder --&gt; IsFolder</Description>
						<Order>200</Order>
						<Source Name="IsFolder" Kind="Property" Type="Boolean"/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>250</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.CashFlowItems"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.CashFlowItems"/>
						<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>Warehouses</Code>
				<Description>Catalog: Structural items</Description>
				<Order>600</Order>
				<AfterImport>If DataImportToInformationBaseMode() Then
	NewRow = Parameters.ImportedObjectsTable.Add();
	NewRow.ImportingObject = Object;
	NewRow.ObjectParameters  = ObjectParameters;
	NewRow.Ref = Refs;
EndIf;</AfterImport>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.StructuralUnits</Source>
				<Receiver>CatalogRef.Warehouses</Receiver>
				<Properties>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>100</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>150</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property Search="true">
						<Code>6</Code>
						<Description>StructuralUnitType --&gt; TypeOfWarehouse</Description>
						<Order>200</Order>
						<Source Name="StructuralUnitType" Kind="Attribute" Type="EnumRef.StructuralUnitsTypes"/>
						<Receiver Name="TypeOfWarehouse" Kind="Attribute" Type="EnumRef.WarehousesTypes"/>
						<ConversionRuleCode>KindsWarehouses                                       </ConversionRuleCode>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>FRP --&gt; FRP</Description>
						<Order>250</Order>
						<Source Name="FRP" Kind="Attribute" Type="CatalogRef.Individuals"/>
						<Receiver Name="" Kind=""/>
						<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
						<ParameterForTransferName>FRP</ParameterForTransferName>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>RetailPriceKind --&gt; TypeOfRetailPrices</Description>
						<Order>300</Order>
						<Source Name="RetailPriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
						<Receiver Name="TypeOfRetailPrices" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
						<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
					</Property>
					<Property>
						<Code>9</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>350</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.StructuralUnits"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.Warehouses"/>
						<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						<BeforeExport>Empty = True;</BeforeExport>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>ProductionWarehouses</Code>
				<Description>Catalog: Structural items</Description>
				<Order>650</Order>
				<AfterImport>If DataImportToInformationBaseMode() Then
	NewRow = Parameters.ImportedObjectsTable.Add();
	NewRow.ImportingObject = Object;
	NewRow.ObjectParameters  = ObjectParameters;
	NewRow.Ref = Refs;
EndIf;</AfterImport>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
				<Source>CatalogRef.StructuralUnits</Source>
				<Receiver>CatalogRef.Warehouses</Receiver>
				<Properties>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>100</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>150</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property Search="true">
						<Code>10</Code>
						<Description>--&gt; TypeOfWarehouse</Description>
						<Order>200</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="TypeOfWarehouse" Kind="Attribute" Type="EnumRef.WarehousesTypes"/>
						<BeforeExport>Value = "WholesaleWarehouse";</BeforeExport>
					</Property>
					<Property>
						<Code>11</Code>
						<Description>FRP --&gt; FRP</Description>
						<Order>250</Order>
						<Source Name="FRP" Kind="Attribute" Type="CatalogRef.Individuals"/>
						<Receiver Name="" Kind=""/>
						<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
						<ParameterForTransferName>FRP</ParameterForTransferName>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>300</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.StructuralUnits"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.Warehouses"/>
						<BeforeExport>Empty = True;</BeforeExport>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>SpecificationsProductsAndServices</Code>
				<Description>Catalog: Specifications</Description>
				<Order>700</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.Specifications</Source>
				<Receiver>CatalogRef.SpecificationsProductsAndServices</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Owner --&gt; Owner</Description>
						<Order>50</Order>
						<Source Name="Owner" Kind="Property" Type="CatalogRef.ProductsAndServices"/>
						<Receiver Name="Owner" Kind="Property" Type="CatalogRef.ProductsAndServices"/>
						<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Code --&gt; Code</Description>
						<Order>100</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>3</Code>
						<Description>Description --&gt; Description</Description>
						<Order>150</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>200</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property Search="true" Required="true">
						<Code>5</Code>
						<Description> --&gt; IsFolder</Description>
						<Order>250</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
						<BeforeExport>Value = False;</BeforeExport>
					</Property>
					<Property>
						<Code>6</Code>
						<Description> --&gt; Count</Description>
						<Order>300</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Count" Kind="Attribute" Type="Number"/>
						<BeforeExport>Value = 1;</BeforeExport>
					</Property>
					<Group>
						<Code>7</Code>
						<Description>Content --&gt; InitialComponents</Description>
						<Order>350</Order>
						<Source Name="Content" Kind="TabularSection"/>
						<Receiver Name="InitialComponents" Kind="TabularSection"/>
						<Property>
							<Code>8</Code>
							<Description>Count --&gt; Count</Description>
							<Order>50</Order>
							<Source Name="Count" Kind="Attribute" Type="Number"/>
							<Receiver Name="Count" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
							<Order>100</Order>
							<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
							<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
							<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
						</Property>
					</Group>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>PriceTypesProductsAndServices</Code>
				<Description>Catalog: Kinds price</Description>
				<Order>750</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.PriceKinds</Source>
				<Receiver>CatalogRef.PriceTypesProductsAndServices</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>PriceCurrency --&gt; PriceCurrency</Description>
						<Order>50</Order>
						<Source Name="PriceCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<Receiver Name="PriceCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
						<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Code --&gt; Code</Description>
						<Order>100</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Comment --&gt; Comment</Description>
						<Order>150</Order>
						<Source Name="Comment" Kind="Attribute" Type="String"/>
						<Receiver Name="Comment" Kind="Attribute" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>4</Code>
						<Description>Description --&gt; Description</Description>
						<Order>200</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>RoundUp --&gt; RoundUp</Description>
						<Order>250</Order>
						<Source Name="RoundUp" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="RoundUp" Kind="Attribute" Type="Boolean"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>300</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>RoundingOrder --&gt; RoundingOrder</Description>
						<Order>350</Order>
						<Source Name="RoundingOrder" Kind="Attribute" Type="EnumRef.RoundingMethods"/>
						<Receiver Name="RoundingOrder" Kind="Attribute" Type="EnumRef.RoundingMethods"/>
						<ConversionRuleCode>RoundingMethods                                 </ConversionRuleCode>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>PriceIncludesVAT --&gt; PriceIncludesVAT</Description>
						<Order>400</Order>
						<Source Name="PriceIncludesVAT" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="PriceIncludesVAT" Kind="Attribute" Type="Boolean"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>UnitCompanies</Code>
				<Description>Catalog: Divisions companies</Description>
				<Order>800</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.StructuralUnits</Source>
				<Receiver>CatalogRef.UnitCompanies</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Code --&gt; Code</Description>
						<Order>50</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="Code" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Company --&gt; Owner</Description>
						<Order>100</Order>
						<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
						<Receiver Name="Owner" Kind="Property" Type="CatalogRef.Companies"/>
						<ConversionRuleCode>Companies                                       </ConversionRuleCode>
					</Property>
					<Property Search="true">
						<Code>3</Code>
						<Description>Description --&gt; Description</Description>
						<Order>150</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>200</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>250</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.StructuralUnits"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.CompaniesDivisions"/>
						<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
					</Property>
					<Property>
						<Code>6</Code>
						<Description> --&gt; RegionRate</Description>
						<Order>300</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="RegionRate" Kind="Attribute" Type="Number"/>
						<OnExport>Value = 1;</OnExport>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>ContactInformationTypes</Code>
				<Description>Catalog: Kinds contact information</Description>
				<Order>850</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<SearchBySearchFieldsIfNotFoundByID>true</SearchBySearchFieldsIfNotFoundByID>
				<Source>CatalogRef.ContactInformationTypes</Source>
				<Receiver>CatalogRef.ContactInformationTypes</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Type --&gt; Type</Description>
						<Order>50</Order>
						<Source Name="Type" Kind="Attribute" Type="EnumRef.ContactInformationTypes"/>
						<Receiver Name="Type" Kind="Attribute" Type="EnumRef.ContactInformationTypes"/>
						<ConversionRuleCode>ContactInformationTypes                          </ConversionRuleCode>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>100</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>150</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>AddressRussianOnly --&gt; AddressRussianOnly</Description>
						<Order>200</Order>
						<Source Name="AddressRussianOnly" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="AddressRussianOnly" Kind="Attribute" Type="Boolean"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>EditMethodEditable --&gt; EditMethodEditable</Description>
						<Order>250</Order>
						<Source Name="EditMethodEditable" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="EditMethodEditable" Kind="Attribute" Type="Boolean"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>EditInDialogOnly --&gt; EditInDialogOnly</Description>
						<Order>300</Order>
						<Source Name="EditInDialogOnly" Kind="Attribute" Type="Boolean"/>
						<Receiver Name="EditInDialogOnly" Kind="Attribute" Type="Boolean"/>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>AdditionalOrderingAttribute --&gt; AdditionalOrderingAttribute</Description>
						<Order>350</Order>
						<Source Name="AdditionalOrderingAttribute" Kind="Attribute" Type="Number"/>
						<Receiver Name="AdditionalOrderingAttribute" Kind="Attribute" Type="Number"/>
					</Property>
					<Property Search="true">
						<Code>8</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>400</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.ContactInformationTypes"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.ContactInformationTypes"/>
						<ConversionRuleCode>ContactInformationTypes                          </ConversionRuleCode>
					</Property>
					<Property Search="true" Required="true">
						<Code>9</Code>
						<Description>IsFolder --&gt; IsFolder</Description>
						<Order>450</Order>
						<Source Name="IsFolder" Kind="Property" Type="Boolean"/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>ContactPersonEmail --&gt; EmailContactPersons</Description>
						<Order>50</Order>
						<Source>ContactPersonEmail</Source>
						<Receiver>EmailContactPersons</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>CounterpartyEmail --&gt; EmailCounterparties</Description>
						<Order>100</Order>
						<Source>CounterpartyEmail</Source>
						<Receiver>EmailCounterparties</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>CompanyEmail --&gt; CompanyEmail</Description>
						<Order>150</Order>
						<Source>CompanyEmail</Source>
						<Receiver>CompanyEmail</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>UserEmail --&gt; UserEmail</Description>
						<Order>200</Order>
						<Source>UserEmail</Source>
						<Receiver>UserEmail</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>IndividuaAddressForlInformation --&gt; AddressForInformir</Description>
						<Order>250</Order>
						<Source>IndividuaAddressForlInformation</Source>
						<Receiver>AddressForInformationIndividuals</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>IndividualPlaceOfResidence --&gt; AddressPlaceResidenceNat</Description>
						<Order>300</Order>
						<Source>IndividualPlaceOfResidence</Source>
						<Receiver>AddressPlaceResidenceIndividuals</Receiver>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>IndividualAddressOutsideRF --&gt; AddressOutsideRFInd</Description>
						<Order>350</Order>
						<Source>IndividualAddressOutsideRF</Source>
						<Receiver>AddressOutsideOfRUSSIANFEDERATIONIndividuals</Receiver>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>IndividualAddressByRegistration --&gt; AddressRegistrationByPhysically</Description>
						<Order>400</Order>
						<Source>IndividualAddressByRegistration</Source>
						<Receiver>AddressByRegistrationIndividuals</Receiver>
					</Value>
					<Value>
						<Code>9</Code>
						<Description>CounterpartyOtherInformation --&gt; AnotherInformationCo</Description>
						<Order>450</Order>
						<Source>CounterpartyOtherInformation</Source>
						<Receiver>OtherInformationCounterparties</Receiver>
					</Value>
					<Value>
						<Code>10</Code>
						<Description>CounterpartyOtherInformation --&gt; CounterpartyOtherInformation</Description>
						<Order>500</Order>
						<Source>CounterpartyOtherInformation</Source>
						<Receiver>CounterpartyOtherInformation</Receiver>
					</Value>
					<Value>
						<Code>11</Code>
						<Description>CounterpartyPostalAddress --&gt; CounterpartyAddress</Description>
						<Order>550</Order>
						<Source>CounterpartyPostalAddress</Source>
						<Receiver>CounterpartyPostalAddress</Receiver>
					</Value>
					<Value>
						<Code>12</Code>
						<Description>CounterpartyPostalAddress --&gt; CounterpartyPostalAddress</Description>
						<Order>600</Order>
						<Source>CounterpartyPostalAddress</Source>
						<Receiver>CounterpartyPostalAddress</Receiver>
					</Value>
					<Value>
						<Code>13</Code>
						<Description>CatalogContactPersons --&gt; CatalogContactP</Description>
						<Order>650</Order>
						<Source>CatalogContactPersons</Source>
						<Receiver>CatalogContactPersons</Receiver>
					</Value>
					<Value>
						<Code>14</Code>
						<Description>CatalogCounterparties --&gt; CatalogCounterparties</Description>
						<Order>700</Order>
						<Source>CatalogCounterparties</Source>
						<Receiver>CatalogCounterparties</Receiver>
					</Value>
					<Value>
						<Code>15</Code>
						<Description>CatalogCompanies --&gt; CatalogCompanies</Description>
						<Order>750</Order>
						<Source>CatalogCompanies</Source>
						<Receiver>CatalogCompanies</Receiver>
					</Value>
					<Value>
						<Code>16</Code>
						<Description>CatalogUsers --&gt; CatalogUsers</Description>
						<Order>800</Order>
						<Source>CatalogUsers</Source>
						<Receiver>CatalogUsers</Receiver>
					</Value>
					<Value>
						<Code>17</Code>
						<Description>CatalogIndividuals --&gt; CatalogPhysicalP</Description>
						<Order>850</Order>
						<Source>CatalogIndividuals</Source>
						<Receiver>CatalogIndividuals</Receiver>
					</Value>
					<Value>
						<Code>18</Code>
						<Description>ContactPersonPhone --&gt; PhoneWorkingContact</Description>
						<Order>900</Order>
						<Source>ContactPersonPhone</Source>
						<Receiver>WorkPhoneContactPersons</Receiver>
					</Value>
					<Value>
						<Code>19</Code>
						<Description>CounterpartyPhone --&gt; CounterpartyPhone</Description>
						<Order>950</Order>
						<Source>CounterpartyPhone</Source>
						<Receiver>CounterpartyPhone</Receiver>
					</Value>
					<Value>
						<Code>20</Code>
						<Description>CompanyPhone --&gt; CompanyPhone</Description>
						<Order>1000</Order>
						<Source>CompanyPhone</Source>
						<Receiver>CompanyPhone</Receiver>
					</Value>
					<Value>
						<Code>21</Code>
						<Description>IndividualPhone --&gt; PhoneWorkingIndividuals</Description>
						<Order>1050</Order>
						<Source>IndividualPhone</Source>
						<Receiver>PhoneWorkingIndividuals</Receiver>
					</Value>
					<Value>
						<Code>22</Code>
						<Description>CounterpartyFax --&gt; FaxCounterparties</Description>
						<Order>1100</Order>
						<Source>CounterpartyFax</Source>
						<Receiver>FaxCounterparties</Receiver>
					</Value>
					<Value>
						<Code>23</Code>
						<Description>CounterpartyFax --&gt; CounterpartyFax</Description>
						<Order>1150</Order>
						<Source>CounterpartyFax</Source>
						<Receiver>CounterpartyFax</Receiver>
					</Value>
					<Value>
						<Code>24</Code>
						<Description>CounterpartyFactAddress --&gt; CounterpartyFactAddress</Description>
						<Order>1200</Order>
						<Source>CounterpartyFactAddress</Source>
						<Receiver>CounterpartyFactAddress</Receiver>
					</Value>
					<Value>
						<Code>25</Code>
						<Description>CounterpartyFactAddress --&gt; CounterpartyFactAddress</Description>
						<Order>1250</Order>
						<Source>CounterpartyFactAddress</Source>
						<Receiver>CounterpartyFactAddress</Receiver>
					</Value>
					<Value>
						<Code>26</Code>
						<Description>CounterpartyLegalAddress --&gt; CounterpartyLegalAddress</Description>
						<Order>1300</Order>
						<Source>CounterpartyLegalAddress</Source>
						<Receiver>CounterpartyLegalAddress</Receiver>
					</Value>
					<Value>
						<Code>27</Code>
						<Description>CounterpartyLegalAddress --&gt; CounterpartyLegalAddress</Description>
						<Order>1350</Order>
						<Source>CounterpartyLegalAddress</Source>
						<Receiver>CounterpartyLegalAddress</Receiver>
					</Value>
					<Value>
						<Code>28</Code>
						<Description>--&gt;</Description>
						<Order>1400</Order>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>IndividualsDocumentsKinds</Code>
				<Description>Catalog: Kinds documents actual persons</Description>
				<Order>900</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.IndividualsDocumentsKinds</Source>
				<Receiver>CatalogRef.IndividualsDocumentsKinds</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>100</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values>
					<Value>
						<Code>1</Code>
						<Description>DriversLicense --&gt; DriverLicense</Description>
						<Order>50</Order>
						<Source>DriversLicense</Source>
						<Receiver>DriversLicense</Receiver>
					</Value>
					<Value>
						<Code>2</Code>
						<Description>MilitaryCard --&gt; MilitaryCard</Description>
						<Order>100</Order>
						<Source>MilitaryCard</Source>
						<Receiver>MilitaryCard</Receiver>
					</Value>
					<Value>
						<Code>3</Code>
						<Description>ReserveOfficerMilitaryCard --&gt; MilitaryOfficersCard</Description>
						<Order>150</Order>
						<Source>ReserveOfficerMilitaryCard</Source>
						<Receiver>ReserveOfficerMilitaryCard</Receiver>
					</Value>
					<Value>
						<Code>4</Code>
						<Description>DiplomaticPassport --&gt; DiplomaticPassport</Description>
						<Order>200</Order>
						<Source>DiplomaticPassport</Source>
						<Receiver>DiplomaticPassport</Receiver>
					</Value>
					<Value>
						<Code>5</Code>
						<Description>ForeignPassport --&gt; ForeignPassport</Description>
						<Order>250</Order>
						<Source>ForeignPassport</Source>
						<Receiver>ForeignPassport</Receiver>
					</Value>
					<Value>
						<Code>6</Code>
						<Description>OldForeignPassport --&gt; OldForeignPassport</Description>
						<Order>300</Order>
						<Source>OldForeignPassport</Source>
						<Receiver>OldForeignPassport</Receiver>
					</Value>
					<Value>
						<Code>7</Code>
						<Description>LocalSeamanBook --&gt; LocalSeamanBook</Description>
						<Order>350</Order>
						<Source>LocalSeamanBook</Source>
						<Receiver>LocalSeamanBook</Receiver>
					</Value>
					<Value>
						<Code>8</Code>
						<Description>SeamanBook --&gt; SeamanBook</Description>
						<Order>400</Order>
						<Source>SeamanBook</Source>
						<Receiver>SeamanBook</Receiver>
					</Value>
					<Value>
						<Code>9</Code>
						<Description>LocalPassport --&gt; LocalPassport</Description>
						<Order>450</Order>
						<Source>LocalPassport</Source>
						<Receiver>LocalPassport</Receiver>
					</Value>
					<Value>
						<Code>10</Code>
						<Description>OldPassport --&gt; OldPassport</Description>
						<Order>500</Order>
						<Source>OldPassport</Source>
						<Receiver>OldPassport</Receiver>
					</Value>
					<Value>
						<Code>11</Code>
						<Description>BirthCertificate --&gt; BirthCertificate</Description>
						<Order>550</Order>
						<Source>BirthCertificate</Source>
						<Receiver>BirthCertificate</Receiver>
					</Value>
					<Value>
						<Code>12</Code>
						<Description>OfficerIdentity --&gt; OfficerIdentity</Description>
						<Order>600</Order>
						<Source>OfficerIdentity</Source>
						<Receiver>OfficerIdentity</Receiver>
					</Value>
				</Values>
			</Rule>
			<Rule>
				<Code>ObjectsPropertiesValues</Code>
				<Description>Catalog: Additional values</Description>
				<Order>950</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.ObjectsPropertiesValues</Source>
				<Receiver>CatalogRef.ObjectsPropertiesValues</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Owner --&gt; Owner</Description>
						<Order>50</Order>
						<Source Name="Owner" Kind="Property" Type="ChartOfCharacteristicTypesRef.AdditionalAttributesAndInformation"/>
						<Receiver Name="Owner" Kind="Property" Type="ChartOfCharacteristicTypesRef.AdditionalAttributesAndInformation"/>
						<ConversionRuleCode>AdditionalAttributesAndInformation                  </ConversionRuleCode>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>100</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>150</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.ObjectsPropertiesValues"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.ObjectsPropertiesValues"/>
						<ConversionRuleCode>ObjectsPropertiesValues                           </ConversionRuleCode>
					</Property>
					<Property Search="true" Required="true">
						<Code>4</Code>
						<Description>IsFolder --&gt; IsFolder</Description>
						<Order>200</Order>
						<Source Name="IsFolder" Kind="Property" Type="Boolean"/>
						<Receiver Name="IsFolder" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>ObjectsPropertiesValuesHierarchy</Code>
				<Description>Catalog: Additional values (hierarchy)</Description>
				<Order>1000</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.ObjectsPropertiesValuesHierarchy</Source>
				<Receiver>CatalogRef.ObjectsPropertiesValuesHierarchy</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Owner --&gt; Owner</Description>
						<Order>50</Order>
						<Source Name="Owner" Kind="Property" Type="ChartOfCharacteristicTypesRef.AdditionalAttributesAndInformation"/>
						<Receiver Name="Owner" Kind="Property" Type="ChartOfCharacteristicTypesRef.AdditionalAttributesAndInformation"/>
						<ConversionRuleCode>AdditionalAttributesAndInformation                  </ConversionRuleCode>
					</Property>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>100</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Parent --&gt; Parent</Description>
						<Order>150</Order>
						<Source Name="Parent" Kind="Property" Type="CatalogRef.ObjectsPropertiesValuesHierarchy"/>
						<Receiver Name="Parent" Kind="Property" Type="CatalogRef.ObjectsPropertiesValuesHierarchy"/>
						<ConversionRuleCode>ObjectsPropertiesValuesHierarchy                   </ConversionRuleCode>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>Users</Code>
				<Description>Catalog: Users</Description>
				<Order>1050</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>CatalogRef.Users</Source>
				<Receiver>CatalogRef.Users</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>AlcoholicProductsKinds</Code>
				<Description>Catalog: Kinds alcohol products</Description>
				<Order>1100</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
				<Source>CatalogRef.AlcoholicProductsKinds</Source>
				<Receiver>CatalogRef.AlcoholicProductsKinds</Receiver>
				<Properties>
					<Property Search="true">
						<Code>2</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
					<Property Search="true">
						<Code>1</Code>
						<Description>Code --&gt; ProductKindCode</Description>
						<Order>100</Order>
						<Source Name="Code" Kind="Property" Type="String"/>
						<Receiver Name="ProductKindCode" Kind="Attribute" Type="String"/>
						<CastToLength>10</CastToLength>
						<OnExport>Value = TrimAll(Value);</OnExport>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>DeletionMark --&gt; DeletionMark</Description>
						<Order>150</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>AlcoholicProductsVendorLicenses</Code>
				<Description>: </Description>
				<Order>1150</Order>
				<DontRememberExported>true</DontRememberExported>
				<Source>CatalogRef.AlcoholicProductsVendorLicenses</Source>
				<Receiver>InformationRegisterRecord.AlcoholicProductsVendorLicenses</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>--&gt; Vendor</Description>
						<Order>50</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Vendor" Kind="Dimension" Type="CatalogRef.Counterparties"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>--&gt; LicenseKind</Description>
						<Order>100</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="LicenseKind" Kind="Dimension" Type="EnumRef.AlcoholSaleLicensesTypes"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>--&gt; Period</Description>
						<Order>150</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="Period" Kind="Property" Type="Date"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>--&gt; EndDate</Description>
						<Order>200</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="EndDate" Kind="Resource" Type="Date"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>--&gt; IssuedBy</Description>
						<Order>250</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="IssuedBy" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>--&gt; SeriesNumber</Description>
						<Order>300</Order>
						<Source Name="" Kind=""/>
						<Receiver Name="SeriesNumber" Kind="Resource" Type="String"/>
					</Property>
					<Property Disable="true">
						<Code>7</Code>
						<Description>LicenseKind --&gt;</Description>
						<Order>350</Order>
						<Source Name="LicenseKind" Kind="Attribute" Type="EnumRef.AlcoholicProductsLicenseKinds"/>
						<Receiver Name="" Kind=""/>
					</Property>
					<Property Disable="true">
						<Code>8</Code>
						<Description>StartDate --&gt;</Description>
						<Order>400</Order>
						<Source Name="StartDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="" Kind=""/>
					</Property>
					<Property Disable="true">
						<Code>9</Code>
						<Description>EndDate --&gt;</Description>
						<Order>450</Order>
						<Source Name="EndDate" Kind="Attribute" Type="Date"/>
						<Receiver Name="" Kind=""/>
					</Property>
					<Property Disable="true">
						<Code>10</Code>
						<Description>IssuedBy --&gt;</Description>
						<Order>500</Order>
						<Source Name="IssuedBy" Kind="Attribute" Type="String"/>
						<Receiver Name="" Kind=""/>
					</Property>
					<Property Disable="true">
						<Code>11</Code>
						<Description>Owner --&gt;</Description>
						<Order>550</Order>
						<Source Name="Owner" Kind="Property" Type="CatalogRef.Counterparties"/>
						<Receiver Name="" Kind=""/>
					</Property>
					<Property Disable="true">
						<Code>12</Code>
						<Description>Description --&gt;</Description>
						<Order>600</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="" Kind=""/>
					</Property>
					<Property Disable="true">
						<Code>13</Code>
						<Description>DeletionMark --&gt;</Description>
						<Order>650</Order>
						<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
						<Receiver Name="" Kind=""/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
		</Group>
		<Group>
			<Code>Registers information</Code>
			<Description>Registers information</Description>
			<Order>150</Order>
			<Rule>
				<Code>IndividualsDocuments</Code>
				<Description>Register information: Documents actual persons</Description>
				<Order>150</Order>
				<DontRememberExported>true</DontRememberExported>
				<Source>InformationRegisterRecord.IndividualsDocuments</Source>
				<Receiver>InformationRegisterRecord.IndividualsDocuments</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Active --&gt; Active</Description>
						<Order>50</Order>
						<Source Name="Active" Kind="Property" Type="Boolean"/>
						<Receiver Name="Active" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>DocumentKind --&gt; DocumentKind</Description>
						<Order>100</Order>
						<Source Name="DocumentKind" Kind="Dimension" Type="CatalogRef.IndividualsDocumentsKinds"/>
						<Receiver Name="DocumentKind" Kind="Dimension" Type="CatalogRef.IndividualsDocumentsKinds"/>
						<ConversionRuleCode>IndividualsDocumentsKinds                       </ConversionRuleCode>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>IssueDate --&gt; IssueDate</Description>
						<Order>150</Order>
						<Source Name="IssueDate" Kind="Resource" Type="Date"/>
						<Receiver Name="IssueDate" Kind="Resource" Type="Date"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>WhoIssued --&gt; WhoIssued</Description>
						<Order>200</Order>
						<Source Name="WhoIssued" Kind="Resource" Type="String"/>
						<Receiver Name="WhoIssued" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>DivisionCode --&gt; DivisionCode</Description>
						<Order>250</Order>
						<Source Name="DivisionCode" Kind="Resource" Type="String"/>
						<Receiver Name="DivisionCode" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>Number --&gt; Number</Description>
						<Order>300</Order>
						<Source Name="Number" Kind="Resource" Type="String"/>
						<Receiver Name="Number" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>7</Code>
						<Description>Period --&gt; Period</Description>
						<Order>350</Order>
						<Source Name="Period" Kind="Property" Type="Date"/>
						<Receiver Name="Period" Kind="Property" Type="Date"/>
					</Property>
					<Property>
						<Code>8</Code>
						<Description>Presentation --&gt; Presentation</Description>
						<Order>400</Order>
						<Source Name="Presentation" Kind="Resource" Type="String"/>
						<Receiver Name="Presentation" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>9</Code>
						<Description>Series --&gt; Series</Description>
						<Order>450</Order>
						<Source Name="Series" Kind="Resource" Type="String"/>
						<Receiver Name="Series" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>10</Code>
						<Description>ValidityPeriod --&gt; ValidityPeriod</Description>
						<Order>500</Order>
						<Source Name="ValidityPeriod" Kind="Resource" Type="Date"/>
						<Receiver Name="ValidityPeriod" Kind="Resource" Type="Date"/>
					</Property>
					<Property>
						<Code>12</Code>
						<Description>Ind --&gt; Ind</Description>
						<Order>600</Order>
						<Source Name="Ind" Kind="Dimension" Type="CatalogRef.Individuals"/>
						<Receiver Name="Ind" Kind="Dimension" Type="CatalogRef.Individuals"/>
						<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
					</Property>
					<Property>
						<Code>13</Code>
						<Description>IsIdentityDocument --&gt; IsIdentityDocument</Description>
						<Order>650</Order>
						<Source Name="IsIdentityDocument" Kind="Resource" Type="Boolean"/>
						<Receiver Name="IsIdentityDocument" Kind="Resource" Type="Boolean"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
			<Rule>
				<Code>SNPIndividuals</Code>
				<Description>Register information: Surname, name, patronymic actual persons</Description>
				<Order>200</Order>
				<DontRememberExported>true</DontRememberExported>
				<Source>InformationRegisterRecord.IndividualsDescriptionFull</Source>
				<Receiver>InformationRegisterRecord.SNPIndividuals</Receiver>
				<Properties>
					<Property>
						<Code>1</Code>
						<Description>Active --&gt; Active</Description>
						<Order>50</Order>
						<Source Name="Active" Kind="Property" Type="Boolean"/>
						<Receiver Name="Active" Kind="Property" Type="Boolean"/>
					</Property>
					<Property>
						<Code>2</Code>
						<Description>Name --&gt; Name</Description>
						<Order>100</Order>
						<Source Name="Name" Kind="Resource" Type="String"/>
						<Receiver Name="Name" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>3</Code>
						<Description>Patronymic --&gt; Patronymic</Description>
						<Order>150</Order>
						<Source Name="Patronymic" Kind="Resource" Type="String"/>
						<Receiver Name="Patronymic" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>4</Code>
						<Description>Period --&gt; Period</Description>
						<Order>200</Order>
						<Source Name="Period" Kind="Property" Type="Date"/>
						<Receiver Name="Period" Kind="Property" Type="Date"/>
					</Property>
					<Property>
						<Code>5</Code>
						<Description>Surname --&gt; Surname</Description>
						<Order>250</Order>
						<Source Name="Surname" Kind="Resource" Type="String"/>
						<Receiver Name="Surname" Kind="Resource" Type="String"/>
					</Property>
					<Property>
						<Code>6</Code>
						<Description>Ind --&gt; Individual</Description>
						<Order>300</Order>
						<Source Name="Ind" Kind="Dimension" Type="CatalogRef.Individuals"/>
						<Receiver Name="Individual" Kind="Dimension"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
		</Group>
		<Group>
			<Code>Documents</Code>
			<Description>Documents</Description>
			<Order>200</Order>
			<Group>
				<Code>MarketingAndSales</Code>
				<Description>Documents. Marketing and Sales</Description>
				<Order>50</Order>
				<Rule>
					<Code>GoodsServicesSale</Code>
					<Description>Document: flow rate Consignment</Description>
					<Order>50</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	ElsIf Not Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.DoNotRead Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.CustomerInvoice</Source>
					<Receiver>DocumentRef.GoodsServicesSale</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>100</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsCustomerInvoice"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsGoodsImplementation"/>
							<ConversionRuleCode>OperationKindsImplementationProducts                     </ConversionRuleCode>
							<BeforeExport>
If Source.OperationKind = Enums.OperationKindsCustomerInvoice.SaleToCustomer Then
	
	Query = New Query;
	Query.Text =
	"SELECT TOP 1
	|	1 AS IsProducts,
	|	0 AS IsServices
	|INTO TU_Tables
	|FROM
	|	Document.CustomerInvoice.Inventory AS CustomerInvoiceInventory
	|WHERE
	|	CustomerInvoiceInventory.Ref = &amp;Refs
	|	AND CustomerInvoiceInventory.ProductsAndServicesTypeInventory
	|
	|UNION ALL
	|
	|SELECT TOP 1
	|	0,
	|	1
	|FROM
	|	Document.CustomerInvoice.Inventory AS CustomerInvoiceInventory
	|WHERE
	|	CustomerInvoiceInventory.Ref = &amp;Refs
	|	AND Not CustomerInvoiceInventory.ProductsAndServicesTypeInventory
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	SUM(TU_Tables.IsProducts) AS IsProducts,
	|	SUM(TU_Tables.IsServices) AS IsServices
	|FROM
	|	TU_Tables AS TU_Tables";
	
	Query.SetParameter("Ref", Source.Ref);
	Selection = Query.Execute().Select();
	
	IsProducts 	= False;
	IsServices	= False;
	If Selection.Next() Then
		IsProducts = ValueIsFilled(Selection.IsProducts) AND Selection.IsProducts &gt; 0;
		IsServices = ValueIsFilled(Selection.IsServices) AND Selection.IsServices &gt; 0;
	EndIf;
	
	If IsProducts AND Not IsServices Then
		
		Value = "Products";
		
	ElsIf Not IsProducts AND IsServices Then
		
		Value = "Services";
		
	Else
		
		Value = "RetailComission";
		
	EndIf;
	
	OCRName = "";
	
EndIf;</BeforeExport>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Date --&gt; Date</Description>
							<Order>150</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>450</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>500</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>550</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>600</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>650</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>700</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>37</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>800</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>40</Code>
							<Description>--&gt; SaleToCustomer</Description>
							<Order>850</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="" Kind=""/>
							<ParameterForTransferName>SaleToCustomer</ParameterForTransferName>
							<BeforeExport>Value = Source.OperationKind = Enums.OperationKindsCustomerInvoice.SaleToCustomer;</BeforeExport>
						</Property>
						<Property>
							<Code>43</Code>
							<Description>Consignor --&gt; Consignor</Description>
							<Order>900</Order>
							<Source Name="Consignor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Consignor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>44</Code>
							<Description>Consignee --&gt; Consignee</Description>
							<Order>950</Order>
							<Source Name="Consignee" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Consignee" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>65</Code>
							<Description>BasisDocument --&gt; InvoiceForPayment</Description>
							<Order>1000</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="InvoiceForPayment" Kind="Attribute" Type="DocumentRef.QuotationToCustomer"/>
							<ConversionRuleCode>InvoiceForPayment                            </ConversionRuleCode>
							<BeforeExport>If TypeOf(Source.BasisDocument) = Type("DocumentRef.SupplierInvoice") Then
	Empty = True;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>45</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1050</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>50</Code>
							<Description>--&gt; MethodCreditAdvances</Description>
							<Order>1100</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsCustomerInvoice.TransferForCommission Then
	Expression = "Enums.WaysOfOffsettingAdvances.DoNotRead";
ElsIf Source.Prepayment.Count() &gt; 0 Then
	Expression = "Enums.WaysOfOffsettingAdvances.ByDocument";
Else
	SettlementsByDocumentsInProgress = CommonUse.GetAttributeValue(Source.Counterparty, "DoOperationsByDocuments");
	If SettlementsByDocumentsInProgress = True Then
		Expression = "Enums.WaysOfOffsettingAdvances.DoNotRead";
	Else
		Expression = "Enums.WaysOfOffsettingAdvances.automatically";
	EndIf;
EndIf;</BeforeExport>
						</Property>
						<Group>
							<Code>18</Code>
							<Description>--&gt; Products</Description>
							<Order>1150</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>Execute(Algorithms.GenerateTableOfProducts);
ObjectsCollection.Columns.Add("CCDNo");
ObjectsCollection.Columns.Add("CountryOfOrigin");
Execute(Algorithms.FillCCDNumbersCountriesOrigin);</BeforeProcessExport>
							<Property>
								<Code>19</Code>
								<Description> --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description> --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>23</Code>
								<Description> --&gt; Amount</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description> --&gt; VATAmount</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description> --&gt; Price</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>28</Code>
								<Description> --&gt; Factor</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>29</Code>
								<Description> --&gt; VATRate</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>38</Code>
								<Description> --&gt; Count</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>63</Code>
								<Description> --&gt; CCDNo</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CCDNo" Kind="Attribute" Type="CatalogRef.CCDNumbers"/>
								<ConversionRuleCode>CCDNumbers                                         </ConversionRuleCode>
							</Property>
							<Property>
								<Code>64</Code>
								<Description> --&gt; CountryOfOrigin</Description>
								<Order>550</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CountryOfOrigin" Kind="Attribute" Type="CatalogRef.WorldCountries"/>
								<ConversionRuleCode>WorldCountries                                        </ConversionRuleCode>
							</Property>
							<Property>
								<Code>41</Code>
								<Description>--&gt; ProductOnCommission</Description>
								<Order>600</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsCustomerInvoice.SaleToCustomer
   AND ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>27</Code>
							<Description>--&gt; Services</Description>
							<Order>1200</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Services" Kind="TabularSection"/>
							<BeforeProcessExport>Execute(Algorithms.GenerateTableOfServices);</BeforeProcessExport>
							<Property>
								<Code>30</Code>
								<Description> --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>31</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>32</Code>
								<Description> --&gt; Amount</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>33</Code>
								<Description> --&gt; Price</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>34</Code>
								<Description> --&gt; VATRate</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>35</Code>
								<Description> --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>42</Code>
								<Description> --&gt; Content</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Content" Kind="Attribute" Type="String"/>
								<BeforeExport>If Not ValueIsFilled(CollectionObject.Content) Then
	Value = String(CollectionObject.ProductsAndServices);	
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>47</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>1250</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeExport>
							<Property>
								<Code>48</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>49</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Property>
							<Code>66</Code>
							<Description>ShippingAddress --&gt; ShippingAddress</Description>
							<Order>1300</Order>
							<Source Name="ShippingAddress" Kind="Attribute" Type="String"/>
							<Receiver Name="ShippingAddress" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>67</Code>
							<Description>ChiefAccountant --&gt; ChiefAccountant</Description>
							<Order>1350</Order>
							<Source Name="ChiefAccountant" Kind="Attribute" Type="CatalogRef.Employees"/>
							<Receiver Name="ChiefAccountant" Kind="Attribute" Type="CatalogRef.Individuals"/>
							<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
							<BeforeExport>If ValueIsFilled(Source.ChiefAccountant) Then
	Value = Source.ChiefAccountant.Ind;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>69</Code>
							<Description>PowerOfAttorneyDate --&gt; PowerOfAttorneyDate</Description>
							<Order>1400</Order>
							<Source Name="PowerOfAttorneyDate" Kind="Attribute" Type="Date"/>
							<Receiver Name="PowerOfAttorneyDate" Kind="Attribute" Type="Date"/>
						</Property>
						<Property>
							<Code>70</Code>
							<Description>PowerOfAttorneyNumber --&gt; PowerOfAttorneyNumber</Description>
							<Order>1450</Order>
							<Source Name="PowerOfAttorneyNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="PowerOfAttorneyNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>68</Code>
							<Description>PowerOfAttorneyIssued --&gt; PowerOfAttorneyIssued</Description>
							<Order>1500</Order>
							<Source Name="PowerOfAttorneyIssued" Kind="Attribute" Type="String"/>
							<Receiver Name="PowerOfAttorneyIssued" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>75</Code>
							<Description>PowerAttorneyPerson --&gt; PowerOfAttorneyThroughWhom</Description>
							<Order>1550</Order>
							<Source Name="PowerAttorneyPerson" Kind="Attribute" Type="CatalogRef.Individuals"/>
							<Receiver Name="PowerOfAttorneyThroughWhom" Kind="Attribute" Type="String"/>
							<BeforeExport>Value = String(Source.PowerAttorneyPerson);</BeforeExport>
						</Property>
						<Property>
							<Code>71</Code>
							<Description>Head --&gt; Head</Description>
							<Order>1600</Order>
							<Source Name="Head" Kind="Attribute" Type="CatalogRef.Employees"/>
							<Receiver Name="Head" Kind="Attribute" Type="CatalogRef.Individuals"/>
							<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
							<BeforeExport>If ValueIsFilled(Source.Head) Then
	Value = Source.Head.Ind;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>72</Code>
							<Description>Released --&gt; ReleaseMade</Description>
							<Order>1650</Order>
							<Source Name="Released" Kind="Attribute" Type="CatalogRef.Employees"/>
							<Receiver Name="ReleaseMade" Kind="Attribute" Type="CatalogRef.Individuals"/>
							<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
							<BeforeExport>If ValueIsFilled(Source.Released) Then
	Value = Source.Released.Ind;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>73</Code>
							<Description>Division --&gt; CounterpartyDivision</Description>
							<Order>1700</Order>
							<Source Name="Division" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="CounterpartyDivision" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>74</Code>
							<Description>BankAccount --&gt; BankAccountOfTheCompany</Description>
							<Order>1750</Order>
							<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="BankAccountOfTheCompany" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ActOnProvisionOfIndustrialServices</Code>
					<Description>Document: Act completed works</Description>
					<Order>100</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then

	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	ElsIf Not Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.DoNotRead Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);

	Execute(Algorithms.HandleCounterpartyContract);

EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.AcceptanceCertificate</Source>
					<Receiver>DocumentRef.ActOnProvisionOfIndustrialServices</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>350</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>400</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>450</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>500</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>550</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>600</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>Division --&gt; DivisionCost</Description>
							<Order>650</Order>
							<Source Name="Division" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="DivisionCost" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>28</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>750</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>29</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>800</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>30</Code>
							<Description> --&gt; ProductsAndServicesCategory</Description>
							<Order>850</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
							<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
							<BeforeExport>If Source.WorksAndServices.Count() &gt; 0
   AND ValueIsFilled(Source.WorksAndServices[0].ProductsAndServices) Then
	Value = Source.WorksAndServices[0].ProductsAndServices.ProductsAndServicesCategory;
Else
	Value = "";
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>35</Code>
							<Description>--&gt; MethodCreditAdvances</Description>
							<Order>900</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>If Source.Prepayment.Count() &gt; 0 Then
	Expression = "Enums.WaysOfOffsettingAdvances.ByDocument";
Else
	SettlementsByDocumentsInProgress = CommonUse.GetAttributeValue(Source.Counterparty, "DoOperationsByDocuments");
	If SettlementsByDocumentsInProgress = True Then
		Expression = "Enums.WaysOfOffsettingAdvances.DoNotRead";
	Else
		Expression = "Enums.WaysOfOffsettingAdvances.automatically";
	EndIf;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>36</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>950</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>16</Code>
							<Description>WorksAndServices --&gt; Services</Description>
							<Order>1000</Order>
							<Source Name="WorksAndServices" Kind="TabularSection"/>
							<Receiver Name="Services" Kind="TabularSection"/>
							<Property>
								<Code>18</Code>
								<Description>Count --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Price --&gt; Price</Description>
								<Order>350</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>31</Code>
								<Description> --&gt; ProductsAndServicesCategory</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
								<BeforeExport>Value = CollectionObject.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>32</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>1050</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeExport>
							<Property>
								<Code>33</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>34</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>CustomerInvoiceNote</Code>
					<Description>Document: Account-texture</Description>
					<Order>150</Order>
					<BeforeExport>If TypeOf(Source) = Type("DocumentRef.CustomerInvoiceNote")
	AND Not ValueIsFilled(Source.BasisDocument)
	AND Source.BasisDocuments.Count() = 0 Then
	
	Cancel = True;
EndIf;</BeforeExport>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;
			
	PaymentAndSettlementDocuments = Object.PaymentAndSettlementDocuments;
	If PaymentAndSettlementDocuments.Count() &gt; 0 Then
		Object.PaymentAccountingDocumentDate  = PaymentAndSettlementDocuments[0].DocumentDate;
		Object.PaymentAccountingDocumentNumber = PaymentAndSettlementDocuments[0].DocumentNumber;
	EndIf;
	
	ParametersStructure	= New Structure;
	ParametersStructure.Insert("Date",						Object.Date);
	ParametersStructure.Insert("InvoiceKind",				Object.InvoiceKind);
	ParametersStructure.Insert("Correction",					Object.Correction);
	ParametersStructure.Insert("Counterparty",					Object.Counterparty);
	ParametersStructure.Insert("CounterpartyContract",			Object.CounterpartyContract);
	ParametersStructure.Insert("Seller",					Object.Seller);
	ParametersStructure.Insert("InvoiceNotIssued",	Object.InvoiceNotIssued);
	ParametersStructure.Insert("InvoiceWithoutVAT",			Object.InvoiceWithoutVAT);
	ParametersStructure.Insert("OperationKindCode",				Object.OperationKindCode);
	ParametersStructure.Insert("BasisDocuments",			Object.BasisDocuments.Unload(,"BasisDocument"));

	Object.OperationKindCode = Documents.CustomerInvoiceNote.GetOperationKindCode(ParametersStructure);
	Object.IssuingMethodCode = 1;
	
	Object.Displayed = True;
	Object.DateOfExtension = Object.Date;
	
	Execute(Algorithms.HandleCounterpartyContract);

EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.CustomerInvoiceNote</Source>
					<Receiver>DocumentRef.CustomerInvoiceNote</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>BasisDocument --&gt; BasisDocument</Description>
							<Order>150</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="BasisDocument" Kind="Attribute"/>
							<BeforeExport>If TypeOf(Source.BasisDocument) = Type("DocumentRef.CustomerInvoice") Then
	If Source.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.SaleToCustomer
	 OR Source.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.TransferForCommission Then
		OCRName = "GoodsServicesSale";
	ElsIf Source.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.TransferToProcessing Then
		OCRName = "TransferOfProducts";
	ElsIf Source.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToPrincipal
		  OR Source.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnFromProcessing
		  OR Source.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToVendor Then
		OCRName = "ReturnProductsToSupplier";
	EndIf;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
							<BeforeExport>Value = Left(Source.Number, 5) + "0" + Mid(Source.Number, 6);</BeforeExport>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>OperationKind --&gt; InvoiceKind</Description>
							<Order>450</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsCustomerInvoiceNote"/>
							<Receiver Name="InvoiceKind" Kind="Attribute" Type="EnumRef.CustomerInvoiceNoteKindDisplayed"/>
							<ConversionRuleCode>VATAccountTypeInvoice                                </ConversionRuleCode>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>500</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>550</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>18</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>600</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>30</Code>
							<Description>ConsolidatedCommission --&gt; ConsolidatedCommission</Description>
							<Order>650</Order>
							<Source Name="ConsolidatedCommission" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="ConsolidatedCommission" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Group>
							<Code>14</Code>
							<Description>--&gt; BasisDocuments</Description>
							<Order>700</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="BasisDocuments" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = New ValueTable;
ObjectsCollection.Columns.Add("BasisDocument");
ObjectsCollection.Columns.Add("DocumentType");
NewRow = ObjectsCollection.Add();
NewRow.BasisDocument = Source.BasisDocument;

If TypeOf(Source.BasisDocument) = Type("DocumentRef.CustomerOrder")
   AND Source.BasisDocument.Inventory.Count() &gt; 0 Then
	NewRow = ObjectsCollection.Add();
	NewRow.BasisDocument = Source.BasisDocument;
	NewRow.DocumentType = "SalesOfGoodsAndServices";
EndIf;</BeforeProcessExport>
							<Property>
								<Code>15</Code>
								<Description> --&gt; BasisDocument</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="BasisDocument" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineNameOfPwcFoundationDocument);</BeforeExport>
							</Property>
						</Group>
						<Property>
							<Code>19</Code>
							<Description>--&gt; VATAmountDocument</Description>
							<Order>750</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATAmountDocument" Kind="Attribute" Type="Number"/>
							<BeforeExport>Value = Source.Inventory.Total("VATAmount");</BeforeExport>
						</Property>
						<Group>
							<Code>21</Code>
							<Description>PaymentDocumentsDateNumber --&gt; PaymentAndSettlementDocuments</Description>
							<Order>800</Order>
							<Source Name="PaymentDocumentsDateNumber" Kind="TabularSection"/>
							<Receiver Name="PaymentAndSettlementDocuments" Kind="TabularSection"/>
							<Property>
								<Code>22</Code>
								<Description>PaymentAccountingDocumentDate --&gt; DocumentDate</Description>
								<Order>50</Order>
								<Source Name="PaymentAccountingDocumentDate" Kind="Attribute" Type="Date"/>
								<Receiver Name="DocumentDate" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>PaymentAccountingDocumentNumber --&gt; DocumentNumber</Description>
								<Order>100</Order>
								<Source Name="PaymentAccountingDocumentNumber" Kind="Attribute" Type="String"/>
								<Receiver Name="DocumentNumber" Kind="Attribute" Type="String"/>
							</Property>
						</Group>
						<Group>
							<Code>24</Code>
							<Description>Inventory --&gt; Advances</Description>
							<Order>850</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Advances" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.OperationKind &lt;&gt; Enums.OperationKindsCustomerInvoiceNote.Advance Then
	Cancel = True;
EndIf;</BeforeProcessExport>
							<Property>
								<Code>25</Code>
								<Description> --&gt; VATRate</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>26</Code>
								<Description>TotalAmount --&gt; Amount</Description>
								<Order>100</Order>
								<Source Name="TotalAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>150</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property Disable="true">
								<Code>28</Code>
								<Description>CCDNo --&gt;</Description>
								<Order>200</Order>
								<Source Name="CCDNo" Kind="Attribute" Type="CatalogRef.CCDNumbers"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>29</Code>
								<Description>CountryOfOrigin --&gt;</Description>
								<Order>250</Order>
								<Source Name="CountryOfOrigin" Kind="Attribute" Type="CatalogRef.WorldCountries"/>
								<Receiver Name="" Kind=""/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>AgentSalesReport</Code>
					<Description>Document: Report comissionare</Description>
					<Order>200</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	ElsIf Not Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.DoNotRead Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.AgentReport</Source>
					<Receiver>DocumentRef.AgentSalesReport</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>350</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>CommissionFeePercent --&gt; CommissionFeePercent</Description>
							<Order>400</Order>
							<Source Name="CommissionFeePercent" Kind="Attribute" Type="Number"/>
							<Receiver Name="CommissionFeePercent" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>BrokerageCalculationMethod --&gt; BrokerageCalculationMethod</Description>
							<Order>450</Order>
							<Source Name="BrokerageCalculationMethod" Kind="Attribute" Type="EnumRef.CommissionFeeCalculationMethods"/>
							<Receiver Name="BrokerageCalculationMethod" Kind="Attribute" Type="EnumRef.CommissionFeeCalculationMethods"/>
							<ConversionRuleCode>CommissionFeeCalculationMethods         </ConversionRuleCode>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>VATCommissionFeePercent --&gt; VATCommissionFeePercent</Description>
							<Order>500</Order>
							<Source Name="VATCommissionFeePercent" Kind="Attribute" Type="CatalogRef.VATRates"/>
							<Receiver Name="VATCommissionFeePercent" Kind="Attribute" Type="EnumRef.VATRates"/>
							<BeforeExport>Execute(Algorithms.FillInVatRateOfRemuneration);</BeforeExport>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>550</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>600</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>650</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>700</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>750</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>18</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>800</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>19</Code>
							<Description>KeepBackComissionFee --&gt; KeepRemuneration</Description>
							<Order>850</Order>
							<Source Name="KeepBackComissionFee" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="KeepRemuneration" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>34</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>900</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>36</Code>
							<Description>--&gt; MethodCreditAdvances</Description>
							<Order>950</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>
If Source.Prepayment.Count() &gt; 0 Then
	Expression = "Enums.WaysOfOffsettingAdvances.ByDocument";
Else
	SettlementsByDocumentsInProgress = CommonUse.GetAttributeValue(Source.Counterparty, "DoOperationsByDocuments");
	If SettlementsByDocumentsInProgress = True Then
		Expression = "Enums.WaysOfOffsettingAdvances.DoNotRead";
	Else
		Expression = "Enums.WaysOfOffsettingAdvances.automatically";
	EndIf;
EndIf;
</BeforeExport>
						</Property>
						<Property>
							<Code>52</Code>
							<Description>MakeOutInvoicesCollective --&gt; MakeOutInvoicesCollective</Description>
							<Order>1000</Order>
							<Source Name="MakeOutInvoicesCollective" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="MakeOutInvoicesCollective" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>40</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1050</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>20</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>1100</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>Execute(Algorithms.GenerateTableOfProducts);
ObjectsCollection.Columns.Add("CCDNo");
ObjectsCollection.Columns.Add("CountryOfOrigin");
Execute(Algorithms.FillCCDNumbersCountriesOrigin);</BeforeProcessExport>
							<Property>
								<Code>21</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>26</Code>
								<Description>BrokerageAmount --&gt; BrokerageAmount</Description>
								<Order>300</Order>
								<Source Name="BrokerageAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="BrokerageAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>350</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>BrokerageVATAmount --&gt; BrokerageVATAmount</Description>
								<Order>400</Order>
								<Source Name="BrokerageVATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="BrokerageVATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>29</Code>
								<Description>TransmissionAmount --&gt; TransmissionAmount</Description>
								<Order>450</Order>
								<Source Name="TransmissionAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="TransmissionAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>30</Code>
								<Description>Price --&gt; Price</Description>
								<Order>500</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>31</Code>
								<Description>TransmissionPrice --&gt; TransmissionPrice</Description>
								<Order>550</Order>
								<Source Name="TransmissionPrice" Kind="Attribute" Type="Number"/>
								<Receiver Name="TransmissionPrice" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>33</Code>
								<Description> --&gt; Factor</Description>
								<Order>600</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>35</Code>
								<Description> --&gt; Count</Description>
								<Order>650</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>50</Code>
								<Description> --&gt; CCDNo</Description>
								<Order>700</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CCDNo" Kind="Attribute" Type="CatalogRef.CCDNumbers"/>
								<ConversionRuleCode>CCDNumbers                                         </ConversionRuleCode>
							</Property>
							<Property>
								<Code>51</Code>
								<Description> --&gt; CountryOfOrigin</Description>
								<Order>750</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CountryOfOrigin" Kind="Attribute" Type="CatalogRef.WorldCountries"/>
								<ConversionRuleCode>WorldCountries                                        </ConversionRuleCode>
							</Property>
							<Property>
								<Code>49</Code>
								<Description>ConnectionKey --&gt; RowKey</Description>
								<Order>800</Order>
								<Source Name="ConnectionKey" Kind="Attribute" Type="Number"/>
								<Receiver Name="RowKey" Kind="Attribute" Type="Number"/>
								<BeforeExport>//::: Example :::
//
// SB 1.4 binding of the first Inventory row to the first Customers row
// is the following: ConnectionKey = 0 CA 2.0 binding of the first Goods row to the first Customers row is the following: RowKey = 1
//
If TypeOf(Value) = Type("Number") Then
	
	Value = Value + 1;
	
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>37</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>1150</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeExport>
							<Property>
								<Code>38</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>39</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Group>
							<Code>42</Code>
							<Description>Customers --&gt; Customers</Description>
							<Order>1200</Order>
							<Source Name="Customers" Kind="TabularSection"/>
							<Receiver Name="Customers" Kind="TabularSection"/>
							<Property>
								<Code>43</Code>
								<Description>CustomerInvoiceNoteIssued --&gt; CustomerInvoiceNoteIssued</Description>
								<Order>50</Order>
								<Source Name="CustomerInvoiceNoteIssued" Kind="Attribute" Type="Boolean"/>
								<Receiver Name="CustomerInvoiceNoteIssued" Kind="Attribute" Type="Boolean"/>
							</Property>
							<Property>
								<Code>44</Code>
								<Description>InvoiceDate --&gt; InvoiceDate</Description>
								<Order>100</Order>
								<Source Name="InvoiceDate" Kind="Attribute" Type="Date"/>
								<Receiver Name="InvoiceDate" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>46</Code>
								<Description>Customer --&gt; Customer</Description>
								<Order>150</Order>
								<Source Name="Customer" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Customer" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>47</Code>
								<Description>CustomerInvoiceNote --&gt; CustomerInvoiceNote</Description>
								<Order>200</Order>
								<Source Name="CustomerInvoiceNote" Kind="Attribute" Type="DocumentRef.CustomerInvoiceNote"/>
								<Receiver Name="CustomerInvoiceNote" Kind="Attribute" Type="DocumentRef.CustomerInvoiceNote"/>
								<ConversionRuleCode>CustomerInvoiceNote                               </ConversionRuleCode>
							</Property>
							<Property>
								<Code>45</Code>
								<Description>ConnectionKey --&gt; RowKey</Description>
								<Order>250</Order>
								<Source Name="ConnectionKey" Kind="Attribute" Type="Number"/>
								<Receiver Name="RowKey" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Property>
							<Code>41</Code>
							<Description>Responsible --&gt; Responsible</Description>
							<Order>1250</Order>
							<Source Name="Responsible" Kind="Attribute" Type="CatalogRef.Employees"/>
							<Receiver Name="Responsible" Kind="Attribute" Type="CatalogRef.Users"/>
						</Property>
						<Property>
							<Code>48</Code>
							<Description> --&gt; BrokerageAmount</Description>
							<Order>1300</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="BrokerageAmount" Kind="Attribute" Type="Number"/>
							<BeforeExport>Value = Source.Inventory.Total("BrokerageAmount");</BeforeExport>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>InvoiceForPayment</Code>
					<Description>Document: Account on payment</Description>
					<Order>250</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InvoiceForPayment</Source>
					<Receiver>DocumentRef.InvoiceForPayment</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>44</Code>
							<Description>Company --&gt; CompanyRecipient</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="CompanyRecipient" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>400</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>450</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>500</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>550</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>600</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>650</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>35</Code>
							<Description>BankAccount --&gt; StructuralUnit</Description>
							<Order>750</Order>
							<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
							<OnExport>If Not ValueIsFilled(Source.BankAccount) Then 
	
	If ValueIsFilled(Source.Company) 
		AND ValueIsFilled(Source.Company.BankAccountByDefault)
		AND Source.DocumentCurrency = Source.Company.BankAccountByDefault.CashCurrency Then
		
		Value = Source.Company.BankAccountByDefault;
		
	Else
		
		Value = Catalogs.BankAccounts.EmptyRef();
		
	EndIf;
	
EndIf;</OnExport>
						</Property>
						<Property>
							<Code>45</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>800</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>15</Code>
							<Description> --&gt; Products</Description>
							<Order>850</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>Execute(Algorithms.GenerateTableOfProducts);</BeforeProcessExport>
							<Property>
								<Code>17</Code>
								<Description> --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>18</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>19</Code>
								<Description> --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description> --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description> --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>22</Code>
								<Description> --&gt; Price</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>25</Code>
							<Description> --&gt; Services</Description>
							<Order>900</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Services" Kind="TabularSection"/>
							<BeforeProcessExport>Execute(Algorithms.GenerateTableOfServices);</BeforeProcessExport>
							<Property>
								<Code>27</Code>
								<Description> --&gt; VATRate</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>28</Code>
								<Description> --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>29</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>30</Code>
								<Description> --&gt; Price</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>31</Code>
								<Description> --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>32</Code>
								<Description> --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>33</Code>
								<Description> --&gt; Content</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Content" Kind="Attribute" Type="String"/>
								<BeforeExport>If Not ValueIsFilled(CollectionObject.Content) Then
	Value = String(CollectionObject.ProductsAndServices);	
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Property>
							<Code>46</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>1000</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>47</Code>
							<Description>Division --&gt; CounterpartyDivision</Description>
							<Order>1050</Order>
							<Source Name="Division" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="CounterpartyDivision" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReturnOfProductsFromCustomer</Code>
					<Description>Document: Receipt Consignment</Description>
					<Order>300</Order>
					<AfterImport>	
If DataImportToInformationBaseMode() Then
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.SupplierInvoice</Source>
					<Receiver>DocumentRef.ReturnOfProductsFromCustomer</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>100</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsSupplierInvoice"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsReturnGoodsFromCustomer"/>
							<ConversionRuleCode>OperationKindsReturnProductsFromCustomer            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Date --&gt; Date</Description>
							<Order>150</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>450</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>500</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>550</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>600</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>650</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>26</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>750</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>29</Code>
							<Description> --&gt; ByExposingInvoiceReturn</Description>
							<Order>800</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="ByExposingInvoiceReturn" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = True;</BeforeExport>
						</Property>
						<Property>
							<Code>30</Code>
							<Description>BasisDocument --&gt; Deal</Description>
							<Order>850</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="Deal" Kind="Attribute"/>
							<ConversionRuleCode>GoodsServicesSale                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>31</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>900</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>15</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>950</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = Source.Inventory.Unload();
ObjectsCollection.Columns.Add("CCDNo");
ObjectsCollection.Columns.Add("CountryOfOrigin");
Execute(Algorithms.FillCCDNumbersCountriesOrigin);</BeforeProcessExport>
							<Property>
								<Code>18</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>Cost --&gt; Cost</Description>
								<Order>100</Order>
								<Source Name="Cost" Kind="Attribute" Type="Number"/>
								<Receiver Name="Cost" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>150</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>200</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>250</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Price --&gt; Price</Description>
								<Order>300</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>Count --&gt; Count</Description>
								<Order>350</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>33</Code>
								<Description> --&gt; CCDNo</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CCDNo" Kind="Attribute" Type="CatalogRef.CCDNumbers"/>
								<ConversionRuleCode>CCDNumbers                                         </ConversionRuleCode>
							</Property>
							<Property>
								<Code>34</Code>
								<Description> --&gt; CountryOfOrigin</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CountryOfOrigin" Kind="Attribute" Type="CatalogRef.WorldCountries"/>
								<ConversionRuleCode>WorldCountries                                        </ConversionRuleCode>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>Batch --&gt; ProductOnCommission</Description>
								<Order>500</Order>
								<Source Name="Batch" Kind="Attribute" Type="CatalogRef.ProductsAndServicesBatches"/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromCustomer
   AND ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Property>
							<Code>32</Code>
							<Description>Responsible --&gt; Responsible</Description>
							<Order>1000</Order>
							<Source Name="Responsible" Kind="Attribute" Type="CatalogRef.Employees"/>
							<Receiver Name="Responsible" Kind="Attribute" Type="CatalogRef.Users"/>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ImplementationServicesForProcessing</Code>
					<Description>Document: Report O processing</Description>
					<Order>350</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	ElsIf Not Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.DoNotRead Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);

	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.ProcessingReport</Source>
					<Receiver>DocumentRef.ImplementationServicesForProcessing</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>150</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>450</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>500</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>550</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>600</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>650</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>700</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>28</Code>
							<Description>--&gt; MethodCreditAdvances</Description>
							<Order>800</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>If Source.Prepayment.Count() &gt; 0 Then
	Expression = "Enums.WaysOfOffsettingAdvances.ByDocument";
Else
	SettlementsByDocumentsInProgress = CommonUse.GetAttributeValue(Source.Counterparty, "DoOperationsByDocuments");
	If SettlementsByDocumentsInProgress = True Then
		Expression = "Enums.WaysOfOffsettingAdvances.DoNotRead";
	Else
		Expression = "Enums.WaysOfOffsettingAdvances.automatically";
	EndIf;
EndIf;
</BeforeExport>
						</Property>
						<Group>
							<Code>15</Code>
							<Description>Inventory --&gt; ConsumerMaterials</Description>
							<Order>850</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="ConsumerMaterials" Kind="TabularSection"/>
							<Property>
								<Code>16</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
						</Group>
						<Group>
							<Code>18</Code>
							<Description>Products --&gt; Services</Description>
							<Order>900</Order>
							<Source Name="Products" Kind="TabularSection"/>
							<Receiver Name="Services" Kind="TabularSection"/>
							<Property>
								<Code>19</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Specification --&gt; Specification</Description>
								<Order>150</Order>
								<Source Name="Specification" Kind="Attribute" Type="CatalogRef.Specifications"/>
								<Receiver Name="Specification" Kind="Attribute" Type="CatalogRef.ProductsAndServicesSpecifications"/>
								<ConversionRuleCode>SpecificationsProductsAndServices                          </ConversionRuleCode>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>Price --&gt; Price</Description>
								<Order>350</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>Content --&gt; Content</Description>
								<Order>400</Order>
								<Source Name="Content" Kind="Attribute" Type="String"/>
								<Receiver Name="Content" Kind="Attribute" Type="String"/>
							</Property>
						</Group>
						<Group>
							<Code>29</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>950</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeExport>
							<Property>
								<Code>30</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>31</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Group>
					<Code>Job-order</Code>
					<Description>Job-order</Description>
					<Order>400</Order>
					<Rule>
						<Code>JobOrderImplementationProductsServices</Code>
						<Description>Document: Customer order</Description>
						<Order>50</Order>
						<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	ElsIf Not Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.DoNotRead Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	Object.OperationKind = Enums.OperationKindsImplementationProducts.RetailComission;
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);

	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
						<SynchronizeByID>true</SynchronizeByID>
						<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
						<Source>DocumentRef.CustomerOrder</Source>
						<Receiver>DocumentRef.GoodsServicesSale</Receiver>
						<Properties>
							<Property>
								<Code>1</Code>
								<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
								<Order>50</Order>
								<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
							</Property>
							<Property Search="true">
								<Code>3</Code>
								<Description>Finish --&gt; Date</Description>
								<Order>100</Order>
								<Source Name="Finish" Kind="Attribute" Type="Date"/>
								<Receiver Name="Date" Kind="Property" Type="Date"/>
							</Property>
							<Property>
								<Code>5</Code>
								<Description>Counterparty --&gt; Counterparty</Description>
								<Order>150</Order>
								<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property Search="true">
								<Code>6</Code>
								<Description>Number --&gt; Number</Description>
								<Order>200</Order>
								<Source Name="Number" Kind="Property" Type="String"/>
								<Receiver Name="Number" Kind="Property" Type="String"/>
								<OnExport>AdditPrefix = "WO";
Value = Left(Value, 5) + AdditPrefix + Mid(Value, 8);</OnExport>
							</Property>
							<Property>
								<Code>7</Code>
								<Description>Company --&gt; Company</Description>
								<Order>250</Order>
								<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<ConversionRuleCode>Companies                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>9</Code>
								<Description>DeletionMark --&gt; DeletionMark</Description>
								<Order>300</Order>
								<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
								<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>Posted --&gt; Posted</Description>
								<Order>350</Order>
								<Source Name="Posted" Kind="Property" Type="Boolean"/>
								<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
								<Order>400</Order>
								<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
								<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							</Property>
							<Property>
								<Code>12</Code>
								<Description> --&gt; DocumentAmount</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
								<BeforeExport>Value = Source.Inventory.Total("TotalAmount");</BeforeExport>
							</Property>
							<Property>
								<Code>29</Code>
								<Description>BankAccount --&gt; BankAccountOfTheCompany</Description>
								<Order>500</Order>
								<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<Receiver Name="BankAccountOfTheCompany" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
							</Property>
							<Property>
								<Code>30</Code>
								<Description>PriceKind --&gt; PricesType</Description>
								<Order>550</Order>
								<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
								<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
								<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
							</Property>
							<Property>
								<Code>31</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>600</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
							</Property>
							<Property>
								<Code>32</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>650</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>33</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>700</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>34</Code>
								<Description>StructuralUnitReserve --&gt; Warehouse</Description>
								<Order>750</Order>
								<Source Name="StructuralUnitReserve" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
								<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
								<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							</Property>
							<Property>
								<Code>36</Code>
								<Description>--&gt; MethodCreditAdvances</Description>
								<Order>850</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
								<BeforeExport>If Source.Prepayment.Count() &gt; 0 Then
	Expression = "Enums.WaysOfOffsettingAdvances.ByDocument";
Else
	SettlementsByDocumentsInProgress = CommonUse.GetAttributeValue(Source.Counterparty, "DoOperationsByDocuments");
	If SettlementsByDocumentsInProgress = True Then
		Expression = "Enums.WaysOfOffsettingAdvances.DoNotRead";
	Else
		Expression = "Enums.WaysOfOffsettingAdvances.automatically";
	EndIf;
EndIf;
</BeforeExport>
							</Property>
							<Property>
								<Code>87</Code>
								<Description>--&gt; SaleToCustomer</Description>
								<Order>900</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>SaleToCustomer</ParameterForTransferName>
								<BeforeExport>Value = True;</BeforeExport>
							</Property>
							<Property>
								<Code>89</Code>
								<Description>Comment --&gt; Comment</Description>
								<Order>1000</Order>
								<Source Name="Comment" Kind="Attribute" Type="String"/>
								<Receiver Name="Comment" Kind="Attribute" Type="String"/>
							</Property>
							<Group>
								<Code>37</Code>
								<Description> --&gt; Products</Description>
								<Order>1100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Products" Kind="TabularSection"/>
								<BeforeProcessExport>Execute(Algorithms.GenerateTableOfProducts);</BeforeProcessExport>
								<Property>
									<Code>39</Code>
									<Description> --&gt; PlacesQuantity</Description>
									<Order>100</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>62</Code>
									<Description> --&gt; MeasurementUnit</Description>
									<Order>650</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
									<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
									<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>63</Code>
									<Description> --&gt; ProductsAndServices</Description>
									<Order>700</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
								</Property>
								<Property>
									<Code>64</Code>
									<Description> --&gt; Amount</Description>
									<Order>750</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>65</Code>
									<Description> --&gt; VATAmount</Description>
									<Order>800</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>66</Code>
									<Description> --&gt; Price</Description>
									<Order>850</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Price" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
								</Property>
								<Property>
									<Code>67</Code>
									<Description> --&gt; Factor</Description>
									<Order>900</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
								</Property>
								<Property>
									<Code>68</Code>
									<Description> --&gt; VATRate</Description>
									<Order>950</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
									<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
								</Property>
								<Property>
									<Code>69</Code>
									<Description> --&gt; Count</Description>
									<Order>1000</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Count" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>70</Code>
									<Description>--&gt; ProductOnCommission</Description>
									<Order>1050</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="" Kind=""/>
									<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
									<BeforeExport>If ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
								</Property>
							</Group>
							<Group>
								<Code>50</Code>
								<Description> --&gt; Services</Description>
								<Order>1150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Services" Kind="TabularSection"/>
								<BeforeProcessExport>Execute(Algorithms.GenerateTableOfServices);</BeforeProcessExport>
								<Property>
									<Code>51</Code>
									<Description> --&gt; Count</Description>
									<Order>50</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Count" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>52</Code>
									<Description> --&gt; ProductsAndServices</Description>
									<Order>100</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
								</Property>
								<Property>
									<Code>53</Code>
									<Description> --&gt; Content</Description>
									<Order>150</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Content" Kind="Attribute" Type="String"/>
									<BeforeExport>If Not ValueIsFilled(CollectionObject.Content) Then
	Value = String(CollectionObject.ProductsAndServices);	
EndIf;</BeforeExport>
								</Property>
								<Property>
									<Code>54</Code>
									<Description> --&gt; VATRate</Description>
									<Order>200</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
									<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
								</Property>
								<Property>
									<Code>56</Code>
									<Description> --&gt; Amount</Description>
									<Order>300</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>57</Code>
									<Description> --&gt; VATAmount</Description>
									<Order>350</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>61</Code>
									<Description> --&gt; Price</Description>
									<Order>550</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Price" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
								</Property>
							</Group>
						</Properties>
						<Values/>
					</Rule>
					<Rule>
						<Code>JobOrderActOnProvisionOfIndustrialServices</Code>
						<Description>Document: Customer order</Description>
						<Order>100</Order>
						<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	ElsIf Not Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.DoNotRead Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	Execute(Algorithms.ProcessTablePartDocumentActWorks);
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
						<SynchronizeByID>true</SynchronizeByID>
						<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
						<Source>DocumentRef.CustomerOrder</Source>
						<Receiver>DocumentRef.ActOnProvisionOfIndustrialServices</Receiver>
						<Properties>
							<Property>
								<Code>1</Code>
								<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
								<Order>50</Order>
								<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
							</Property>
							<Property Search="true">
								<Code>2</Code>
								<Description>Finish --&gt; Date</Description>
								<Order>100</Order>
								<Source Name="Finish" Kind="Attribute" Type="Date"/>
								<Receiver Name="Date" Kind="Property" Type="Date"/>
							</Property>
							<Property>
								<Code>4</Code>
								<Description>Counterparty --&gt; Counterparty</Description>
								<Order>150</Order>
								<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property Search="true">
								<Code>5</Code>
								<Description>Number --&gt; Number</Description>
								<Order>200</Order>
								<Source Name="Number" Kind="Property" Type="String"/>
								<Receiver Name="Number" Kind="Property" Type="String"/>
								<OnExport>AdditPrefix = "WO";
Value = Left(Value, 5) + AdditPrefix + Mid(Value, 8);</OnExport>
							</Property>
							<Property>
								<Code>6</Code>
								<Description>Company --&gt; Company</Description>
								<Order>250</Order>
								<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<ConversionRuleCode>Companies                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>8</Code>
								<Description>DeletionMark --&gt; DeletionMark</Description>
								<Order>300</Order>
								<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
								<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>9</Code>
								<Description>Posted --&gt; Posted</Description>
								<Order>350</Order>
								<Source Name="Posted" Kind="Property" Type="Boolean"/>
								<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
								<Order>400</Order>
								<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
								<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							</Property>
							<Property>
								<Code>11</Code>
								<Description> --&gt; DocumentAmount</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
								<BeforeExport>Value = Source.Works.Total("TotalAmount");</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>PriceKind --&gt; PricesType</Description>
								<Order>500</Order>
								<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
								<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
								<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>550</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>600</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>650</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>SalesStructuralUnit --&gt; DivisionCost</Description>
								<Order>700</Order>
								<Source Name="SalesStructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
								<Receiver Name="DivisionCost" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
								<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
							</Property>
							<Property>
								<Code>26</Code>
								<Description> --&gt; ProductsAndServicesCategory</Description>
								<Order>800</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
								<BeforeExport>If Source.Works.Count() &gt; 0
   AND ValueIsFilled(Source.Works[0].ProductsAndServices) Then
	Value = Source.Works[0].ProductsAndServices.ProductsAndServicesCategory;
Else
	Value = "";
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>--&gt; MethodCreditAdvances</Description>
								<Order>850</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
								<BeforeExport>If Source.Prepayment.Count() &gt; 0 Then
	Expression = "Enums.WaysOfOffsettingAdvances.ByDocument";
Else
	SettlementsByDocumentsInProgress = CommonUse.GetAttributeValue(Source.Counterparty, "DoOperationsByDocuments");
	If SettlementsByDocumentsInProgress = True Then
		Expression = "Enums.WaysOfOffsettingAdvances.DoNotRead";
	Else
		Expression = "Enums.WaysOfOffsettingAdvances.automatically";
	EndIf;
EndIf;
</BeforeExport>
							</Property>
							<Property>
								<Code>37</Code>
								<Description>Comment --&gt; Comment</Description>
								<Order>900</Order>
								<Source Name="Comment" Kind="Attribute" Type="String"/>
								<Receiver Name="Comment" Kind="Attribute" Type="String"/>
							</Property>
							<Group>
								<Code>12</Code>
								<Description>Works --&gt; Services</Description>
								<Order>1000</Order>
								<Source Name="Works" Kind="TabularSection"/>
								<Receiver Name="Services" Kind="TabularSection"/>
								<Property>
									<Code>13</Code>
									<Description>Count --&gt; Count</Description>
									<Order>50</Order>
									<Source Name="Count" Kind="Attribute" Type="Number"/>
									<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>14</Code>
									<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
									<Order>100</Order>
									<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
								</Property>
								<Property>
									<Code>16</Code>
									<Description>VATRate --&gt; VATRate</Description>
									<Order>200</Order>
									<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
									<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
									<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
								</Property>
								<Property>
									<Code>17</Code>
									<Description>Amount --&gt; Amount</Description>
									<Order>250</Order>
									<Source Name="Amount" Kind="Attribute" Type="Number"/>
									<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>18</Code>
									<Description>VATAmount --&gt; VATAmount</Description>
									<Order>300</Order>
									<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
									<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>19</Code>
									<Description>Price --&gt; Price</Description>
									<Order>350</Order>
									<Source Name="Price" Kind="Attribute" Type="Number"/>
									<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>36</Code>
									<Description> --&gt; ProductsAndServicesCategory</Description>
									<Order>400</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
									<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
									<BeforeExport>Value = CollectionObject.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
								</Property>
							</Group>
							<Group>
								<Code>28</Code>
								<Description>Prepayment --&gt; CreditAdvances</Description>
								<Order>1050</Order>
								<Source Name="Prepayment" Kind="TabularSection"/>
								<Receiver Name="CreditAdvances" Kind="TabularSection"/>
								<BeforeExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeExport>
								<Property>
									<Code>29</Code>
									<Description>Document --&gt; DocumentAdvance</Description>
									<Order>50</Order>
									<Source Name="Document" Kind="Attribute"/>
									<Receiver Name="DocumentAdvance" Kind="Attribute"/>
								</Property>
								<Property>
									<Code>33</Code>
									<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
									<Order>250</Order>
									<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
									<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
								</Property>
							</Group>
						</Properties>
						<Values/>
					</Rule>
					<Rule>
						<Code>JobOrderRequirementSlip</Code>
						<Description>Document: Customer order</Description>
						<Order>150</Order>
						<AfterImport>	
If DataImportToInformationBaseMode() Then
			
	Execute(Algorithms.ProcessDocumentImportAfterFilling);

EndIf;</AfterImport>
						<SynchronizeByID>true</SynchronizeByID>
						<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
						<Source>DocumentRef.CustomerOrder</Source>
						<Receiver>DocumentRef.RequestInvoice</Receiver>
						<Properties>
							<Property Search="true">
								<Code>1</Code>
								<Description>Finish --&gt; Date</Description>
								<Order>50</Order>
								<Source Name="Finish" Kind="Attribute" Type="Date"/>
								<Receiver Name="Date" Kind="Property" Type="Date"/>
							</Property>
							<Property>
								<Code>2</Code>
								<Description>Comment --&gt; Comment</Description>
								<Order>100</Order>
								<Source Name="Comment" Kind="Attribute" Type="String"/>
								<Receiver Name="Comment" Kind="Attribute" Type="String"/>
							</Property>
							<Property>
								<Code>3</Code>
								<Description>Counterparty --&gt; Counterparty</Description>
								<Order>150</Order>
								<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property Search="true">
								<Code>4</Code>
								<Description>Number --&gt; Number</Description>
								<Order>200</Order>
								<Source Name="Number" Kind="Property" Type="String"/>
								<Receiver Name="Number" Kind="Property" Type="String"/>
								<OnExport>AdditPrefix = "WO";
Value = Left(Value, 5) + AdditPrefix + Mid(Value, 8);</OnExport>
							</Property>
							<Property>
								<Code>5</Code>
								<Description>Company --&gt; Company</Description>
								<Order>250</Order>
								<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<ConversionRuleCode>Companies                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>7</Code>
								<Description>DeletionMark --&gt; DeletionMark</Description>
								<Order>300</Order>
								<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
								<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>8</Code>
								<Description>Posted --&gt; Posted</Description>
								<Order>350</Order>
								<Source Name="Posted" Kind="Property" Type="Boolean"/>
								<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>StructuralUnitReserve --&gt; Warehouse</Description>
								<Order>400</Order>
								<Source Name="StructuralUnitReserve" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
								<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
								<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>SalesStructuralUnit --&gt; DivisionCost</Description>
								<Order>450</Order>
								<Source Name="SalesStructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
								<Receiver Name="DivisionCost" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
								<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
							</Property>
							<Property>
								<Code>19</Code>
								<Description> --&gt; GLAccountsCostInTable</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="GLAccountsCostInTable" Kind="Attribute" Type="Boolean"/>
								<BeforeExport>Value = True;</BeforeExport>
							</Property>
							<Property Disable="true">
								<Code>27</Code>
								<Description>OrderState --&gt;</Description>
								<Order>550</Order>
								<Source Name="OrderState" Kind="Attribute" Type="CatalogRef.CustomerOrdersState"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Group>
								<Code>9</Code>
								<Description>Materials --&gt; Materials</Description>
								<Order>600</Order>
								<Source Name="Materials" Kind="TabularSection"/>
								<Receiver Name="Materials" Kind="TabularSection"/>
								<Property>
									<Code>10</Code>
									<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
									<Order>50</Order>
									<Source Name="MeasurementUnit" Kind="Attribute"/>
									<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
									<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
									<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>11</Code>
									<Description>Count --&gt; PlacesQuantity</Description>
									<Order>100</Order>
									<Source Name="Count" Kind="Attribute" Type="Number"/>
									<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>12</Code>
									<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
									<Order>150</Order>
									<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
								</Property>
								<Property>
									<Code>20</Code>
									<Description> --&gt; Count</Description>
									<Order>200</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Count" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>21</Code>
									<Description> --&gt; Factor</Description>
									<Order>250</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
								</Property>
								<Property>
									<Code>22</Code>
									<Description>Batch --&gt; ProductOnCommission</Description>
									<Order>300</Order>
									<Source Name="Batch" Kind="Attribute" Type="CatalogRef.ProductsAndServicesBatches"/>
									<Receiver Name="" Kind=""/>
									<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
									<BeforeExport>If ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
								</Property>
								<Property>
									<Code>23</Code>
									<Description> --&gt; ProductsAndServicesCategory</Description>
									<Order>350</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
									<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
									<BeforeExport>Value = CollectionObject.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
								</Property>
								<Property>
									<Code>24</Code>
									<Description> --&gt; DivisionCost</Description>
									<Order>400</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="DivisionCost" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
									<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
									<BeforeExport>Value = Source.SalesStructuralUnit;</BeforeExport>
								</Property>
							</Group>
							<Group>
								<Code>13</Code>
								<Description>ConsumerMaterials --&gt; ConsumerMaterials</Description>
								<Order>650</Order>
								<Source Name="ConsumerMaterials" Kind="TabularSection"/>
								<Receiver Name="ConsumerMaterials" Kind="TabularSection"/>
								<Property>
									<Code>14</Code>
									<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
									<Order>50</Order>
									<Source Name="MeasurementUnit" Kind="Attribute"/>
									<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
									<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>15</Code>
									<Description>Count --&gt; PlacesQuantity</Description>
									<Order>100</Order>
									<Source Name="Count" Kind="Attribute" Type="Number"/>
									<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
								</Property>
								<Property>
									<Code>16</Code>
									<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
									<Order>150</Order>
									<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
									<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
								</Property>
								<Property>
									<Code>25</Code>
									<Description> --&gt; Count</Description>
									<Order>200</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Count" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
								</Property>
								<Property>
									<Code>26</Code>
									<Description> --&gt; Factor</Description>
									<Order>250</Order>
									<Source Name="" Kind=""/>
									<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
									<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
								</Property>
							</Group>
						</Properties>
						<Values/>
					</Rule>
				</Group>
			</Group>
			<Group>
				<Code>RetailSales</Code>
				<Description>Documents. Retail sales</Description>
				<Order>100</Order>
				<Rule>
					<Code>ReestimationOfProductsInRetail</Code>
					<Description>Document: Revaluation in retail (accrual accounting)</Description>
					<Order>300</Order>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.RetailRevaluation</Source>
					<Receiver>DocumentRef.ReestimationOfProductsInRetail</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>100</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>150</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
							<CastToLength>11</CastToLength>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>200</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>250</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>300</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>350</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Group>
							<Code>8</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>400</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>9</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>NewPrice --&gt; PriceInRetail</Description>
								<Order>150</Order>
								<Source Name="NewPrice" Kind="Attribute" Type="Number"/>
								<Receiver Name="PriceInRetail" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>Amount --&gt; RevaluationAmount</Description>
								<Order>200</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="RevaluationAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>Price --&gt; PriceForRetailOld</Description>
								<Order>250</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="PriceForRetailOld" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>RetailReport</Code>
					<Description>Document: Report O retail sales</Description>
					<Order>300</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then	
	
	IsReportUSOAboutSales		= (Object.OperationKind = Enums.OperationKindsRetailReport.NTTOSalesReport);
	AccountingBySaleCost	= (AccountingPolicy.ProductsEvaluationMethodInRetail(Object.Company, Object.Date) = PredefinedValue("Enum.WaysToEvaluateProductsInRetail.OnSellingCost"));
	
	USOSellingCost = IsReportUSOAboutSales AND AccountingBySaleCost;
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.RetailReport</Source>
					<Receiver>DocumentRef.RetailReport</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>150</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property Search="true">
							<Code>4</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>350</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>400</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>450</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>InventoryReconciliation --&gt; ProductsAtWarehouseReconciliation</Description>
							<Order>500</Order>
							<Source Name="InventoryReconciliation" Kind="Attribute" Type="DocumentRef.InventoryReconciliation"/>
							<Receiver Name="ProductsAtWarehouseReconciliation" Kind="Attribute" Type="DocumentRef.GoodsAtWarehouseInventoryTaking"/>
							<ConversionRuleCode>ProductsAtWarehouseReconciliation                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>23</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>600</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>24</Code>
							<Description>Item --&gt; CashFlowItem</Description>
							<Order>650</Order>
							<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>25</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>700</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>29</Code>
							<Description>--&gt; OperationKind</Description>
							<Order>800</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsRetailReport"/>
							<BeforeExport>Value = "ReportOfKCMOAREASales";</BeforeExport>
						</Property>
						<Group>
							<Code>12</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>900</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>13</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>14</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>150</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>16</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>200</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>250</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>Price --&gt; Price</Description>
								<Order>300</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Batch --&gt; ProductOnCommission</Description>
								<Order>350</Order>
								<Source Name="Batch" Kind="Attribute" Type="CatalogRef.ProductsAndServicesBatches"/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
								<BeforeExport>If ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>19</Code>
							<Description>PaymentWithPaymentCards --&gt; Payment</Description>
							<Order>950</Order>
							<Source Name="PaymentWithPaymentCards" Kind="TabularSection"/>
							<Receiver Name="Payment" Kind="TabularSection"/>
							<Property>
								<Code>20</Code>
								<Description>Amount --&gt; PaymentAmount</Description>
								<Order>50</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="PaymentAmount" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Property>
							<Code>28</Code>
							<Description>Responsible --&gt; Responsible</Description>
							<Order>1000</Order>
							<Source Name="Responsible" Kind="Attribute" Type="CatalogRef.Employees"/>
							<Receiver Name="Responsible" Kind="Attribute" Type="CatalogRef.Users"/>
						</Property>
					</Properties>
					<Values/>
				</Rule>
			</Group>
			<Group>
				<Code>ProcurementAndPurchasing</Code>
				<Description>Documents. Supply and purchases</Description>
				<Order>150</Order>
				<Rule>
					<Code>ExpenseReport</Code>
					<Description>Document: Expense report</Description>
					<Order>50</Order>
					<AfterImport>	
If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.ExpenseReport</Source>
					<Receiver>DocumentRef.ExpenseReport</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>4</Code>
							<Description>Number --&gt; Number</Description>
							<Order>150</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Company --&gt; Company</Description>
							<Order>200</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>250</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>300</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>350</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>27</Code>
							<Description>Multiplicity --&gt; MultiplicityOfDocument</Description>
							<Order>400</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MultiplicityOfDocument" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>28</Code>
							<Description>ExchangeRate --&gt; ExchangeRateDocument</Description>
							<Order>450</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="ExchangeRateDocument" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>29</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>500</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>30</Code>
							<Description>Employee --&gt; Ind</Description>
							<Order>550</Order>
							<Source Name="Employee" Kind="Attribute" Type="CatalogRef.Employees"/>
							<Receiver Name="Ind" Kind="Attribute" Type="CatalogRef.Individuals"/>
							<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
							<BeforeExport>Value = Source.Employee.Ind;</BeforeExport>
						</Property>
						<Property>
							<Code>34</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>600</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>36</Code>
							<Description> --&gt; Warehouse</Description>
							<Order>650</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>If Source.Inventory.Count() &gt; 0 Then
	Value = Source.Inventory[0].StructuralUnit;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>53</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>750</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>9</Code>
							<Description>AdvancesPaid --&gt; AdvancesPaid</Description>
							<Order>800</Order>
							<Source Name="AdvancesPaid" Kind="TabularSection"/>
							<Receiver Name="AdvancesPaid" Kind="TabularSection"/>
							<Property>
								<Code>31</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>100</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>11</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>850</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = Source.Inventory.Unload();

ObjectsCollection.Columns.Add("Vendor");
ObjectsCollection.Columns.Add("ServedSF");
ObjectsCollection.Columns.Add("CustomerInvoiceNote");
ObjectsCollection.Columns.Add("InvoiceDate");
ObjectsCollection.Columns.Add("NumberSF");

Query = New Query;
Query.Text = 
"SELECT
|	SupplierInvoiceNote.Counterparty AS Vendor,
|	SupplierInvoiceNote.Ref AS CustomerInvoiceNote,
|	SupplierInvoiceNote.IncomingDocumentDate AS InvoiceDate,
|	SupplierInvoiceNote.IncomingDocumentNumber AS NumberSF
|FROM
|	Document.SupplierInvoiceNote AS SupplierInvoiceNote
|WHERE
|	SupplierInvoiceNote.BasisDocument = &amp;BasisDocument";

Query.SetParameter("BasisDocument", Source.Ref);
Selection = Query.Execute().Select();
If Selection.Next() Then
	ObjectsCollection.FillValues(Selection.Vendor, "Vendor");
	ObjectsCollection.FillValues(True, "ServedSF");
	ObjectsCollection.FillValues(Selection.CustomerInvoiceNote, "CustomerInvoiceNote");
	ObjectsCollection.FillValues(Selection.InvoiceDate, "InvoiceDate");
	ObjectsCollection.FillValues(Selection.NumberSF, "NumberSF");
EndIf;

ObjectsCollection.Columns.Add("CCDNo");
ObjectsCollection.Columns.Add("CountryOfOrigin");
Execute(Algorithms.FillCCDNumbersCountriesOrigin);</BeforeProcessExport>
							<Property>
								<Code>13</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>14</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>150</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>16</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>200</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>250</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>Price --&gt; Price</Description>
								<Order>300</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>37</Code>
								<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
								<Order>350</Order>
								<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
								<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>38</Code>
								<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
								<Order>400</Order>
								<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
								<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							</Property>
							<Property>
								<Code>54</Code>
								<Description> --&gt; CCDNo</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CCDNo" Kind="Attribute" Type="CatalogRef.CCDNumbers"/>
								<ConversionRuleCode>CCDNumbers                                         </ConversionRuleCode>
							</Property>
							<Property>
								<Code>55</Code>
								<Description> --&gt; CountryOfOrigin</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CountryOfOrigin" Kind="Attribute" Type="CatalogRef.WorldCountries"/>
								<ConversionRuleCode>WorldCountries                                        </ConversionRuleCode>
							</Property>
							<Property>
								<Code>56</Code>
								<Description> --&gt; Vendor</Description>
								<Order>550</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Vendor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>60</Code>
								<Description> --&gt; ServedSF</Description>
								<Order>600</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ServedSF" Kind="Attribute" Type="Boolean"/>
							</Property>
							<Property>
								<Code>57</Code>
								<Description>--&gt; CustomerInvoiceNote</Description>
								<Order>650</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CustomerInvoiceNote" Kind="Attribute" Type="DocumentRef.SupplierInvoiceNote"/>
								<ConversionRuleCode>SupplierInvoiceNote                             </ConversionRuleCode>
							</Property>
							<Property>
								<Code>58</Code>
								<Description> --&gt; InvoiceDate</Description>
								<Order>700</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="InvoiceDate" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>59</Code>
								<Description> --&gt; NumberSF</Description>
								<Order>750</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="NumberSF" Kind="Attribute" Type="String"/>
							</Property>
						</Group>
						<Group>
							<Code>19</Code>
							<Description>Expenses --&gt; Other</Description>
							<Order>900</Order>
							<Source Name="Expenses" Kind="TabularSection"/>
							<Receiver Name="Other" Kind="TabularSection"/>
							<BeforeProcessExport>
ObjectsCollection = Source.Expenses.Unload();

ObjectsCollection.Columns.Add("Vendor");
ObjectsCollection.Columns.Add("ServedSF");
ObjectsCollection.Columns.Add("CustomerInvoiceNote");
ObjectsCollection.Columns.Add("InvoiceDate");
ObjectsCollection.Columns.Add("NumberSF");

Query = New Query;
Query.Text = 
"SELECT
|	SupplierInvoiceNote.Counterparty AS Vendor,
|	SupplierInvoiceNote.Ref AS CustomerInvoiceNote,
|	SupplierInvoiceNote.IncomingDocumentDate AS InvoiceDate,
|	SupplierInvoiceNote.IncomingDocumentNumber AS NumberSF
|FROM
|	Document.SupplierInvoiceNote AS SupplierInvoiceNote
|WHERE
|	SupplierInvoiceNote.BasisDocument = &amp;BasisDocument";

Query.SetParameter("BasisDocument", Source.Ref);
Selection = Query.Execute().Select();
If Selection.Next() Then
	ObjectsCollection.FillValues(Selection.Vendor, "Vendor");
	ObjectsCollection.FillValues(True, "ServedSF");
	ObjectsCollection.FillValues(Selection.CustomerInvoiceNote, "CustomerInvoiceNote");
	ObjectsCollection.FillValues(Selection.InvoiceDate, "InvoiceDate");
	ObjectsCollection.FillValues(Selection.NumberSF, "NumberSF");
EndIf;</BeforeProcessExport>
							<Property>
								<Code>22</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>100</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>150</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>200</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>33</Code>
								<Description>Content --&gt; Content</Description>
								<Order>250</Order>
								<Source Name="Content" Kind="Attribute" Type="String"/>
								<Receiver Name="Content" Kind="Attribute" Type="String"/>
								<BeforeExport>If Not ValueIsFilled(CollectionObject.Content) Then
	Value = CollectionObject.ProductsAndServices.Description;
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>39</Code>
								<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
								<Order>300</Order>
								<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
								<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>40</Code>
								<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
								<Order>350</Order>
								<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
								<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							</Property>
							<Property>
								<Code>61</Code>
								<Description>--&gt; Vendor</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Vendor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>62</Code>
								<Description>--&gt; ServedSF</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ServedSF" Kind="Attribute" Type="Boolean"/>
							</Property>
							<Property>
								<Code>63</Code>
								<Description>--&gt; CustomerInvoiceNote</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CustomerInvoiceNote" Kind="Attribute" Type="DocumentRef.SupplierInvoiceNote"/>
								<ConversionRuleCode>SupplierInvoiceNote                             </ConversionRuleCode>
							</Property>
							<Property>
								<Code>64</Code>
								<Description>--&gt; InvoiceDate</Description>
								<Order>550</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="InvoiceDate" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>65</Code>
								<Description>--&gt; NumberSF</Description>
								<Order>600</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="NumberSF" Kind="Attribute" Type="String"/>
							</Property>
							<Property>
								<Code>67</Code>
								<Description>StructuralUnit --&gt; DivisionCost</Description>
								<Order>650</Order>
								<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
								<Receiver Name="DivisionCost" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
								<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
							</Property>
							<Property>
								<Code>66</Code>
								<Description>--&gt; ProductionExpense</Description>
								<Order>700</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductionExpense</ParameterForTransferName>
								<BeforeExport>
ExpensesGLAccount = CommonUse.GetAttributeValue(CollectionObject.ProductsAndServices, "ExpensesGLAccount");
If ValueIsFilled(ExpensesGLAccount)
	AND Parameters.UsedProductionSubsystem
	AND (ExpensesGLAccount.TypeOfAccount = Enums.GLAccountsTypes.IndirectExpenses
	OR ExpensesGLAccount.TypeOfAccount = Enums.GLAccountsTypes.UnfinishedProduction) Then
	
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>41</Code>
							<Description>Payments --&gt; PaymentToVendor</Description>
							<Order>950</Order>
							<Source Name="Payments" Kind="TabularSection"/>
							<Receiver Name="PaymentToVendor" Kind="TabularSection"/>
							<Property>
								<Code>42</Code>
								<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
								<Order>50</Order>
								<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
								<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>43</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>100</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							</Property>
							<Property>
								<Code>44</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>150</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>45</Code>
								<Description>Counterparty --&gt; Counterparty</Description>
								<Order>200</Order>
								<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>46</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>250</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>47</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>300</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>48</Code>
								<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
								<Order>350</Order>
								<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
								<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							</Property>
							<Property>
								<Code>49</Code>
								<Description>PaymentAmount --&gt; Amount</Description>
								<Order>400</Order>
								<Source Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>50</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>450</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>52</Code>
								<Description> --&gt; BackPayMethod</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="BackPayMethod" Kind="Attribute" Type="EnumRef.DebtPaymentMethods"/>
								<BeforeExport>If CollectionObject.AdvanceFlag Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.DoNotRepay";
ElsIf ValueIsFilled(CollectionObject.Document) Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.ByDocument";
Else
	Expression = "Enums.MethodsOfRepaymentOfDebt.automatically";
EndIf;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReceiptOfGoodsAndServices</Code>
					<Description>Document: Receipt Consignment</Description>
					<Order>100</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	ElsIf Not Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.DoNotRead Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.SupplierInvoice</Source>
					<Receiver>DocumentRef.ReceiptOfGoodsAndServices</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>100</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsSupplierInvoice"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsGoodsAndServicesReceipt"/>
							<ConversionRuleCode>OperationKindsFlowOfGoodsAndServices               </ConversionRuleCode>
							<BeforeExport>
If Source.OperationKind = Enums.OperationKindsSupplierInvoice.ReceiptFromVendor Then
	
	If Source.Inventory.Count() &gt; 0
		AND Source.Expenses.Count() = 0 Then
		
		Value = "Products";
		
	ElsIf Source.Inventory.Count() = 0
		AND Source.Expenses.Count() &gt; 0 Then
		
		Value = "Services";
		
	Else
		
		Value = "PurchaseComission";
		
	EndIf;
	
	OCRName = "";
	
EndIf;</BeforeExport>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Date --&gt; Date</Description>
							<Order>150</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>450</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>500</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>550</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>600</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>650</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>700</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>33</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>800</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>37</Code>
							<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
							<Order>850</Order>
							<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
						</Property>
						<Property>
							<Code>38</Code>
							<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
							<Order>900</Order>
							<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>43</Code>
							<Description>--&gt; MethodCreditAdvances</Description>
							<Order>1000</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionForCommission
	OR Source.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionIntoProcessing Then
	
	Expression = "Enums.WaysOfOffsettingAdvances.DoNotRead";
ElsIf Source.Prepayment.Count() &gt; 0 Then
	Expression = "Enums.WaysOfOffsettingAdvances.ByDocument";
Else
	SettlementsByDocumentsInProgress = CommonUse.GetAttributeValue(Source.Counterparty, "DoOperationsByDocuments");
	If SettlementsByDocumentsInProgress = True Then
		Expression = "Enums.WaysOfOffsettingAdvances.DoNotRead";
	Else
		Expression = "Enums.WaysOfOffsettingAdvances.automatically";
	EndIf;
EndIf;

</BeforeExport>
						</Property>
						<Property>
							<Code>44</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1050</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>16</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>1100</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = Source.Inventory.Unload();
ObjectsCollection.Columns.Add("CCDNo");
ObjectsCollection.Columns.Add("CountryOfOrigin");
Execute(Algorithms.FillCCDNumbersCountriesOrigin);</BeforeProcessExport>
							<Property>
								<Code>17</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Price --&gt; Price</Description>
								<Order>350</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>32</Code>
								<Description> --&gt; Factor</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>34</Code>
								<Description> --&gt; Count</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>45</Code>
								<Description> --&gt; CCDNo</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CCDNo" Kind="Attribute" Type="CatalogRef.CCDNumbers"/>
								<ConversionRuleCode>CCDNumbers                                         </ConversionRuleCode>
							</Property>
							<Property>
								<Code>46</Code>
								<Description> --&gt; CountryOfOrigin</Description>
								<Order>550</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CountryOfOrigin" Kind="Attribute" Type="CatalogRef.WorldCountries"/>
								<ConversionRuleCode>WorldCountries                                        </ConversionRuleCode>
							</Property>
							<Property>
								<Code>35</Code>
								<Description>--&gt; ProductOnCommission</Description>
								<Order>600</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
								<BeforeExport>If Source.OperationKind =  Enums.OperationKindsSupplierInvoice.ReceptionForCommission
   AND ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>24</Code>
							<Description>Expenses --&gt; Services</Description>
							<Order>1150</Order>
							<Source Name="Expenses" Kind="TabularSection"/>
							<Receiver Name="Services" Kind="TabularSection"/>
							<Property>
								<Code>25</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>26</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>150</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>200</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>29</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>250</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>30</Code>
								<Description>Price --&gt; Price</Description>
								<Order>300</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>36</Code>
								<Description>Content --&gt; Content</Description>
								<Order>350</Order>
								<Source Name="Content" Kind="Attribute" Type="String"/>
								<Receiver Name="Content" Kind="Attribute" Type="String"/>
								<BeforeExport>If Not ValueIsFilled(CollectionObject.Content) Then
	Value = String(CollectionObject.ProductsAndServices);	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>48</Code>
								<Description>StructuralUnit --&gt; DivisionCost</Description>
								<Order>400</Order>
								<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
								<Receiver Name="DivisionCost" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
								<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
							</Property>
							<Property>
								<Code>47</Code>
								<Description>--&gt; ProductionExpense</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductionExpense</ParameterForTransferName>
								<BeforeExport>
ExpensesGLAccount = CommonUse.GetAttributeValue(CollectionObject.ProductsAndServices, "ExpensesGLAccount");
If ValueIsFilled(ExpensesGLAccount)
	AND Parameters.UsedProductionSubsystem
	AND (ExpensesGLAccount.TypeOfAccount = Enums.GLAccountsTypes.IndirectExpenses
	OR ExpensesGLAccount.TypeOfAccount = Enums.GLAccountsTypes.UnfinishedProduction) Then
	
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>40</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>1200</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeExport>
							<Property>
								<Code>41</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>42</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>TransferOfProducts</Code>
					<Description>Document: Move inventories</Description>
					<Order>150</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.CustomerInvoice</Source>
					<Receiver>DocumentRef.TransferOfProducts</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsCustomerInvoice"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsGoodsTransfer"/>
							<ConversionRuleCode>OperationKindsProductsTransfer                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>4</Code>
							<Description>Number --&gt; Number</Description>
							<Order>150</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Company --&gt; Company</Description>
							<Order>200</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>250</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>300</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>350</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>400</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>450</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>500</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>Consignor --&gt; Consignor</Description>
							<Order>550</Order>
							<Source Name="Consignor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Consignor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>Consignee --&gt; Consignee</Description>
							<Order>600</Order>
							<Source Name="Consignee" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Consignee" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>18</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>650</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>13</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>700</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>14</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>SupplierInvoiceNote</Code>
					<Description>Document: Account-texture (Received)</Description>
					<Order>200</Order>
					<BeforeExport>If TypeOf(Source) = Type("DocumentRef.SupplierInvoiceNote")
	AND Not ValueIsFilled(Source.BasisDocument) Then
	
	Cancel = True;
EndIf;</BeforeExport>
					<AfterImport>
If DataImportToInformationBaseMode() Then

	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;
	
	Object.ReceivingMethodCode = 1; //SB does not involve getting CIN in the electronic form
	
	ParametersStructure	= New Structure;
	ParametersStructure.Insert("Date",                     Object.Date);
	ParametersStructure.Insert("InvoiceKind",          Object.InvoiceKind);
	ParametersStructure.Insert("Correction",              Object.Correction);
	ParametersStructure.Insert("ContractKind",              CommonUse.GetAttributeValue(
		Object.CounterpartyContract, "ContractKind"));
	ParametersStructure.Insert("InvoiceWithoutVAT",        Object.InvoiceWithoutVAT);
	ParametersStructure.Insert("OperationKindCode",          Object.OperationKindCode);
	ParametersStructure.Insert("OperationKindCodeBases", Undefined);
	ParametersStructure.Insert("BasisDocuments",       Object.BasisDocuments.Unload(,"BasisDocument"));
	
	Object.OperationKindCode = Documents.SupplierInvoiceNote.GetOperationKindCode(ParametersStructure);
	Object.ReceivingMethodCode = 1;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.SupplierInvoiceNote</Source>
					<Receiver>DocumentRef.SupplierInvoiceNote</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
							<Order>150</Order>
							<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>BasisDocument --&gt; BasisDocument</Description>
							<Order>200</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="BasisDocument" Kind="Attribute"/>
							<BeforeExport>If TypeOf(Source.BasisDocument) = Type("DocumentRef.SupplierInvoice") Then		
	If Source.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromCustomer
 	 OR Source.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromAgent Then
		OCRName = "ReturnOfProductsFromCustomer";
	ElsIf Source.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionForCommission
		  OR Source.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionIntoProcessing
		  OR Source.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceiptFromVendor Then
		OCRName = "ReceiptOfGoodsAndServices";
	EndIf;	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>250</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>7</Code>
							<Description>Number --&gt; Number</Description>
							<Order>300</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
							<Order>350</Order>
							<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Company --&gt; Company</Description>
							<Order>400</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>450</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>500</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>550</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>600</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>OperationKind --&gt; InvoiceKind</Description>
							<Order>650</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsSupplierInvoiceNote"/>
							<Receiver Name="InvoiceKind" Kind="Attribute" Type="EnumRef.ReceivedCustomerInvoiceNoteKind"/>
							<ConversionRuleCode>ReceivedInvoiceKind                        </ConversionRuleCode>
						</Property>
						<Property>
							<Code>21</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>700</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>12</Code>
							<Description>--&gt; BasisDocuments</Description>
							<Order>750</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="BasisDocuments" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = New ValueTable;
ObjectsCollection.Columns.Add("BasisDocument");

NewRow = ObjectsCollection.Add();
NewRow.BasisDocument = Source.BasisDocument;</BeforeProcessExport>
							<Property>
								<Code>14</Code>
								<Description> --&gt; BasisDocument</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="BasisDocument" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineNameOfPwcFoundationDocument);</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>17</Code>
							<Description>Inventory --&gt; Advances</Description>
							<Order>800</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Advances" Kind="TabularSection"/>
							<BeforeProcessExport>Cancel = Source.OperationKind &lt;&gt; Enums.OperationKindsSupplierInvoiceNote.Advance;</BeforeProcessExport>
							<Property>
								<Code>18</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>50</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>TotalAmount --&gt; Amount</Description>
								<Order>100</Order>
								<Source Name="TotalAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>150</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property Disable="true">
								<Code>24</Code>
								<Description>CCDNo --&gt;</Description>
								<Order>200</Order>
								<Source Name="CCDNo" Kind="Attribute" Type="CatalogRef.CCDNumbers"/>
								<Receiver Name="" Kind=""/>
							</Property>
							<Property Disable="true">
								<Code>25</Code>
								<Description>CountryOfOrigin --&gt;</Description>
								<Order>250</Order>
								<Source Name="CountryOfOrigin" Kind="Attribute" Type="CatalogRef.WorldCountries"/>
								<Receiver Name="" Kind=""/>
							</Property>
						</Group>
						<Group>
							<Code>26</Code>
							<Description>InvoiceNotesIssuedToCustomers --&gt; InvoiceNotesIssuedToCustomers</Description>
							<Order>850</Order>
							<Source Name="InvoiceNotesIssuedToCustomers" Kind="TabularSection"/>
							<Receiver Name="InvoiceNotesIssuedToCustomers" Kind="TabularSection"/>
							<Property>
								<Code>27</Code>
								<Description>VAT --&gt; VAT</Description>
								<Order>50</Order>
								<Source Name="VAT" Kind="Attribute" Type="Number"/>
								<Receiver Name="VAT" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>Customer --&gt; Customer</Description>
								<Order>100</Order>
								<Source Name="Customer" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Customer" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>29</Code>
								<Description>Subagent --&gt; Subagent</Description>
								<Order>150</Order>
								<Source Name="Subagent" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Subagent" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>30</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>200</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>31</Code>
								<Description>CustomerInvoiceNote --&gt; CustomerInvoiceNote</Description>
								<Order>250</Order>
								<Source Name="CustomerInvoiceNote" Kind="Attribute" Type="DocumentRef.CustomerInvoiceNote"/>
								<Receiver Name="CustomerInvoiceNote" Kind="Attribute" Type="DocumentRef.CustomerInvoiceNote"/>
							</Property>
							<Property Disable="true">
								<Code>32</Code>
								<Description>AdditionalInformation --&gt;</Description>
								<Order>300</Order>
								<Source Name="AdditionalInformation" Kind="Attribute" Type="String"/>
								<Receiver Name="" Kind=""/>
							</Property>
						</Group>
						<Property>
							<Code>22</Code>
							<Description>--&gt; VATBroughtDeductible</Description>
							<Order>900</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATBroughtDeductible" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>If Source.Date &gt;= Date("20120101") Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>23</Code>
							<Description>--&gt; VATAmountDocument</Description>
							<Order>950</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATAmountDocument" Kind="Attribute" Type="Number"/>
							<BeforeExport>Value = Source.Inventory.Total("VATAmount");</BeforeExport>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReturnProductsToSupplier</Code>
					<Description>Document: flow rate Consignment</Description>
					<Order>250</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.CustomerInvoice</Source>
					<Receiver>DocumentRef.ReturnProductsToSupplier</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>100</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsCustomerInvoice"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsReturnGoodsToVendor"/>
							<ConversionRuleCode>OperationKindsReturnProductsVendor              </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Date --&gt; Date</Description>
							<Order>150</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>450</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>500</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>550</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>600</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>650</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>700</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>750</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>28</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>850</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>32</Code>
							<Description>BasisDocument --&gt; Deal</Description>
							<Order>950</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="Deal" Kind="Attribute" Type="DocumentRef.GoodsServicesReceipt"/>
							<ConversionRuleCode>ReceiptOfGoodsAndServices                           </ConversionRuleCode>
						</Property>
						<Property>
							<Code>33</Code>
							<Description>Consignor --&gt; Consignor</Description>
							<Order>1000</Order>
							<Source Name="Consignor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Consignor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>34</Code>
							<Description>Consignee --&gt; Consignee</Description>
							<Order>1050</Order>
							<Source Name="Consignee" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Consignee" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>35</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1100</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>18</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>1150</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = Source.Inventory.Unload();
ObjectsCollection.Columns.Add("CCDNo");
ObjectsCollection.Columns.Add("CountryOfOrigin");
Execute(Algorithms.FillCCDNumbersCountriesOrigin);</BeforeProcessExport>
							<Property>
								<Code>19</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>300</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>Price --&gt; Price</Description>
								<Order>350</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>27</Code>
								<Description> --&gt; Factor</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>29</Code>
								<Description> --&gt; Count</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>36</Code>
								<Description> --&gt; CCDNo</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CCDNo" Kind="Attribute" Type="CatalogRef.CCDNumbers"/>
								<ConversionRuleCode>CCDNumbers                                         </ConversionRuleCode>
							</Property>
							<Property>
								<Code>37</Code>
								<Description> --&gt; CountryOfOrigin</Description>
								<Order>550</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CountryOfOrigin" Kind="Attribute" Type="CatalogRef.WorldCountries"/>
								<ConversionRuleCode>WorldCountries                                        </ConversionRuleCode>
							</Property>
							<Property>
								<Code>30</Code>
								<Description>--&gt; ProductOnCommission</Description>
								<Order>600</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToPrincipal
   AND ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>SalesReportToPrincipal</Code>
					<Description>Document: Report consignor</Description>
					<Order>300</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then

	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
	Execute(Algorithms.HandleCounterpartyContract);

EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.ReportToPrincipal</Source>
					<Receiver>DocumentRef.SalesReportToPrincipal</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>350</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>CommissionFeePercent --&gt; CommissionFeePercent</Description>
							<Order>400</Order>
							<Source Name="CommissionFeePercent" Kind="Attribute" Type="Number"/>
							<Receiver Name="CommissionFeePercent" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>BrokerageCalculationMethod --&gt; BrokerageCalculationMethod</Description>
							<Order>450</Order>
							<Source Name="BrokerageCalculationMethod" Kind="Attribute" Type="EnumRef.CommissionFeeCalculationMethods"/>
							<Receiver Name="BrokerageCalculationMethod" Kind="Attribute" Type="EnumRef.CommissionFeeCalculationMethods"/>
							<ConversionRuleCode>CommissionFeeCalculationMethods         </ConversionRuleCode>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>VATCommissionFeePercent --&gt; VATCommissionFeePercent</Description>
							<Order>500</Order>
							<Source Name="VATCommissionFeePercent" Kind="Attribute" Type="CatalogRef.VATRates"/>
							<Receiver Name="VATCommissionFeePercent" Kind="Attribute" Type="EnumRef.VATRates"/>
							<BeforeExport>Execute(Algorithms.FillInVatRateOfRemuneration);</BeforeExport>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>550</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>600</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>650</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>700</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>KeepBackComissionFee --&gt; KeepRemuneration</Description>
							<Order>750</Order>
							<Source Name="KeepBackComissionFee" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="KeepRemuneration" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>32</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>850</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>34</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>900</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>18</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>950</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>19</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Amount --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>BrokerageAmount --&gt; BrokerageAmount</Description>
								<Order>300</Order>
								<Source Name="BrokerageAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="BrokerageAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>350</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>26</Code>
								<Description>BrokerageVATAmount --&gt; BrokerageVATAmount</Description>
								<Order>400</Order>
								<Source Name="BrokerageVATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="BrokerageVATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>AmountReceipt --&gt; AmountReceipt</Description>
								<Order>450</Order>
								<Source Name="AmountReceipt" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountReceipt" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>Price --&gt; Price</Description>
								<Order>500</Order>
								<Source Name="Price" Kind="Attribute" Type="Number"/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillPriceInTabularSection);</BeforeExport>
							</Property>
							<Property>
								<Code>29</Code>
								<Description>ReceiptPrice --&gt; ReceiptPrice</Description>
								<Order>550</Order>
								<Source Name="ReceiptPrice" Kind="Attribute" Type="Number"/>
								<Receiver Name="ReceiptPrice" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>31</Code>
								<Description> --&gt; Factor</Description>
								<Order>600</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>33</Code>
								<Description> --&gt; Count</Description>
								<Order>650</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>35</Code>
								<Description>DateOfSale --&gt; DateOfSale</Description>
								<Order>700</Order>
								<Source Name="DateOfSale" Kind="Attribute" Type="Date"/>
								<Receiver Name="DateOfSale" Kind="Attribute" Type="Date"/>
							</Property>
							<Property>
								<Code>36</Code>
								<Description>Customer --&gt; Customer</Description>
								<Order>750</Order>
								<Source Name="Customer" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<Receiver Name="Customer" Kind="Attribute" Type="CatalogRef.Counterparties"/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							</Property>
						</Group>
						<Property>
							<Code>37</Code>
							<Description> --&gt; OperationKind</Description>
							<Order>1000</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsSalesReportToPrincipal"/>
							<BeforeExport>Value = "SalesReport";</BeforeExport>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReceiptOfAdditionalCosts</Code>
					<Description>Document: Additional costs</Description>
					<Order>350</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	ElsIf Not Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.DoNotRead Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	Object.MethodOfDistribution = Enums.WaysDistributionAddCosts.ByAmount;

	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
	Execute(Algorithms.HandleCounterpartyContract);

EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.AdditionalCosts</Source>
					<Receiver>DocumentRef.ReceiptOfAdditionalCosts</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>350</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>400</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>450</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>500</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>550</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>600</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>27</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>700</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>29</Code>
							<Description> --&gt; VATRate</Description>
							<Order>750</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
							<BeforeExport>If Source.Inventory.Count() &gt; 0 Then	
	If Source.Inventory[0].VATRate.NotTaxable Then
		Expression = "Enums.VATRates.WithoutVAT";	
	ElsIf Source.Inventory[0].VATRate.Rate = 18
		 AND Not Source.Inventory[0].VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT18";
	ElsIf Source.Inventory[0].VATRate.Rate = 18
			AND Source.Inventory[0].VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT18_118";
	ElsIf Source.Inventory[0].VATRate.Rate = 10 
		 AND Not Source.Inventory[0].VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT10";
	ElsIf Source.Inventory[0].VATRate.Rate = 10 
			AND Source.Inventory[0].VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT10_110";
	ElsIf Source.Inventory[0].VATRate.Rate = 0 Then
		Expression = "Enums.VATRates.VAT0"; 
	ElsIf Source.Inventory[0].VATRate.Rate = 20
		 AND Not Source.Inventory[0].VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT20";
	ElsIf Source.Inventory[0].VATRate.Rate = 20
			AND Source.Inventory[0].VATRate.Calculated Then
		Expression = "Enums.VATRates.VAT20_120";
	Else
		Expression = "Enums.VATRates.VAT18";
	EndIf;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>34</Code>
							<Description>--&gt; MethodCreditAdvances</Description>
							<Order>800</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>If Source.Prepayment.Count() &gt; 0 Then
	Expression = "Enums.WaysOfOffsettingAdvances.ByDocument";
Else
	SettlementsByDocumentsInProgress = CommonUse.GetAttributeValue(Source.Counterparty, "DoOperationsByDocuments");
	If SettlementsByDocumentsInProgress = True Then
		Expression = "Enums.WaysOfOffsettingAdvances.DoNotRead";
	Else
		Expression = "Enums.WaysOfOffsettingAdvances.automatically";
	EndIf;
EndIf;
</BeforeExport>
						</Property>
						<Property>
							<Code>36</Code>
							<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
							<Order>850</Order>
							<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>37</Code>
							<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
							<Order>900</Order>
							<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
						</Property>
						<Property>
							<Code>35</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>950</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>14</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>1000</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>17</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>AmountExpense --&gt; Amount</Description>
								<Order>200</Order>
								<Source Name="AmountExpense" Kind="Attribute" Type="Number"/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
								<BeforeExport>ConsiderVAT		= Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;
AmountIncludesVAT	= Source.AmountIncludesVAT;

If CollectionObject.VATRate.NotTaxable
	OR CollectionObject.VATRate.Rate = 0 Then
	VATRate = 0;
ElsIf CollectionObject.VATRate.Rate = 18 Then
	VATRate = 18;
ElsIf CollectionObject.VATRate.Rate = 10 Then 
	VATRate = 10;
ElsIf CollectionObject.VATRate.Rate = 20 Then
	VATRate = 20;
Else
	VATRate = 18;
EndIf;

If ConsiderVAT Then
	If AmountIncludesVAT Then
		Amount = CollectionObject.AmountExpense;
	Else
		Amount = 100 * CollectionObject.AmountExpense / (100 + VATRate);
	EndIf;
Else
	Amount = 0;
EndIf;

Value = Amount;</BeforeExport>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>250</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
								<OnExport>ConsiderVAT		= Source.VATTaxation &lt;&gt; Enums.VATTaxationTypes.NotTaxableByVAT;
AmountIncludesVAT	= Source.AmountIncludesVAT;

If CollectionObject.VATRate.NotTaxable
	OR CollectionObject.VATRate.Rate = 0 Then
	VATRate = 0;
ElsIf CollectionObject.VATRate.Rate = 18 Then
	VATRate = 18;
ElsIf CollectionObject.VATRate.Rate = 10 Then 
	VATRate = 10;
ElsIf CollectionObject.VATRate.Rate = 20 Then
	VATRate = 20;
Else
	VATRate = 18;
EndIf;

If ConsiderVAT Then 
	VATAmount = CollectionObject.AmountExpense * VATRate / (100 + VATRate);
Else
	VATAmount = 0;
EndIf;

Value = VATAmount;</OnExport>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Amount --&gt; ProductAmount</Description>
								<Order>350</Order>
								<Source Name="Amount" Kind="Attribute" Type="Number"/>
								<Receiver Name="ProductAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>ReceiptDocument --&gt; DocumentBatch</Description>
								<Order>400</Order>
								<Source Name="ReceiptDocument" Kind="Attribute"/>
								<Receiver Name="DocumentBatch" Kind="Attribute"/>
								<BeforeExport>If TypeOf(CollectionObject.ReceiptDocument) = Type("DocumentRef.SupplierInvoice") Then
	
	OCRName = "ReceiptOfGoodsAndServices";
	
ElsIf TypeOf(CollectionObject.ReceiptDocument) = Type("DocumentRef.ExpenseReport") Then
	
	OCRName = "ExpenseReport";
	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>Count --&gt; Count</Description>
								<Order>450</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>31</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>1050</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeExport>
							<Property>
								<Code>32</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>33</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReceiptOfProcessing</Code>
					<Description>Document: Report processer</Description>
					<Order>400</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Object.CreditAdvances.Count() &gt; 0 Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument;
	ElsIf Not Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.DoNotRead Then
		Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically;
	EndIf;
	
	ExchangeNodeForDataImport = Parameters.ExchangeNodeForDataImport;

	Execute(Algorithms.ProcessDocumentImportAfterFilling);

	// Fill in the Content attribute of the Services tabular section
	Execute(Algorithms.FillContentTablePartsServices);
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.SubcontractorReport</Source>
					<Receiver>DocumentRef.ReceiptOfProcessing</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>DocumentCurrency --&gt; DocumentCurrency</Description>
							<Order>50</Order>
							<Source Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>350</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>AmountIncludesVAT --&gt; AmountIncludesVAT</Description>
							<Order>400</Order>
							<Source Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="AmountIncludesVAT" Kind="Attribute" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>PriceKind --&gt; PricesType</Description>
							<Order>450</Order>
							<Source Name="PriceKind" Kind="Attribute" Type="CatalogRef.PricesKinds"/>
							<Receiver Name="PricesType" Kind="Attribute" Type="CatalogRef.ProductsAndServicesPricesTypes"/>
							<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Contract --&gt; CounterpartyContract</Description>
							<Order>500</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
							<BeforeExport>
Execute(Algorithms.BuildingStructureOfContractCounterparty);</BeforeExport>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
							<Order>550</Order>
							<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
							<Order>600</Order>
							<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
							<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description> --&gt; VATIncludedToCost</Description>
							<Order>650</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="VATIncludedToCost" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>700</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>If Source.StructuralUnit.StructuralUnitType &lt;&gt; Enums.StructuralUnitsTypes.Warehouse Then
	Value = "";
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>23</Code>
							<Description>StructuralUnit --&gt; DivisionCost</Description>
							<Order>750</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="DivisionCost" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
							<BeforeExport>If Source.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Warehouse Then
	Value = "";
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>25</Code>
							<Description>Amount --&gt; DocumentAmount</Description>
							<Order>850</Order>
							<Source Name="Amount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>26</Code>
							<Description> --&gt; ProductsAndServicesCategory</Description>
							<Order>900</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
							<BeforeExport>Value = Source.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
						</Property>
						<Property>
							<Code>39</Code>
							<Description>--&gt; MethodCreditAdvances</Description>
							<Order>950</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="MethodCreditAdvances" Kind="Attribute" Type="EnumRef.AdvancesOffsetMethods"/>
							<BeforeExport>If Source.Prepayment.Count() &gt; 0 Then
	Expression = "Enums.WaysOfOffsettingAdvances.ByDocument";
Else
	SettlementsByDocumentsInProgress = CommonUse.GetAttributeValue(Source.Counterparty, "DoOperationsByDocuments");
	If SettlementsByDocumentsInProgress = True Then
		Expression = "Enums.WaysOfOffsettingAdvances.DoNotRead";
	Else
		Expression = "Enums.WaysOfOffsettingAdvances.automatically";
	EndIf;
EndIf;
</BeforeExport>
						</Property>
						<Property>
							<Code>54</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1400</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>16</Code>
							<Description> --&gt; Products</Description>
							<Order>1450</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = New ValueTable;
ObjectsCollection.Columns.Add("ProductsAndServices");
ObjectsCollection.Columns.Add("Count");
ObjectsCollection.Columns.Add("Specification");
ObjectsCollection.Columns.Add("MeasurementUnit");

NewRow = ObjectsCollection.Add();
NewRow.ProductsAndServices = Source.ProductsAndServices;
NewRow.Count = Source.Count;
NewRow.Specification = Source.Specification;
NewRow.MeasurementUnit = Source.MeasurementUnit;</BeforeProcessExport>
							<Property>
								<Code>17</Code>
								<Description> --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>18</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>19</Code>
								<Description> --&gt; Specification</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Specification" Kind="Attribute" Type="CatalogRef.ProductsAndServicesSpecifications"/>
								<ConversionRuleCode>SpecificationsProductsAndServices                          </ConversionRuleCode>
							</Property>
						</Group>
						<Group>
							<Code>29</Code>
							<Description> --&gt; Services</Description>
							<Order>1500</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Services" Kind="TabularSection"/>
							<BeforeProcessExport>
ObjectsCollection = New ValueTable;
ObjectsCollection.Columns.Add("ProductsAndServices");
ObjectsCollection.Columns.Add("Amount");
ObjectsCollection.Columns.Add("VATAmount");
ObjectsCollection.Columns.Add("VATRate");
ObjectsCollection.Columns.Add("Count");
ObjectsCollection.Columns.Add("Price");

If ValueIsFilled(Source.Expense) Then

	NewRow 				= ObjectsCollection.Add();
	NewRow.ProductsAndServices 	= Source.Expense;
	NewRow.Amount 			= Source.Amount;
	NewRow.VATAmount 		= Source.VATAmount;
	NewRow.VATRate 		= Source.VATRate;
	NewRow.Count 		= 1;
	NewRow.Price 			= Source.Amount;
	
EndIf;</BeforeProcessExport>
							<Property>
								<Code>30</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>31</Code>
								<Description> --&gt; Amount</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>32</Code>
								<Description> --&gt; VATAmount</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>33</Code>
								<Description> --&gt; VATRate</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>Execute(Algorithms.FillVatRateTableParts);</BeforeExport>
							</Property>
							<Property>
								<Code>34</Code>
								<Description> --&gt; Price</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>35</Code>
								<Description> --&gt; Count</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Group>
							<Code>36</Code>
							<Description>Prepayment --&gt; CreditAdvances</Description>
							<Order>1550</Order>
							<Source Name="Prepayment" Kind="TabularSection"/>
							<Receiver Name="CreditAdvances" Kind="TabularSection"/>
							<BeforeExport>If Source.Prepayment.Count() &gt; 0
	AND Not ValueIsFilled(Source.Prepayment[0].Document) Then
	
	Cancel = True;
	
EndIf;</BeforeExport>
							<Property>
								<Code>37</Code>
								<Description>Document --&gt; DocumentAdvance</Description>
								<Order>50</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="DocumentAdvance" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>38</Code>
								<Description>SettlementsAmount --&gt; AmountOfSetOff</Description>
								<Order>100</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountOfSetOff" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Group>
							<Code>40</Code>
							<Description>Inventory --&gt; UsedMaterials</Description>
							<Order>1600</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="UsedMaterials" Kind="TabularSection"/>
							<Property>
								<Code>41</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>42</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
						</Group>
						<Group>
							<Code>43</Code>
							<Description>Disposals --&gt; ReturnedMaterials</Description>
							<Order>1650</Order>
							<Source Name="Disposals" Kind="TabularSection"/>
							<Receiver Name="ReturnedMaterials" Kind="TabularSection"/>
							<Property>
								<Code>44</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>45</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
			</Group>
			<Group>
				<Code>AccountingInventory</Code>
				<Description>Documents. accounting inventories</Description>
				<Order>200</Order>
				<Rule>
					<Code>ProductsAtWarehouseReconciliation</Code>
					<Description>Document: InventoryProcess inventories</Description>
					<Order>50</Order>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryReconciliation</Source>
					<Receiver>DocumentRef.ProductsAtWarehouseReconciliation</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>18</Code>
							<Description> --&gt; Posted</Description>
							<Order>200</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							<OnExport>Value = Not Source.DeletionMark;</OnExport>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>250</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>300</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>350</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>7</Code>
							<Description>--&gt; Products</Description>
							<Order>400</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>
Query = New Query();
Query.SetParameter("Ref", Source.Ref);
Query.SetParameter("Date", Source.Date);
Query.SetParameter("ReferenceCurrency", Parameters.NationalCurrency);
Query.SetParameter("SimpCurrency", Parameters.AccountingCurrency);

Query.Text = "SELECT
               |	InventoryReconciliationInventory.ProductsAndServices AS ProductsAndServices,
               |	InventoryReconciliationInventory.ProductsAndServices.MeasurementUnit AS MeasurementUnit,
               |	CASE
               |		WHEN VALUETYPE(InventoryReconciliationInventory.MeasurementUnit) = Type(Catalog.UOM)
               |				AND InventoryReconciliationInventory.MeasurementUnit.Factor &gt; 0
               |			THEN InventoryReconciliationInventory.Count * InventoryReconciliationInventory.MeasurementUnit.Factor
               |		ELSE InventoryReconciliationInventory.Count
               |	END AS Count,
               |	CASE
               |		WHEN VALUETYPE(InventoryReconciliationInventory.MeasurementUnit) = Type(Catalog.UOM)
               |				AND InventoryReconciliationInventory.MeasurementUnit.Factor &gt; 0
               |			THEN InventoryReconciliationInventory.QuantityAccounting * InventoryReconciliationInventory.MeasurementUnit.Factor
               |		ELSE InventoryReconciliationInventory.QuantityAccounting
               |	END AS QuantityAccounting,
               |	InventoryReconciliationInventory.Amount * CASE
               |		WHEN &amp;ReferenceCurrency &lt;&gt; &amp;SimpCurrency
               |			THEN CASE
               |					WHEN ISNULL(CurrencyRatesPrices.Multiplicity, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesPrices.ExchangeRate, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesCurrencies.Multiplicity, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesCurrencies.ExchangeRate, 0) &gt; 0
               |						THEN CurrencyRatesPrices.ExchangeRate * CurrencyRatesCurrencies.Multiplicity / (CurrencyRatesCurrencies.ExchangeRate * CurrencyRatesPrices.Multiplicity)
               |					ELSE 0
               |				END
               |		ELSE 1
        END / CASE
        	WHEN InventoryReconciliationInventory.Count = 0 THEN 1
        	WHEN VALUETYPE(InventoryReconciliationInventory.MeasurementUnit) = Type(Catalog.UOM)
        			AND InventoryReconciliationInventory.MeasurementUnit.Factor &gt; 0
        		THEN InventoryReconciliationInventory.Count * InventoryReconciliationInventory.MeasurementUnit.Factor
        	ELSE InventoryReconciliationInventory.Count
        END AS Price,
               |	InventoryReconciliationInventory.Amount * CASE
               |		WHEN &amp;ReferenceCurrency &lt;&gt; &amp;SimpCurrency
               |			THEN CASE
               |					WHEN ISNULL(CurrencyRatesPrices.Multiplicity, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesPrices.ExchangeRate, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesCurrencies.Multiplicity, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesCurrencies.ExchangeRate, 0) &gt; 0
               |						THEN CurrencyRatesPrices.ExchangeRate * CurrencyRatesCurrencies.Multiplicity / (CurrencyRatesCurrencies.ExchangeRate * CurrencyRatesPrices.Multiplicity)
               |					ELSE 0
               |				END
               |		ELSE 1
               |	END AS Amount,
               |	InventoryReconciliationInventory.AmountAccounting * CASE
               |		WHEN &amp;ReferenceCurrency &lt;&gt; &amp;SimpCurrency
               |			THEN CASE
               |					WHEN ISNULL(CurrencyRatesPrices.Multiplicity, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesPrices.ExchangeRate, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesCurrencies.Multiplicity, 0) &gt; 0
               |							AND ISNULL(CurrencyRatesCurrencies.ExchangeRate, 0) &gt; 0
               |						THEN CurrencyRatesPrices.ExchangeRate * CurrencyRatesCurrencies.Multiplicity / (CurrencyRatesCurrencies.ExchangeRate * CurrencyRatesPrices.Multiplicity)
               |					ELSE 0
               |				END
               |		ELSE 1
               |	END AS AmountAccounting
               |FROM
               |	Document.InventoryReconciliation.Inventory AS InventoryReconciliationInventory
               |		LEFT JOIN InformationRegister.CurrencyRates.SliceLast(&amp;Date, Currency = &amp;SimpCurrency) AS CurrencyRatesPrices
               |		BY (TRUE)
               |		LEFT JOIN InformationRegister.CurrencyRates.SliceLast(&amp;Date, Currency = &amp;ReferenceCurrency) AS CurrencyRatesCurrencies
               |		BY (TRUE)
               |WHERE
                       |	InventoryReconciliationInventory.Ref = &amp;Refs";
				
ObjectsCollection = Query.Execute().Unload();</BeforeProcessExport>
							<Property>
								<Code>11</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>16</Code>
								<Description> --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>10</Code>
								<Description> --&gt; QuantityAccounting</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="QuantityAccounting" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>14</Code>
								<Description> --&gt; Price</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>12</Code>
								<Description> --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>13</Code>
								<Description> --&gt; AmountAccounting</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="AmountAccounting" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ProductsPosting</Code>
					<Description>Document: Posting inventories</Description>
					<Order>100</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	ExchangeNodeForDataImport = Parameters.ExchangeNodeForDataImport;
	
	If Not ValueIsFilled(Object.OtherIncomeCostsItem) Then
		Object.OtherIncomeCostsItem = ExchangeNodeForDataImport.OtherIncomeCostsItem;
	EndIf;	
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryReceipt</Source>
					<Receiver>DocumentRef.ProductsPosting</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>300</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>BasisDocument --&gt; ProductsAtWarehouseReconciliation</Description>
							<Order>350</Order>
							<Source Name="BasisDocument" Kind="Attribute" Type="DocumentRef.InventoryReconciliation"/>
							<Receiver Name="ProductsAtWarehouseReconciliation" Kind="Attribute" Type="DocumentRef.GoodsAtWarehouseInventoryTaking"/>
							<ConversionRuleCode>ProductsAtWarehouseReconciliation                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>400</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>19</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>450</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>9</Code>
							<Description> --&gt; Products</Description>
							<Order>500</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>Query = New Query();
Query.SetParameter("Ref", Source.Ref);
Query.SetParameter("Date", Source.Date);
Query.SetParameter("ReferenceCurrency", Constants.NationalCurrency.Get());
Query.SetParameter("SimpCurrency", Constants.AccountingCurrency.Get());

Query.Text = "SELECT
				|	InventoryReceiptInventory.ProductsAndServices,
				|	InventoryReceiptInventory.ProductsAndServices.MeasurementUnit AS MeasurementUnit,
				|	1 AS Factor,
				|	CASE
				|		WHEN VALUETYPE(InventoryReceiptInventory.MeasurementUnit) = Type(Catalog.UOM)
				|				AND InventoryReceiptInventory.MeasurementUnit.Factor &gt; 0
				|			THEN InventoryReceiptInventory.Count * InventoryReceiptInventory.MeasurementUnit.Factor
				|		ELSE InventoryReceiptInventory.Count
				|	END AS Count,
				|	InventoryReceiptInventory.Amount * CASE
				|		WHEN &amp;ReferenceCurrency &lt;&gt; &amp;SimpCurrency
				|			THEN CASE
				|					WHEN ISNULL(CurrencyRatesPrices.Multiplicity, 0) &gt; 0
				|							AND ISNULL(CurrencyRatesPrices.ExchangeRate, 0) &gt; 0
				|							AND ISNULL(CurrencyRatesCurrencies.Multiplicity, 0) &gt; 0
				|							AND ISNULL(CurrencyRatesCurrencies.ExchangeRate, 0) &gt; 0
				|						THEN CurrencyRatesPrices.ExchangeRate * CurrencyRatesCurrencies.Multiplicity / (CurrencyRatesCurrencies.ExchangeRate * CurrencyRatesPrices.Multiplicity)
				|					ELSE 0
				|				END
				|		ELSE 1
				|	END / CASE
				|		WHEN InventoryReceiptInventory.Count = 0 THEN 1
				|		WHEN VALUETYPE(InventoryReceiptInventory.MeasurementUnit) = Type(Catalog.UOM)
				|				AND InventoryReceiptInventory.MeasurementUnit.Factor &gt; 0
				|			THEN InventoryReceiptInventory.Count * InventoryReceiptInventory.MeasurementUnit.Factor
				|		ELSE InventoryReceiptInventory.Count
				|	END AS Price,
				|	InventoryReceiptInventory.Amount * CASE
				|		WHEN &amp;ReferenceCurrency &lt;&gt; &amp;SimpCurrency
				|			THEN CASE
				|					WHEN ISNULL(CurrencyRatesPrices.Multiplicity, 0) &gt; 0
				|							AND ISNULL(CurrencyRatesPrices.ExchangeRate, 0) &gt; 0
				|							AND ISNULL(CurrencyRatesCurrencies.Multiplicity, 0) &gt; 0
				|							AND ISNULL(CurrencyRatesCurrencies.ExchangeRate, 0) &gt; 0
				|						THEN CurrencyRatesPrices.ExchangeRate * CurrencyRatesCurrencies.Multiplicity / (CurrencyRatesCurrencies.ExchangeRate * CurrencyRatesPrices.Multiplicity)
				|					ELSE 0
				|				END
				|		ELSE 1
				|	END AS Amount
				|FROM
				|	Document.InventoryReceipt.Inventory AS InventoryReceiptInventory
				|		LEFT JOIN InformationRegister.CurrencyRates.SliceLast(&amp;Date, Currency = &amp;SimpCurrency) AS CurrencyRatesPrices
				|		BY (TRUE)
				|		LEFT JOIN InformationRegister.CurrencyRates.SliceLast(&amp;Date, Currency = &amp;ReferenceCurrency) AS CurrencyRatesCurrencies
				|		BY (TRUE)
				|WHERE
				|	InventoryReceiptInventory.Ref = &amp;Refs";
				
ObjectsCollection = Query.Execute().Unload();</BeforeProcessExport>
							<Property>
								<Code>12</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>10</Code>
								<Description> --&gt; MeasurementUnit</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>11</Code>
								<Description> --&gt; Count</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>16</Code>
								<Description> --&gt; Factor</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>14</Code>
								<Description> --&gt; Price</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Price" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>13</Code>
								<Description> --&gt; Amount</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ProductsWriteOff</Code>
					<Description>Document: WriteOff inventories</Description>
					<Order>150</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryWriteOff</Source>
					<Receiver>DocumentRef.ProductsWriteOff</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>200</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>250</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>BasisDocument --&gt; ProductsAtWarehouseReconciliation</Description>
							<Order>300</Order>
							<Source Name="BasisDocument" Kind="Attribute" Type="DocumentRef.InventoryReconciliation"/>
							<Receiver Name="ProductsAtWarehouseReconciliation" Kind="Attribute" Type="DocumentRef.GoodsAtWarehouseInventoryTaking"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>350</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>450</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>9</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>500</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<Property>
								<Code>10</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>14</Code>
								<Description> --&gt; Factor</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>Count --&gt; Count</Description>
								<Order>250</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ProductTransfer</Code>
					<Description>Document: Move inventories</Description>
					<Order>200</Order>
					<BeforeExport>TableProducts = Source.Inventory.UnloadColumns("ProductsAndServices,Count,MeasurementUnit");
TableProductsOnCommission = TableProducts.Copy();

For Each CurRow IN Source.Inventory Do
	
	If CurRow.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
		NewRow = TableProductsOnCommission.Add();
	Else
		NewRow = TableProducts.Add();
	EndIf;
	
	FillPropertyValues(NewRow, CurRow);
	
EndDo;

IncomingData = New Structure();
IncomingData.Insert("Products", TableProducts);
IncomingData.Insert("ProductsOnCommission", TableProductsOnCommission);</BeforeExport>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	Object.VATInProductsCost = Enums.ActionVATInProductsCost.DontChange;
	
	// Fill in the GL accounts in the tabular section 
	TabularSectionsList = New Array;
	TabularSectionsList.Add("Products");
	TabularSectionsList.Add("ProductsOnCommission");
	TabularSectionsList.Add("ReturnTare");
	For Each TabularSectionName IN TabularSectionsList Do
		
		Documents.ProductTransfer.FillGLAccountsInTabularSection(Object, TabularSectionName);
		
		If TabularSectionName = "ProductsOnCommission" Then
			For Each TableRow IN Object[TabularSectionName] Do
				If Not ValueIsFilled(TableRow.GLAccount) Then
					 TableRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
				EndIf;
				If Not ValueIsFilled(TableRow.NewGlAccount) Then
					 TableRow.NewGlAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
				EndIf;
			EndDo;
		EndIf;
		
	EndDo;
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryTransfer</Source>
					<Receiver>DocumentRef.ProductTransfer</Receiver>
					<Properties>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>4</Code>
							<Description>Number --&gt; Number</Description>
							<Order>150</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Company --&gt; Company</Description>
							<Order>200</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>250</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>300</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>StructuralUnit --&gt; SourceWarehouse</Description>
							<Order>350</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="SourceWarehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>
If Source.OperationKind = Enums.OperationKindsInventoryTransfer.Move Then
	
	StructuralUnit = Source.StructuralUnit;
	Execute(Algorithms.GetOCRForStructuralUnit);
	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>StructuralUnitPayee --&gt; WarehouseRecipient</Description>
							<Order>400</Order>
							<Source Name="StructuralUnitPayee" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="WarehouseRecipient" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>
If Source.OperationKind = Enums.OperationKindsInventoryTransfer.Move Then
	
	StructuralUnit = Source.StructuralUnitPayee;
	Execute(Algorithms.GetOCRForStructuralUnit);
	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>23</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>450</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>10</Code>
							<Description>Inventory --&gt; Products</Description>
							<Order>550</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = IncomingData.Products;</BeforeProcessExport>
							<Property>
								<Code>11</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>16</Code>
								<Description> --&gt; Factor</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Count --&gt; Count</Description>
								<Order>250</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>15</Code>
							<Description>Inventory --&gt; ProductsOnCommission</Description>
							<Order>600</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="ProductsOnCommission" Kind="TabularSection"/>
							<BeforeProcessExport>ObjectsCollection = IncomingData.ProductsOnCommission;</BeforeProcessExport>
							<Property>
								<Code>17</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>19</Code>
								<Description> --&gt; Factor</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>200</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Count --&gt; Count</Description>
								<Order>250</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
						</Group>
						<Property Disable="true">
							<Code>24</Code>
							<Description>OperationKind --&gt;</Description>
							<Order>650</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.InventoryTransferOperationKinds"/>
							<Receiver Name="" Kind=""/>
						</Property>
					</Properties>
					<Values/>
				</Rule>
			</Group>
			<Group>
				<Code>CashAssets</Code>
				<Description>Documents. Cash tools</Description>
				<Order>250</Order>
				<Rule>
					<Code>ReceiptOnBankAccount</Code>
					<Description>Document: Receipt on account</Description>
					<Order>50</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;
	
	If Object.OperationKind = Enums.OperationKindsOfCashReceipt.OtherReceipt
		AND Not ValueIsFilled(Object.ExtDimensionCr1) Then
		
		Object.ExtDimensionCr1 = CommonUseClientServer.PredefinedItem("Catalog.OtherIncomeAndExpenses.OtherExtraordinaryExpensesIncomes");
		
	EndIf;
		
	If Object.PaymentDetails.Count() = 0 Then
		StringPayment = Object.PaymentDetails.Add();
		StringPayment.PaymentAmount = Object.DocumentAmount;
	ElsIf Object.PaymentDetails.Count() = 1 Then
		Object.PaymentDetails[0].PaymentAmount = Object.DocumentAmount;
	EndIf;
	
	For Each CurRow IN Object.PaymentDetails Do 
		
		CurRow.CashFlowItem	= Object.CashFlowItem;
		CurRow.BackPayMethod	= ?(ValueIsFilled(CurRow.Deal), 
			Enums.MethodsOfRepaymentOfDebt.ByDocument, 
			CurRow.BackPayMethod);
		
		//  Fill in the contract.
		If (Object.OperationKind = Enums.OperationKindsOfCashReceipt.PurchaseOfForeignCurrencies)
		   AND Not ValueIsFilled(CurRow.CounterpartyContract) Then
			CurRow.CounterpartyContract = CommonUse.GetAttributeValue(Object.Counterparty, "CounterpartyMainContract");
		EndIf;
		
		//  Fill in the settlements accounts in the decryption
		If ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
			Continue;
		EndIf;
		
		If Object.OperationKind = Enums.OperationKindsOfCashReceipt.SettlementsByCreditsAndLoans Then
			CurRow.GlAccountSettlementsWithCounterparties = Object.GlAccountSettlementsWithCounterparties;
			Continue;
		EndIf;

		AccountsStructure = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(
			Object.Company, Object.Counterparty, CurRow.CounterpartyContract);

		If Object.OperationKind = Enums.OperationKindsOfCashReceipt.BuyerPayment Then
			
			If Not ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
				CurRow.GlAccountSettlementsWithCounterparties = AccountsStructure.CustomerCalculationsAccount;
			EndIf;
			
			If Not ValueIsFilled(CurRow.GlAccountCalculationsOnAdvances) Then
				CurRow.GlAccountCalculationsOnAdvances     = AccountsStructure.AccountAdvancesCustomer;
			EndIf;
			
		ElsIf Object.OperationKind = Enums.OperationKindsOfCashReceipt.ReturnFromVendor Then
			
			If Not ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
				CurRow.GlAccountSettlementsWithCounterparties = AccountsStructure.AccountCalculations;
			EndIf;
			
			If Not ValueIsFilled(CurRow.GlAccountCalculationsOnAdvances) Then
				CurRow.GlAccountCalculationsOnAdvances     = AccountsStructure.AccountAdvances;
			EndIf;
			
		ElsIf Object.OperationKind = Enums.OperationKindsOfCashReceipt.OtherSettlementsWithCounterparties Then
			
			If Not ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
				CurRow.GlAccountSettlementsWithCounterparties = AccountsStructure.CustomerCalculationsAccount;
			EndIf;
			
		EndIf;

	EndDo;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.PaymentReceipt</Source>
					<Receiver>DocumentRef.ReceiptOnBankAccount</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationsKindsReceipt"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.CashOperationsKinds"/>
							<ConversionRuleCode>OperationKindsReceiptOfNonCashCashValues     </ConversionRuleCode>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsPaymentReceipt.Other Then
	TypeOfAccount = CommonUse.ObjectAttributeValue(Source.Correspondence, "TypeOfAccount");
	If TypeOfAccount = Enums.GLAccountsTypes.CreditsAndLoans
		OR TypeOfAccount = Enums.GLAccountsTypes.LongtermObligations Then
		Value = "SettlementsByCreditsAndLoans";
		OCRName = "";
	EndIf;
EndIf;</BeforeExport>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
							<Order>150</Order>
							<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>400</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>450</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>BankAccount --&gt; AccountOfCompany</Description>
							<Order>500</Order>
							<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="AccountOfCompany" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>CashCurrency --&gt; DocumentCurrency</Description>
							<Order>550</Order>
							<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>18</Code>
							<Description>Item --&gt; CashFlowItem</Description>
							<Order>600</Order>
							<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>20</Code>
							<Description> --&gt; AccountBank</Description>
							<Order>650</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="AccountBank" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>If Source.CashCurrency = Constants.NationalCurrency.Get() Then
	Value = "51";
Else
	Value = "52";
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>26</Code>
							<Description>BasisDocument --&gt; BasisDocument</Description>
							<Order>700</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="BasisDocument" Kind="Attribute"/>
						</Property>
						<Property>
							<Code>27</Code>
							<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
							<Order>750</Order>
							<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>29</Code>
							<Description>PaymentDestination --&gt; PaymentDestination</Description>
							<Order>800</Order>
							<Source Name="PaymentDestination" Kind="Attribute" Type="String"/>
							<Receiver Name="PaymentDestination" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>30</Code>
							<Description>CounterpartyAccount --&gt; CounterpartyAccount</Description>
							<Order>850</Order>
							<Source Name="CounterpartyAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="CounterpartyAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
						</Property>
						<Property>
							<Code>34</Code>
							<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
							<Order>900</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>
If Source.OperationKind = Enums.OperationKindsPaymentReceipt.CurrencyPurchase
	OR Source.OperationKind = Enums.OperationKindsPaymentReceipt.Other Then
	
	If ValueIsFilled(Source.Item.CorrespondingAccount) Then
		Value = Source.Item.CorrespondingAccount;
	Else
		AccountingRecord = "";
		Operation =  Source.Correspondence;
		Document = Source;
		Execute(Algorithms.DefineAccountingAccountByOperation);
		Value = AccountingRecord;
	EndIf;
Else
	Value = "";	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>31</Code>
							<Description> --&gt; ExchangeRateToAcquisitionRealizationDateOfCurrencies</Description>
							<Order>950</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="ExchangeRateToAcquisitionRealizationDateOfCurrencies" Kind="Attribute" Type="Number"/>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsPaymentReceipt.CurrencyPurchase Then
	
	StructureByCurrency = InformationRegisters.CurrencyRates.GetLast(Source.Date, New Structure("Currency", Source.CashCurrency));
	
	ExchangeRate = ?(
		StructureByCurrency.ExchangeRate = 0,
		1,
		StructureByCurrency.ExchangeRate
	);
	
	Value = ExchangeRate;
	
Else
	
	Value = 1;
	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>32</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1000</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>11</Code>
							<Description>PaymentDetails --&gt; PaymentDetails</Description>
							<Order>1050</Order>
							<Source Name="PaymentDetails" Kind="TabularSection"/>
							<Receiver Name="PaymentDetails" Kind="TabularSection"/>
							<BeforeProcessExport>
If Source.OperationKind &lt;&gt; Enums.OperationKindsPaymentReceipt.FromCustomer
	AND Source.OperationKind &lt;&gt; Enums.OperationKindsPaymentReceipt.FromVendor
	AND Source.OperationKind &lt;&gt; Enums.OperationKindsPaymentReceipt.CurrencyPurchase Then
	
	Cancel = True;

EndIf;

If Source.OperationKind = Enums.OperationKindsPaymentReceipt.CurrencyPurchase Then
	
	TableExplanationOfPayment = Source.PaymentDetails.UnloadColumns();
	
	NewRow = TableExplanationOfPayment.Add();
	
	If Constants.AccountingCurrency.Get() = Constants.NationalCurrency.Get() Then
		
		NewRow.ExchangeRate = Source.ExchangeRate;
		NewRow.Multiplicity = Source.Multiplicity;
		NewRow.SettlementsAmount = Source.DocumentAmount;
		
	Else
		
		StructureByCurrency = InformationRegisters.CurrencyRates.GetLast(Source.Date, New Structure("Currency", Source.CashCurrency));
		
		ExchangeRate = ?(
			StructureByCurrency.ExchangeRate = 0,
			1,
			StructureByCurrency.ExchangeRate
		);
		
		Multiplicity = ?(
			StructureByCurrency.ExchangeRate = 0,
			1,
			StructureByCurrency.Multiplicity
		);
		
		NewRow.ExchangeRate = ExchangeRate;
		NewRow.Multiplicity = Multiplicity;
		
		NewRow.SettlementsAmount = SmallBusinessServer.RecalculateFromCurrencyToCurrency(
			Source.DocumentAmount,
			ExchangeRate,
			1,
			Multiplicity,
			1
		);
		
	EndIf;
	
	ObjectsCollection = TableExplanationOfPayment;
	
EndIf;</BeforeProcessExport>
							<Property>
								<Code>12</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>50</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>If Source.VATTaxation = Enums.VATTaxationTypes.NotTaxableByVAT
	AND Source.PaymentDetails.Count() = 1 Then
	Value = "WithoutVAT";	
Else
	Execute(Algorithms.FillVatRateTableParts);
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>100</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
								<BeforeExport>If Source.VATTaxation = Enums.VATTaxationTypes.NotTaxableByVAT
	AND Source.PaymentDetails.Count() = 1 Then
	Value = 0;	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>14</Code>
								<Description>PaymentAmount --&gt; PaymentAmount</Description>
								<Order>150</Order>
								<Source Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="PaymentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>InvoiceForPayment --&gt; InvoiceForPayment</Description>
								<Order>200</Order>
								<Source Name="InvoiceForPayment" Kind="Attribute"/>
								<Receiver Name="InvoiceForPayment" Kind="Attribute" Type="DocumentRef.QuotationToCustomer"/>
								<ConversionRuleCode>InvoiceForPayment                            </ConversionRuleCode>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>250</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsPaymentReceipt.FromCustomer
	OR Source.OperationKind = Enums.OperationKindsPaymentReceipt.FromVendor Then
	
	Execute(Algorithms.BuildingStructureOfContractCounterparty);
	
Else
	
	Empty = True;
	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>300</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>350</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>400</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>450</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>28</Code>
								<Description> --&gt; BackPayMethod</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="BackPayMethod" Kind="Attribute" Type="EnumRef.DebtPaymentMethods"/>
								<BeforeExport>If CollectionObject.AdvanceFlag Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.DoNotRepay";
ElsIf ValueIsFilled(CollectionObject.Document) Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.ByDocument";
Else
	Expression = "Enums.MethodsOfRepaymentOfDebt.automatically";
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>33</Code>
								<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
								<Order>550</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
								<BeforeExport>
If Source.OperationKind = Enums.OperationKindsPaymentReceipt.CurrencyPurchase
	OR Source.OperationKind = Enums.OperationKindsPaymentReceipt.Other Then
	
	If ValueIsFilled(Source.Item.CorrespondingAccount) Then
		Value = Source.Item.CorrespondingAccount;
	Else
		AccountingRecord = "";
		Operation =  Source.Correspondence;
		Document = Source;
		Execute(Algorithms.DefineAccountingAccountByOperation);
		Value = AccountingRecord;
	EndIf;
Else
	Value = "";	
EndIf;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>WriteOffFromCurrentAccount</Code>
					<Description>Document: Expense with account</Description>
					<Order>100</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;

	If Object.OperationKind = Enums.OperationCashWithdrawalOfKinds.OtherWriteOff
		AND Not ValueIsFilled(Object.ExtraDimensionDr1) Then
		
		If Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.OtherExpenses Then
			Object.ExtraDimensionDr1 = CommonUseClientServer.PredefinedItem("Catalog.OtherIncomeAndExpenses.ExpensesForBanksServices");
		EndIf;
		
		If Not ValueIsFilled(Object.ExtraDimensionDr1) Then
			Object.ExtraDimensionDr1 = CommonUseClientServer.PredefinedItem("Catalog.OtherIncomeAndExpenses.OtherExtraordinaryExpensesIncomes");
		EndIf;
		
	EndIf;
	
	If Object.OperationKind = Enums.OperationCashWithdrawalOfKinds.SettlementsByCreditsAndLoans Then
		If Object.PaymentDetails.Count()=0 Then
			StringPayment = Object.PaymentDetails.Add();
			StringPayment.PaymentAmount = Object.DocumentAmount;
		ElsIf Object.PaymentDetails.Count() = 1 Then
			Object.PaymentDetails[0].PaymentAmount = Object.DocumentAmount;
		EndIf;
	EndIf;
	
	If Object.OperationKind = Enums.OperationCashWithdrawalOfKinds.TaxTransfer Then
		
		If Not ValueIsFilled(Object.TaxablePeriod) Then
			Object.TaxablePeriod = Object.Date;
		EndIf;
		
		If Not ValueIsFilled(Object.ExtraDimensionDr1) Then
			Object.ExtraDimensionDr1 = Enums.PaymentsIntoFederalBudgetKinds.Tax;
		EndIf;
		
	EndIf;
	
	For Each CurRow IN Object.PaymentDetails Do 
		
		CurRow.CashFlowItem = Object.CashFlowItem;
		
		CurRow.BackPayMethod	= ?(ValueIsFilled(CurRow.Deal), 
			Enums.MethodsOfRepaymentOfDebt.ByDocument, 
			CurRow.BackPayMethod);
		
		//  Fill in settlements account in Payment details tabular section
		If ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
			Continue;
		EndIf;
		
		If Object.OperationKind = Enums.OperationCashWithdrawalOfKinds.SettlementsByCreditsAndLoans Then
			CurRow.GlAccountSettlementsWithCounterparties = Object.GlAccountSettlementsWithCounterparties;
			Continue;
		EndIf;

		AccountsStructure = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(
		Object.Company, Object.Counterparty, CurRow.CounterpartyContract);
		
		If Object.OperationKind = Enums.OperationCashWithdrawalOfKinds.VendorsPayment Then
			
			If Not ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
				CurRow.GlAccountSettlementsWithCounterparties = AccountsStructure.AccountCalculations;
			EndIf;
			
			If Not ValueIsFilled(CurRow.GlAccountCalculationsOnAdvances) Then
				CurRow.GlAccountCalculationsOnAdvances     = AccountsStructure.AccountAdvances;
			EndIf;
			
		ElsIf Object.OperationKind = Enums.OperationCashWithdrawalOfKinds.ReturnToCustomer Then
			
			If Not ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
				CurRow.GlAccountSettlementsWithCounterparties = AccountsStructure.CustomerCalculationsAccount;
			EndIf;
			
			If Not ValueIsFilled(CurRow.GlAccountCalculationsOnAdvances) Then
				CurRow.GlAccountCalculationsOnAdvances     = AccountsStructure.AccountAdvancesCustomer;
			EndIf;
			
		ElsIf Object.OperationKind = Enums.OperationCashWithdrawalOfKinds.OtherSettlementsWithCounterparties Then
			
			If Not ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
				CurRow.GlAccountSettlementsWithCounterparties = AccountsStructure.AccountCalculations;
			EndIf;
			
		EndIf;
		
	EndDo;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.PaymentExpense</Source>
					<Receiver>DocumentRef.WriteOffFromCurrentAccount</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationsKindsPayment"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsCashWithdrawal"/>
							<ConversionRuleCode>OperationCashWithdrawalOfKinds               </ConversionRuleCode>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsPaymentExpense.Other Then
	TypeOfAccount = CommonUse.ObjectAttributeValue(Source.Correspondence, "TypeOfAccount");
	If TypeOfAccount = Enums.GLAccountsTypes.CreditsAndLoans
		OR TypeOfAccount = Enums.GLAccountsTypes.LongtermObligations Then
		Value = "SettlementsByCreditsAndLoans";
		OCRName = "";
	EndIf;
EndIf;</BeforeExport>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsPaymentExpense.ToAdvanceHolder Then
	Cancel = True;	
ElsIf (Source.OperationKind = Enums.OperationKindsPaymentExpense.Other
	OR Source.OperationKind = Enums.OperationKindsPaymentExpense.Taxes)
	AND (ValueIsFilled(Source.BasisDocument)
	AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.CashTransferPlan")
	AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.PayrollSheet")
	AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.CashOutflowPlan") 
	AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.TaxAccrual")) Then
	
	Value = CommonUse.GetAttributeValue(Source.BasisDocument, "Counterparty");
EndIf;</BeforeExport>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>350</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>400</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>BankAccount --&gt; AccountOfCompany</Description>
							<Order>450</Order>
							<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="AccountOfCompany" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>CashCurrency --&gt; DocumentCurrency</Description>
							<Order>500</Order>
							<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>AdvanceHolder --&gt; Counterparty</Description>
							<Order>550</Order>
							<Source Name="AdvanceHolder" Kind="Attribute" Type="CatalogRef.Employees"/>
							<Receiver Name="Counterparty" Kind="Attribute"/>
							<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsPaymentExpense.ToAdvanceHolder
	AND ValueIsFilled(Source.AdvanceHolder.Ind) Then
	
	Value = Source.AdvanceHolder.Ind;
Else
	Cancel = True;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>Item --&gt; CashFlowItem</Description>
							<Order>600</Order>
							<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>26</Code>
							<Description> --&gt; AccountBank</Description>
							<Order>650</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="AccountBank" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>NationalCurrency	= Constants.NationalCurrency.Get();
Value 			= ?(Source.CashCurrency = NationalCurrency, "51", "52");</BeforeExport>
						</Property>
						<Property>
							<Code>29</Code>
							<Description>BasisDocument --&gt; BasisDocument</Description>
							<Order>700</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="BasisDocument" Kind="Attribute"/>
						</Property>
						<Property>
							<Code>30</Code>
							<Description>CounterpartyAccount --&gt; CounterpartyAccount</Description>
							<Order>750</Order>
							<Source Name="CounterpartyAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="CounterpartyAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
							<BeforeExport>If (Source.OperationKind = Enums.OperationKindsPaymentExpense.Other
  OR Source.OperationKind = Enums.OperationKindsPaymentExpense.ToAdvanceHolder
  OR Source.OperationKind = Enums.OperationKindsPaymentExpense.Taxes)
   AND (ValueIsFilled(Source.BasisDocument)
   AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.CashTransferPlan")
   AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.PayrollSheet")
   AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.CashOutflowPlan")
   AND TypeOf(Source.BasisDocument) &lt;&gt; Type("DocumentRef.TaxAccrual")) Then
	If TypeOf(Source.BasisDocument) = Type("DocumentRef.PaymentOrder") Then
		Value = Source.BasisDocument.CounterpartyAccount;
	Else
		Value = Source.BasisDocument.Counterparty.BankAccountByDefault;
	EndIf;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>37</Code>
							<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
							<Order>800</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>
If Source.OperationKind = Enums.OperationKindsPaymentExpense.Taxes
	OR Source.OperationKind = Enums.OperationKindsPaymentExpense.Other Then
	
	If ValueIsFilled(Source.Item.CorrespondingAccount) Then
		Value = Source.Item.CorrespondingAccount;
	Else
		AccountingRecord = "";
		Operation =  Source.Correspondence;
		Document = Source;
		Execute(Algorithms.DefineAccountingAccountByOperation);
		Value = AccountingRecord;
	EndIf;
Else
	Value = "";	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>32</Code>
							<Description>IncomingDocumentDate --&gt; IncomingDocumentDate</Description>
							<Order>850</Order>
							<Source Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
							<Receiver Name="IncomingDocumentDate" Kind="Attribute" Type="Date"/>
						</Property>
						<Property>
							<Code>33</Code>
							<Description>PaymentDestination --&gt; PaymentDestination</Description>
							<Order>900</Order>
							<Source Name="PaymentDestination" Kind="Attribute" Type="String"/>
							<Receiver Name="PaymentDestination" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>34</Code>
							<Description>IncomingDocumentNumber --&gt; IncomingDocumentNumber</Description>
							<Order>950</Order>
							<Source Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
							<Receiver Name="IncomingDocumentNumber" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>35</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>1000</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>10</Code>
							<Description>PaymentDetails --&gt; PaymentDetails</Description>
							<Order>1050</Order>
							<Source Name="PaymentDetails" Kind="TabularSection"/>
							<Receiver Name="PaymentDetails" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.OperationKind &lt;&gt; Enums.OperationKindsPaymentExpense.Vendor
	AND Source.OperationKind &lt;&gt; Enums.OperationKindsPaymentExpense.ToCustomer Then
	
	Cancel = True;
EndIf;</BeforeProcessExport>
							<Property>
								<Code>11</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>50</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>If Source.VATTaxation = Enums.VATTaxationTypes.NotTaxableByVAT
	AND Source.PaymentDetails.Count() = 1 Then
	Value = "WithoutVAT";	
Else
	Execute(Algorithms.FillVatRateTableParts);
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>100</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
								<BeforeExport>If Source.VATTaxation = Enums.VATTaxationTypes.NotTaxableByVAT
	AND Source.PaymentDetails.Count() = 1 Then
	Value = 0;	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>PaymentAmount --&gt; PaymentAmount</Description>
								<Order>150</Order>
								<Source Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="PaymentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>200</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsPaymentExpense.Vendor
	OR Source.OperationKind = Enums.OperationKindsPaymentExpense.ToCustomer Then
	
	Execute(Algorithms.BuildingStructureOfContractCounterparty);
	
Else
	
	Empty = True;
	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>250</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>300</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>350</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>28</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>400</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>31</Code>
								<Description> --&gt; BackPayMethod</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="BackPayMethod" Kind="Attribute" Type="EnumRef.DebtPaymentMethods"/>
								<BeforeExport>If CollectionObject.AdvanceFlag Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.DoNotRepay";
ElsIf ValueIsFilled(CollectionObject.Document) Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.ByDocument";
Else
	Expression = "Enums.MethodsOfRepaymentOfDebt.automatically";
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>36</Code>
								<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
								<BeforeExport>
If Source.OperationKind = Enums.OperationKindsPaymentExpense.Taxes
	OR Source.OperationKind = Enums.OperationKindsPaymentExpense.Other Then
	
	If ValueIsFilled(Source.Item.CorrespondingAccount) Then
		Value = Source.Item.CorrespondingAccount;
	Else
		AccountingRecord = "";
		Operation =  Source.Correspondence;
		Document = Source;
		Execute(Algorithms.DefineAccountingAccountByOperation);
		Value = AccountingRecord;
	EndIf;
Else
	Value = "";	
EndIf;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ExpenseCashOrder</Code>
					<Description>Document: Expense from PettyCashes</Description>
					<Order>150</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;
	
	If Object.OperationKind = Enums.OperationKindsRKO.OtherExpense
		AND Not ValueIsFilled(Object.ExtraDimensionDr1) Then
		
		Object.ExtraDimensionDr1 = CommonUseClientServer.PredefinedItem("Catalog.OtherIncomeAndExpenses.OtherExtraordinaryExpensesIncomes");
		
	EndIf;
	
	If Object.OperationKind = Enums.OperationKindsRKO.SettlementsByCreditsAndLoans Then
		If Object.PaymentDetails.Count()=0 Then
			StringPayment = Object.PaymentDetails.Add();
			StringPayment.PaymentAmount = Object.DocumentAmount;
		ElsIf Object.PaymentDetails.Count() = 1 Then
			Object.PaymentDetails[0].PaymentAmount = Object.DocumentAmount;
		EndIf;
	EndIf;

	For Each CurRow IN Object.PaymentDetails Do 
		
		CurRow.CashFlowItem = Object.CashFlowItem;
		CurRow.BackPayMethod	= ?(ValueIsFilled(CurRow.Deal), 
			Enums.MethodsOfRepaymentOfDebt.ByDocument, 
			CurRow.BackPayMethod);

		//Fill in the accounts of the counterparty settlements.
		If ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
			Continue;
		EndIf;
		
		If Object.OperationKind = Enums.OperationKindsRKO.SettlementsByCreditsAndLoans Then
			CurRow.GlAccountSettlementsWithCounterparties = Object.GlAccountSettlementsWithCounterparties;
			Continue;
		EndIf;

		GLAccounts = New Structure("CounterpartySettlementsGlAccount,SettlementsOnAdvancesGlAccount");

		AccountsStructure = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(
			Object.Company, Object.Counterparty, CurRow.CounterpartyContract);

		If Object.OperationKind = Enums.OperationKindsRKO.VendorsPayment Then
			
			If Not ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
				CurRow.GlAccountSettlementsWithCounterparties	= AccountsStructure.AccountCalculations;
			EndIf;
			
			If Not ValueIsFilled(CurRow.GlAccountCalculationsOnAdvances) Then
				CurRow.GlAccountCalculationsOnAdvances		= AccountsStructure.AccountAdvances;
			EndIf;
			
		Else
			
			If Not ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
				CurRow.GlAccountSettlementsWithCounterparties	= AccountsStructure.CustomerCalculationsAccount;
			EndIf;
			
			If Not ValueIsFilled(CurRow.GlAccountCalculationsOnAdvances) Then
				CurRow.GlAccountCalculationsOnAdvances		= AccountsStructure.AccountAdvancesCustomer;
			EndIf;
			
		EndIf;
		
	EndDo;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
					<Source>DocumentRef.CashPayment</Source>
					<Receiver>DocumentRef.ExpenseCashOrder</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationsKindsCashPayment"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.GEOperationKinds"/>
							<ConversionRuleCode>OperationKindsRKO                                   </ConversionRuleCode>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsCashPayment.Other Then
	TypeOfAccount = CommonUse.ObjectAttributeValue(Source.Correspondence, "TypeOfAccount");
	If TypeOfAccount = Enums.GLAccountsTypes.CreditsAndLoans
		OR TypeOfAccount = Enums.GLAccountsTypes.LongtermObligations Then
		Value = "SettlementsByCreditsAndLoans";
		OCRName = "";
	EndIf;
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>Issue --&gt; Issue</Description>
							<Order>100</Order>
							<Source Name="Issue" Kind="Attribute" Type="String"/>
							<Receiver Name="Issue" Kind="Attribute" Type="String"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Date --&gt; Date</Description>
							<Order>150</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>200</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute"/>
							<BeforeExport>If (Source.OperationKind = Enums.OperationKindsCashPayment.ToAdvanceHolder
	OR Source.OperationKind = Enums.OperationKindsCashPayment.SalaryForEmployee) Then
	
	Value = CommonUse.GetAttributeValue(Source.AdvanceHolder, "Ind");
	OCRName = "Individuals";
EndIf;</BeforeExport>
						</Property>
						<Property Disable="true" Search="true">
							<Code>6</Code>
							<Description>Number --&gt; Number</Description>
							<Order>250</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Company --&gt; Company</Description>
							<Order>300</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Basis --&gt; Basis</Description>
							<Order>350</Order>
							<Source Name="Basis" Kind="Attribute" Type="String"/>
							<Receiver Name="Basis" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>400</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>Application --&gt; Application</Description>
							<Order>450</Order>
							<Source Name="Application" Kind="Attribute" Type="String"/>
							<Receiver Name="Application" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>500</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>550</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>37</Code>
							<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
							<Order>600</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>
If Source.OperationKind = Enums.OperationKindsCashPayment.Taxes
	OR Source.OperationKind = Enums.OperationKindsCashPayment.Other Then
	
	If ValueIsFilled(Source.Item.CorrespondingAccount) Then
		Value = Source.Item.CorrespondingAccount;
	Else
		AccountingRecord = "";
		Operation =  Source.Correspondence;
		Document = Source;
		Execute(Algorithms.DefineAccountingAccountByOperation);
		Value = AccountingRecord;
	EndIf;
Else
	Value = "";	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>19</Code>
							<Description>CashCurrency --&gt; DocumentCurrency</Description>
							<Order>650</Order>
							<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>20</Code>
							<Description>Item --&gt; CashFlowItem</Description>
							<Order>700</Order>
							<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>26</Code>
							<Description> --&gt; PettyCash</Description>
							<Order>750</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="PettyCash" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>NationalCurrency	= Constants.NationalCurrency.Get();
Value			= ?(Source.CashCurrency = NationalCurrency, "50.01", "50.21");</BeforeExport>
						</Property>
						<Property>
							<Code>27</Code>
							<Description>ByDocument --&gt; ByDocument</Description>
							<Order>800</Order>
							<Source Name="ByDocument" Kind="Attribute" Type="String"/>
							<Receiver Name="ByDocument" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>28</Code>
							<Description>BasisDocument --&gt; BasisDocument</Description>
							<Order>850</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="BasisDocument" Kind="Attribute"/>
						</Property>
						<Property>
							<Code>33</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>900</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>34</Code>
							<Description>ReceiptCRNumber --&gt; ReceiptCRNumber</Description>
							<Order>950</Order>
							<Source Name="ReceiptCRNumber" Kind="Attribute" Type="Number"/>
							<Receiver Name="ReceiptCRNumber" Kind="Attribute" Type="Number"/>
						</Property>
						<Group>
							<Code>15</Code>
							<Description>PaymentDetails --&gt; PaymentDetails</Description>
							<Order>1000</Order>
							<Source Name="PaymentDetails" Kind="TabularSection"/>
							<Receiver Name="PaymentDetails" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.OperationKind &lt;&gt; Enums.OperationKindsCashPayment.ToCustomer
	AND Source.OperationKind &lt;&gt; Enums.OperationKindsCashPayment.Vendor Then
	
	Cancel = True;
EndIf;</BeforeProcessExport>
							<Property>
								<Code>16</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>50</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>If Source.VATTaxation = Enums.VATTaxationTypes.NotTaxableByVAT
	AND Source.PaymentDetails.Count() = 1 Then
	Value = "WithoutVAT";	
Else
	Execute(Algorithms.FillVatRateTableParts);
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>100</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
								<BeforeExport>If Source.VATTaxation = Enums.VATTaxationTypes.NotTaxableByVAT
	AND Source.PaymentDetails.Count() = 1 Then
	Value = 0;	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>18</Code>
								<Description>PaymentAmount --&gt; PaymentAmount</Description>
								<Order>150</Order>
								<Source Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="PaymentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>200</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsCashPayment.Vendor
	OR Source.OperationKind = Enums.OperationKindsCashPayment.ToCustomer Then
	
	Execute(Algorithms.BuildingStructureOfContractCounterparty);
	
Else
	
	Empty = True;
	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>250</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>300</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>350</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>29</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>400</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>35</Code>
								<Description> --&gt; BackPayMethod</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="BackPayMethod" Kind="Attribute" Type="EnumRef.DebtPaymentMethods"/>
								<BeforeExport>If CollectionObject.AdvanceFlag Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.DoNotRepay";
ElsIf ValueIsFilled(CollectionObject.Document) Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.ByDocument";
Else
	Expression = "Enums.MethodsOfRepaymentOfDebt.automatically";
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>36</Code>
								<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
								<BeforeExport>
If Source.OperationKind = Enums.OperationKindsCashPayment.Taxes
	OR Source.OperationKind = Enums.OperationKindsCashPayment.Other Then
	
	If ValueIsFilled(Source.Item.CorrespondingAccount) Then
		Value = Source.Item.CorrespondingAccount;
	Else
		AccountingRecord = "";
		Operation =  Source.Correspondence;
		Document = Source;
		Execute(Algorithms.DefineAccountingAccountByOperation);
		Value = AccountingRecord;
	EndIf;
Else
	Value = "";	
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>31</Code>
							<Description>PayrollPayment --&gt; PayrollPayment</Description>
							<Order>1050</Order>
							<Source Name="PayrollPayment" Kind="TabularSection"/>
							<Receiver Name="PayrollPayment" Kind="TabularSection"/>
							<Property>
								<Code>32</Code>
								<Description>PaymentAmount --&gt; AmountToPayment</Description>
								<Order>50</Order>
								<Source Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountToPayment" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReceiptCashOrder</Code>
					<Description>Document: Cash receipt</Description>
					<Order>200</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Company) Then
		Object.Company = Parameters.MainCompany;
	EndIf;
	
	If Object.OperationKind = Enums.OCROperationsKinds.OtherIncome
		AND Not ValueIsFilled(Object.ExtDimensionCr1) Then
		
		Object.ExtDimensionCr1 = CommonUseClientServer.PredefinedItem("Catalog.OtherIncomeAndExpenses.OtherExtraordinaryExpensesIncomes");
		
	EndIf;

	If Object.OperationKind = Enums.OCROperationsKinds.SettlementsByCreditsAndLoans Then
		If Object.PaymentDetails.Count()=0 Then
			StringPayment = Object.PaymentDetails.Add();
			StringPayment.PaymentAmount = Object.DocumentAmount;
		ElsIf Object.PaymentDetails.Count() = 1 Then
			Object.PaymentDetails[0].PaymentAmount = Object.DocumentAmount;
		EndIf;
	EndIf;
	
	For Each CurRow IN Object.PaymentDetails Do
		
		CurRow.CashFlowItem = Object.CashFlowItem;
		CurRow.BackPayMethod	= ?(ValueIsFilled(CurRow.Deal), 
			Enums.MethodsOfRepaymentOfDebt.ByDocument, 
			CurRow.BackPayMethod);
		
		If ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
			Continue;
		EndIf;
		
		If Object.OperationKind = Enums.OCROperationsKinds.SettlementsByCreditsAndLoans Then
			CurRow.GlAccountSettlementsWithCounterparties = Object.GlAccountSettlementsWithCounterparties;
			Continue;
		EndIf;
		
		//Fill in accounts of the counterparties settlements
		GLAccounts = New Structure("CounterpartySettlementsGlAccount,SettlementsOnAdvancesGlAccount");

		AccountsStructure = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(
			Object.Company, Object.Counterparty, CurRow.CounterpartyContract);

		If Object.OperationKind = Enums.OCROperationsKinds.ReturnFromVendor Then
			
			If Not ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
				CurRow.GlAccountSettlementsWithCounterparties	= AccountsStructure.AccountCalculations;
			EndIf;
			
			If Not ValueIsFilled(CurRow.GlAccountCalculationsOnAdvances) Then
				CurRow.GlAccountCalculationsOnAdvances		= AccountsStructure.AccountAdvances;
			EndIf;
			
		Else
			
			If Not ValueIsFilled(CurRow.GlAccountSettlementsWithCounterparties) Then
				CurRow.GlAccountSettlementsWithCounterparties	= AccountsStructure.CustomerCalculationsAccount;
			EndIf;
			
			If Not ValueIsFilled(CurRow.GlAccountCalculationsOnAdvances) Then
				CurRow.GlAccountCalculationsOnAdvances		= AccountsStructure.AccountAdvancesCustomer;
			EndIf;
			
		EndIf;
		
	EndDo;
	
	Execute(Algorithms.HandleCounterpartyContract);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
					<Source>DocumentRef.CashReceipt</Source>
					<Receiver>DocumentRef.ReceiptCashOrder</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationsKindsCashReceipt"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.CROperationsKinds"/>
							<ConversionRuleCode>OCROperationsKinds                                   </ConversionRuleCode>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsCashReceipt.Other Then
	TypeOfAccount = CommonUse.ObjectAttributeValue(Source.Correspondence, "TypeOfAccount");
	If TypeOfAccount = Enums.GLAccountsTypes.CreditsAndLoans
		OR TypeOfAccount = Enums.GLAccountsTypes.LongtermObligations Then
		Value = "SettlementsByCreditsAndLoans";
		OCRName = "";
	EndIf;
EndIf;</BeforeExport>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>150</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute"/>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsCashReceipt.FromAdvanceHolder Then
	Value = CommonUse.GetAttributeValue(Source.AdvanceHolder, "Ind");
	OCRName = "Individuals";
ElsIf Source.OperationKind = Enums.OperationKindsCashReceipt.RetailIncome Then
	Value = CommonUse.GetAttributeValue(Source.CashCR, "StructuralUnit");
	OCRName = "Warehouses";
ElsIf Source.OperationKind = Enums.OperationKindsCashReceipt.RetailIncomeAccrualAccounting Then
	Value = Source.StructuralUnit;
	OCRName = "Warehouses";
EndIf;</BeforeExport>
						</Property>
						<Property Disable="true" Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>200</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Company --&gt; Company</Description>
							<Order>250</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Basis --&gt; Basis</Description>
							<Order>300</Order>
							<Source Name="Basis" Kind="Attribute" Type="String"/>
							<Receiver Name="Basis" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>350</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Application --&gt; Application</Description>
							<Order>400</Order>
							<Source Name="Application" Kind="Attribute" Type="String"/>
							<Receiver Name="Application" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>AcceptedFrom --&gt; AcceptedFrom</Description>
							<Order>450</Order>
							<Source Name="AcceptedFrom" Kind="Attribute" Type="String"/>
							<Receiver Name="AcceptedFrom" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>500</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>550</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>31</Code>
							<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
							<Order>600</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>
If Source.OperationKind = Enums.OperationKindsCashReceipt.CurrencyPurchase
	OR Source.OperationKind = Enums.OperationKindsCashReceipt.Other Then
	
	If ValueIsFilled(Source.Item.CorrespondingAccount) Then
		Value = Source.Item.CorrespondingAccount;
	Else
		AccountingRecord = "";
		Operation =  Source.Correspondence;
		Document = Source;
		Execute(Algorithms.DefineAccountingAccountByOperation);
		Value = AccountingRecord;
	EndIf;
Else
	Value = "";	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>18</Code>
							<Description>CashCurrency --&gt; DocumentCurrency</Description>
							<Order>650</Order>
							<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>19</Code>
							<Description>Item --&gt; CashFlowItem</Description>
							<Order>700</Order>
							<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
							<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
						</Property>
						<Property>
							<Code>20</Code>
							<Description> --&gt; PettyCash</Description>
							<Order>750</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="PettyCash" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
							<BeforeExport>NationalCurrency	= Constants.NationalCurrency.Get();
Value			= ?(Source.CashCurrency = NationalCurrency, "50.01", "50.21");</BeforeExport>
						</Property>
						<Property>
							<Code>26</Code>
							<Description>BasisDocument --&gt; BasisDocument</Description>
							<Order>800</Order>
							<Source Name="BasisDocument" Kind="Attribute"/>
							<Receiver Name="BasisDocument" Kind="Attribute"/>
						</Property>
						<Property>
							<Code>29</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>850</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>28</Code>
							<Description>ReceiptCRNumber --&gt; ReceiptCRNumber</Description>
							<Order>900</Order>
							<Source Name="ReceiptCRNumber" Kind="Attribute" Type="Number"/>
							<Receiver Name="ReceiptCRNumber" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>32</Code>
							<Description> --&gt; RevenueSNTT</Description>
							<Order>950</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="RevenueSNTT" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>If CommonUse.GetAttributeValue(Source.CashCR, "CashCRType") = Enums.CashCRTypes.FiscalRegister Then
	Value = False;
Else
	Value = True;
EndIf;</BeforeExport>
						</Property>
						<Group>
							<Code>13</Code>
							<Description>PaymentDetails --&gt; PaymentDetails</Description>
							<Order>1000</Order>
							<Source Name="PaymentDetails" Kind="TabularSection"/>
							<Receiver Name="PaymentDetails" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.OperationKind &lt;&gt; Enums.OperationKindsCashReceipt.FromCustomer
	AND Source.OperationKind &lt;&gt; Enums.OperationKindsCashReceipt.FromVendor
	AND Source.OperationKind &lt;&gt; Enums.OperationKindsCashReceipt.RetailIncome
	AND Source.OperationKind &lt;&gt; Enums.OperationKindsCashReceipt.RetailIncomeAccrualAccounting Then
	
	Cancel = True;
EndIf;</BeforeProcessExport>
							<Property>
								<Code>14</Code>
								<Description>VATRate --&gt; VATRate</Description>
								<Order>50</Order>
								<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
								<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
								<BeforeExport>If Source.VATTaxation = Enums.VATTaxationTypes.NotTaxableByVAT
	AND Source.PaymentDetails.Count() = 1 Then
	Value = "WithoutVAT";	
Else
	Execute(Algorithms.FillVatRateTableParts);
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>VATAmount --&gt; VATAmount</Description>
								<Order>100</Order>
								<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
								<BeforeExport>If Source.VATTaxation = Enums.VATTaxationTypes.NotTaxableByVAT
	AND Source.PaymentDetails.Count() = 1 Then
	Value = 0;	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>16</Code>
								<Description>PaymentAmount --&gt; PaymentAmount</Description>
								<Order>150</Order>
								<Source Name="PaymentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="PaymentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>InvoiceForPayment --&gt; InvoiceForPayment</Description>
								<Order>200</Order>
								<Source Name="InvoiceForPayment" Kind="Attribute"/>
								<Receiver Name="InvoiceForPayment" Kind="Attribute" Type="DocumentRef.QuotationToCustomer"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>250</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsCashReceipt.FromCustomer
	OR Source.OperationKind = Enums.OperationKindsCashReceipt.FromVendor Then
	
	Execute(Algorithms.BuildingStructureOfContractCounterparty);
	
Else
	
	Empty = True;
	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>22</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>300</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>350</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>400</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>450</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>27</Code>
								<Description> --&gt; BackPayMethod</Description>
								<Order>500</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="BackPayMethod" Kind="Attribute" Type="EnumRef.DebtPaymentMethods"/>
								<BeforeExport>If CollectionObject.AdvanceFlag Then
	Expression = "Enums.MethodsOfRepaymentOfDebt.DoNotRepay";
Else
	Expression = "Enums.MethodsOfRepaymentOfDebt.ByDocument";
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>30</Code>
								<Description> --&gt; GlAccountSettlementsWithCounterparties</Description>
								<Order>550</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="GlAccountSettlementsWithCounterparties" Kind="Attribute" Type="ChartOfAccountsRef.SelfSupporting"/>
								<BeforeExport>
If Source.OperationKind = Enums.OperationKindsCashReceipt.CurrencyPurchase
	OR Source.OperationKind = Enums.OperationKindsCashReceipt.Other Then
	
	If ValueIsFilled(Source.Item.CorrespondingAccount) Then
		Value = Source.Item.CorrespondingAccount;
	Else
		AccountingRecord = "";
		Operation =  Source.Correspondence;
		Document = Source;
		Execute(Algorithms.DefineAccountingAccountByOperation);
		Value = AccountingRecord;
	EndIf;
Else
	Value = "";	
EndIf;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>PaymentOrder</Code>
					<Description>Document: Payment Instruction</Description>
					<Order>250</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	OperationKind = Enums.OperationCashWithdrawalOfKinds.VendorsPayment;
	If ObjectParameters &lt;&gt; Undefined Then
		
		ParameterOperationKind = ObjectParameters["OperationKind"];
		If ValueIsFilled(ParameterOperationKind)
			AND ParameterOperationKind = "TaxTransfer" Then
			OperationKind = Enums.OperationCashWithdrawalOfKinds.TaxTransfer;
		EndIf;
		
	EndIf;
	
	If Not ValueIsFilled(Object.OperationKind)
		OR (OperationKind = Enums.OperationCashWithdrawalOfKinds.TaxTransfer AND Object.OperationKind &lt;&gt; OperationKind) Then
		Object.OperationKind = OperationKind;
	EndIf;
	
	NewRow = Parameters.ImportedObjectsTable.Add();
	NewRow.ImportingObject = Object;
	NewRow.ObjectParameters  = ObjectParameters;
	NewRow.Ref = Refs;
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.PaymentOrder</Source>
					<Receiver>DocumentRef.PaymentOrder</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>TransferToBudgetKind --&gt; TransferToBudgetKind</Description>
							<Order>50</Order>
							<Source Name="TransferToBudgetKind" Kind="Attribute" Type="EnumRef.TransferToBudgetKinds"/>
							<Receiver Name="TransferToBudgetKind" Kind="Attribute" Type="EnumRef.TransferToBudgetKinds"/>
							<ConversionRuleCode>BudgetTransferKinds                           </ConversionRuleCode>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>PaymentKind --&gt; PaymentKind</Description>
							<Order>100</Order>
							<Source Name="PaymentKind" Kind="Attribute" Type="String"/>
							<Receiver Name="PaymentKind" Kind="Attribute" Type="String"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Date --&gt; Date</Description>
							<Order>150</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>PayerTIN --&gt; PayerTIN</Description>
							<Order>200</Order>
							<Source Name="PayerTIN" Kind="Attribute" Type="String"/>
							<Receiver Name="PayerTIN" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>PayeeTIN --&gt; PayeeTIN</Description>
							<Order>250</Order>
							<Source Name="PayeeTIN" Kind="Attribute" Type="String"/>
							<Receiver Name="PayeeTIN" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>BKCode --&gt; BKCode</Description>
							<Order>300</Order>
							<Source Name="BKCode" Kind="Attribute" Type="String"/>
							<Receiver Name="BKCode" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>OKATOCode --&gt; OKATOCode</Description>
							<Order>350</Order>
							<Source Name="OKATOCode" Kind="Attribute" Type="String"/>
							<Receiver Name="OKATOCode" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>400</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Counterparty --&gt; Counterparty</Description>
							<Order>450</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="Counterparty" Kind="Attribute"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>PayerKPP --&gt; PayerKPP</Description>
							<Order>500</Order>
							<Source Name="PayerKPP" Kind="Attribute" Type="String"/>
							<Receiver Name="PayerKPP" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>PayeeKPP --&gt; PayeeKPP</Description>
							<Order>550</Order>
							<Source Name="PayeeKPP" Kind="Attribute" Type="String"/>
							<Receiver Name="PayeeKPP" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>12</Code>
							<Description>PaymentDestination --&gt; PaymentDestination</Description>
							<Order>600</Order>
							<Source Name="PaymentDestination" Kind="Attribute" Type="String"/>
							<Receiver Name="PaymentDestination" Kind="Attribute" Type="String"/>
						</Property>
						<Property Search="true">
							<Code>13</Code>
							<Description>Number --&gt; Number</Description>
							<Order>650</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>14</Code>
							<Description>Company --&gt; Company</Description>
							<Order>700</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>PaymentPriority --&gt; PaymentPriority</Description>
							<Order>750</Order>
							<Source Name="PaymentPriority" Kind="Attribute" Type="Number"/>
							<Receiver Name="PaymentPriority" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>16</Code>
							<Description>DateIndicator --&gt; DateIndicator</Description>
							<Order>800</Order>
							<Source Name="DateIndicator" Kind="Attribute" Type="Date"/>
							<Receiver Name="DateIndicator" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>17</Code>
							<Description>NumberIndicator --&gt; NumberIndicator</Description>
							<Order>850</Order>
							<Source Name="NumberIndicator" Kind="Attribute" Type="String"/>
							<Receiver Name="NumberIndicator" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>18</Code>
							<Description>BasisIndicator --&gt; BasisIndicator</Description>
							<Order>900</Order>
							<Source Name="BasisIndicator" Kind="Attribute" Type="String"/>
							<Receiver Name="BasisIndicator" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>19</Code>
							<Description>PeriodIndicator --&gt; PeriodIndicator</Description>
							<Order>950</Order>
							<Source Name="PeriodIndicator" Kind="Attribute" Type="String"/>
							<Receiver Name="PeriodIndicator" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>20</Code>
							<Description>TypeIndicator --&gt; TypeIndicator</Description>
							<Order>1000</Order>
							<Source Name="TypeIndicator" Kind="Attribute" Type="String"/>
							<Receiver Name="TypeIndicator" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>21</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>1050</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>22</Code>
							<Description>VATRate --&gt; VATRate</Description>
							<Order>1100</Order>
							<Source Name="VATRate" Kind="Attribute" Type="CatalogRef.VATRates"/>
							<Receiver Name="VATRate" Kind="Attribute" Type="EnumRef.VATRates"/>
							<BeforeExport>Execute(Algorithms.FillInVatRateCaps);</BeforeExport>
						</Property>
						<Property>
							<Code>23</Code>
							<Description>AuthorStatus --&gt; AuthorStatus</Description>
							<Order>1150</Order>
							<Source Name="AuthorStatus" Kind="Attribute" Type="String"/>
							<Receiver Name="AuthorStatus" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>24</Code>
							<Description>DocumentAmount --&gt; DocumentAmount</Description>
							<Order>1200</Order>
							<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>25</Code>
							<Description>VATAmount --&gt; VATAmount</Description>
							<Order>1250</Order>
							<Source Name="VATAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="VATAmount" Kind="Attribute" Type="Number"/>
						</Property>
						<Property>
							<Code>26</Code>
							<Description>CounterpartyAccount --&gt; CounterpartyAccount</Description>
							<Order>1300</Order>
							<Source Name="CounterpartyAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="CounterpartyAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
						</Property>
						<Property>
							<Code>27</Code>
							<Description>PayerText --&gt; PayerText</Description>
							<Order>1350</Order>
							<Source Name="PayerText" Kind="Attribute" Type="String"/>
							<Receiver Name="PayerText" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>28</Code>
							<Description>PayeeText --&gt; PayeeText</Description>
							<Order>1400</Order>
							<Source Name="PayeeText" Kind="Attribute" Type="String"/>
							<Receiver Name="PayeeText" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>29</Code>
							<Description>BankAccount --&gt; AccountOfCompany</Description>
							<Order>1450</Order>
							<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<Receiver Name="AccountOfCompany" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
							<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
						</Property>
						<Property>
							<Code>30</Code>
							<Description> --&gt; PaymentToBudget</Description>
							<Order>1500</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="PaymentToBudget" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = Source.OperationKind = Enums.OperationKindsPaymentOrder.TaxTransfer;</BeforeExport>
						</Property>
						<Property>
							<Code>31</Code>
							<Description> --&gt; DocumentCurrency</Description>
							<Order>1550</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
							<BeforeExport>Value = Source.BankAccount.CashCurrency;</BeforeExport>
						</Property>
						<Property>
							<Code>32</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>1600</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationsKindsPaymentOrder"/>
							<Receiver Name="" Kind=""/>
							<ParameterForTransferName>OperationKind</ParameterForTransferName>
							<OnExport>If Source.OperationKind = Enums.OperationKindsPaymentOrder.TaxTransfer Then
	Value = "TaxTransfer";
Else
	Value = "Payment";
EndIf;

</OnExport>
						</Property>
						<Property>
							<Code>33</Code>
							<Description>Paid --&gt; Paid</Description>
							<Order>1650</Order>
							<Source Name="Paid" Kind="Attribute" Type="Boolean"/>
							<Receiver Name="Paid" Kind="Attribute" Type="Boolean"/>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Group>
					<Code>FundsTransfer</Code>
					<Description>FundsTransfer</Description>
					<Order>300</Order>
					<Rule>
						<Code>MovingDSReceiptCashOrder</Code>
						<Description>Document: Move money</Description>
						<Order>50</Order>
						<AfterImport>// fill in the GL accounts if they are not filled in 
If Not ValueIsFilled(Object.PettyCash) Then
	If Object.DocumentCurrency = Parameters.CurrencyOfRegulatedAccounting Then
		Object.PettyCash = ChartsOfAccounts.SelfSupporting.PettyCashCompanies;
	Else
		Object.PettyCash = ChartsOfAccounts.SelfSupporting.PettyCashCompaniesCur;
	EndIf;
EndIf;

If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
	If Object.DocumentCurrency = Parameters.CurrencyOfRegulatedAccounting Then
		Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.BankAccounts;
	Else
		Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.CurrencyAccounts;
	EndIf;
EndIf;</AfterImport>
						<SynchronizeByID>true</SynchronizeByID>
						<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
						<Source>DocumentRef.CashTransfer</Source>
						<Receiver>DocumentRef.ReceiptCashOrder</Receiver>
						<Properties>
							<Property>
								<Code>9</Code>
								<Description> --&gt; OperationKind</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.CROperationsKinds"/>
								<BeforeExport>Value = "ReceiptOfCashInBank";</BeforeExport>
							</Property>
							<Property Search="true">
								<Code>5</Code>
								<Description>Date --&gt; Date</Description>
								<Order>100</Order>
								<Source Name="Date" Kind="Property" Type="Date"/>
								<Receiver Name="Date" Kind="Property" Type="Date"/>
							</Property>
							<Property Disable="true" Search="true">
								<Code>6</Code>
								<Description>Number --&gt; Number</Description>
								<Order>150</Order>
								<Source Name="Number" Kind="Property" Type="String"/>
								<Receiver Name="Number" Kind="Property" Type="String"/>
							</Property>
							<Property>
								<Code>3</Code>
								<Description>Company --&gt; Company</Description>
								<Order>200</Order>
								<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<ConversionRuleCode>Companies                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>4</Code>
								<Description>DocumentAmount --&gt; DocumentAmount</Description>
								<Order>250</Order>
								<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>7</Code>
								<Description>DeletionMark --&gt; DeletionMark</Description>
								<Order>300</Order>
								<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
								<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>8</Code>
								<Description>Posted --&gt; Posted</Description>
								<Order>350</Order>
								<Source Name="Posted" Kind="Property" Type="Boolean"/>
								<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>2</Code>
								<Description>Comment --&gt; Comment</Description>
								<Order>400</Order>
								<Source Name="Comment" Kind="Attribute" Type="String"/>
								<Receiver Name="Comment" Kind="Attribute" Type="String"/>
							</Property>
							<Property>
								<Code>1</Code>
								<Description>BasisDocument --&gt; BasisDocument</Description>
								<Order>450</Order>
								<Source Name="BasisDocument" Kind="Attribute" Type="DocumentRef.CashTransferPlan"/>
								<Receiver Name="BasisDocument" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>CashCurrency --&gt; DocumentCurrency</Description>
								<Order>500</Order>
								<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>Item --&gt; CashFlowItem</Description>
								<Order>550</Order>
								<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>BankAccount --&gt; Counterparty</Description>
								<Order>600</Order>
								<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<Receiver Name="Counterparty" Kind="Attribute"/>
								<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
							</Property>
						</Properties>
						<Values/>
					</Rule>
					<Rule>
						<Code>MovingDCExpenseCashOrder</Code>
						<Description>Document: Move money</Description>
						<Order>100</Order>
						<AfterImport>// fill in the GL accounts if they are not filled in 
If Not ValueIsFilled(Object.PettyCash) Then
	If Object.DocumentCurrency = Parameters.CurrencyOfRegulatedAccounting Then
		Object.PettyCash = ChartsOfAccounts.SelfSupporting.PettyCashCompanies;
	Else
		Object.PettyCash = ChartsOfAccounts.SelfSupporting.PettyCashCompaniesCur;
	EndIf;
EndIf;

If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
	If Object.DocumentCurrency = Parameters.CurrencyOfRegulatedAccounting Then
		Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.BankAccounts;
	Else
		Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.CurrencyAccounts;
	EndIf;
EndIf;</AfterImport>
						<SynchronizeByID>true</SynchronizeByID>
						<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
						<Source>DocumentRef.CashTransfer</Source>
						<Receiver>DocumentRef.ExpenseCashOrder</Receiver>
						<Properties>
							<Property>
								<Code>14</Code>
								<Description> --&gt; OperationKind</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.GEOperationKinds"/>
								<BeforeExport>Value = "CashInBank";</BeforeExport>
							</Property>
							<Property Search="true">
								<Code>1</Code>
								<Description>Date --&gt; Date</Description>
								<Order>100</Order>
								<Source Name="Date" Kind="Property" Type="Date"/>
								<Receiver Name="Date" Kind="Property" Type="Date"/>
							</Property>
							<Property Disable="true" Search="true">
								<Code>4</Code>
								<Description>Number --&gt; Number</Description>
								<Order>150</Order>
								<Source Name="Number" Kind="Property" Type="String"/>
								<Receiver Name="Number" Kind="Property" Type="String"/>
							</Property>
							<Property>
								<Code>2</Code>
								<Description>BasisDocument --&gt; BasisDocument</Description>
								<Order>200</Order>
								<Source Name="BasisDocument" Kind="Attribute" Type="DocumentRef.CashTransferPlan"/>
								<Receiver Name="BasisDocument" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>3</Code>
								<Description>Comment --&gt; Comment</Description>
								<Order>250</Order>
								<Source Name="Comment" Kind="Attribute" Type="String"/>
								<Receiver Name="Comment" Kind="Attribute" Type="String"/>
							</Property>
							<Property>
								<Code>5</Code>
								<Description>Company --&gt; Company</Description>
								<Order>300</Order>
								<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<ConversionRuleCode>Companies                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>6</Code>
								<Description>DeletionMark --&gt; DeletionMark</Description>
								<Order>350</Order>
								<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
								<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>7</Code>
								<Description>Posted --&gt; Posted</Description>
								<Order>400</Order>
								<Source Name="Posted" Kind="Property" Type="Boolean"/>
								<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>8</Code>
								<Description>DocumentAmount --&gt; DocumentAmount</Description>
								<Order>450</Order>
								<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>9</Code>
								<Description>CashCurrency --&gt; DocumentCurrency</Description>
								<Order>500</Order>
								<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>BankAccountPayee --&gt; AccountOfCompany</Description>
								<Order>550</Order>
								<Source Name="BankAccountPayee" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<Receiver Name="AccountOfCompany" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>Item --&gt; CashFlowItem</Description>
								<Order>600</Order>
								<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
							</Property>
						</Properties>
						<Values/>
					</Rule>
					<Rule>
						<Code>MovingCADirectCurrentAccount</Code>
						<Description>Document: Move money</Description>
						<Order>200</Order>
						<AfterImport>// fill in the GL accounts if they are not filled in 
If Not ValueIsFilled(Object.AccountBank) Then
	If Object.DocumentCurrency = Parameters.CurrencyOfRegulatedAccounting Then
		Object.AccountBank = ChartsOfAccounts.SelfSupporting.BankAccounts;
	Else
		Object.AccountBank = ChartsOfAccounts.SelfSupporting.CurrencyAccounts;
	EndIf;
EndIf;

If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
	If Object.DocumentCurrency = Parameters.CurrencyOfRegulatedAccounting Then
		Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.BankAccounts;
	Else
		Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.CurrencyAccounts;
	EndIf;
EndIf;</AfterImport>
						<SynchronizeByID>true</SynchronizeByID>
						<Generatenewnumberorcodeifnotspecified>true</Generatenewnumberorcodeifnotspecified>
						<Source>DocumentRef.CashTransfer</Source>
						<Receiver>DocumentRef.WriteOffFromCurrentAccount</Receiver>
						<Properties>
							<Property>
								<Code>12</Code>
								<Description> --&gt; OperationKind</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsCashWithdrawal"/>
								<BeforeExport>Value = "TransferToAnotherAccount";</BeforeExport>
							</Property>
							<Property Search="true">
								<Code>1</Code>
								<Description>Date --&gt; Date</Description>
								<Order>100</Order>
								<Source Name="Date" Kind="Property" Type="Date"/>
								<Receiver Name="Date" Kind="Property" Type="Date"/>
							</Property>
							<Property Disable="true" Search="true">
								<Code>4</Code>
								<Description>Number --&gt; Number</Description>
								<Order>150</Order>
								<Source Name="Number" Kind="Property" Type="String"/>
								<Receiver Name="Number" Kind="Property" Type="String"/>
							</Property>
							<Property>
								<Code>2</Code>
								<Description>BasisDocument --&gt; BasisDocument</Description>
								<Order>200</Order>
								<Source Name="BasisDocument" Kind="Attribute" Type="DocumentRef.CashTransferPlan"/>
								<Receiver Name="BasisDocument" Kind="Attribute"/>
							</Property>
							<Property>
								<Code>3</Code>
								<Description>Comment --&gt; Comment</Description>
								<Order>250</Order>
								<Source Name="Comment" Kind="Attribute" Type="String"/>
								<Receiver Name="Comment" Kind="Attribute" Type="String"/>
							</Property>
							<Property>
								<Code>5</Code>
								<Description>Company --&gt; Company</Description>
								<Order>300</Order>
								<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
								<ConversionRuleCode>Companies                                       </ConversionRuleCode>
							</Property>
							<Property>
								<Code>6</Code>
								<Description>DeletionMark --&gt; DeletionMark</Description>
								<Order>350</Order>
								<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
								<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>7</Code>
								<Description>Posted --&gt; Posted</Description>
								<Order>400</Order>
								<Source Name="Posted" Kind="Property" Type="Boolean"/>
								<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>CashCurrency --&gt; DocumentCurrency</Description>
								<Order>450</Order>
								<Source Name="CashCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<Receiver Name="DocumentCurrency" Kind="Attribute" Type="CatalogRef.Currencies"/>
								<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
							</Property>
							<Property>
								<Code>8</Code>
								<Description>DocumentAmount --&gt; DocumentAmount</Description>
								<Order>500</Order>
								<Source Name="DocumentAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="DocumentAmount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>9</Code>
								<Description>Item --&gt; CashFlowItem</Description>
								<Order>550</Order>
								<Source Name="Item" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								<Receiver Name="CashFlowItem" Kind="Attribute" Type="CatalogRef.CashFlowItems"/>
								<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>BankAccount --&gt; AccountOfCompany</Description>
								<Order>600</Order>
								<Source Name="BankAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<Receiver Name="AccountOfCompany" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
							</Property>
							<Property>
								<Code>14</Code>
								<Description>BankAccountPayee --&gt; CounterpartyAccount</Description>
								<Order>650</Order>
								<Source Name="BankAccountPayee" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<Receiver Name="CounterpartyAccount" Kind="Attribute" Type="CatalogRef.BankAccounts"/>
								<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
							</Property>
						</Properties>
						<Values/>
					</Rule>
				</Group>
			</Group>
			<Group>
				<Code>WorksServicesProduction</Code>
				<Description>Documents. Works Services Production</Description>
				<Order>300</Order>
				<Rule>
					<Code>RequestInvoice</Code>
					<Description>Document: Move inventories</Description>
					<Order>50</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Not ValueIsFilled(Object.Counterparty)
		AND Object.ConsumerMaterials.Count() &gt; 0 Then
		
		If ObjectParameters &lt;&gt; Undefined Then
			ParametersOfTP = ObjectParameters.Get("ConsumerMaterialsTabularSection");
			Object.Counterparty = ParametersOfTP[0].Counterparty;
		EndIf;
		
	EndIf;
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryTransfer</Source>
					<Receiver>DocumentRef.RequestInvoice</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>300</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>StructuralUnitPayee --&gt; DivisionCost</Description>
							<Order>350</Order>
							<Source Name="StructuralUnitPayee" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="DivisionCost" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>14</Code>
							<Description> --&gt; GLAccountsCostInTable</Description>
							<Order>400</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="GLAccountsCostInTable" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = True;</BeforeExport>
						</Property>
						<Property>
							<Code>31</Code>
							<Description> --&gt; Counterparty</Description>
							<Order>450</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							<OnExport>If ValueIsFilled(Source.BasisDocument) 
	AND TypeOf(Source.BasisDocument) = Type("DocumentRef.SupplierInvoice") Then
	
	Value = CommonUse.GetAttributeValue(Source.BasisDocument, "Counterparty");
	
Else
	
	Cancel = True;
	
EndIf;</OnExport>
						</Property>
						<Property>
							<Code>30</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>500</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>10</Code>
							<Description>Inventory --&gt; Materials</Description>
							<Order>550</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Materials" Kind="TabularSection"/>
							<BeforeProcessExport>TableProducts = Source.Inventory.UnloadColumns();
SourceTable = Source.Inventory;

For Each CurRow IN SourceTable Do	
	If Not ValueIsFilled(CurRow.Batch)
		OR (ValueIsFilled(CurRow.Batch)
		   AND CurRow.Batch.Status &lt;&gt; Enums.BatchStatuses.CommissionMaterials) Then		
		NewRow = TableProducts.Add();
		FillPropertyValues(NewRow, CurRow);	
	EndIf;	
EndDo;

ObjectsCollection = TableProducts;</BeforeProcessExport>
							<Property>
								<Code>11</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>15</Code>
								<Description> --&gt; Count</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>16</Code>
								<Description> --&gt; Factor</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>23</Code>
								<Description>Batch --&gt; ProductOnCommission</Description>
								<Order>300</Order>
								<Source Name="Batch" Kind="Attribute" Type="CatalogRef.ProductsAndServicesBatches"/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductOnCommission</ParameterForTransferName>
								<BeforeExport>If ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.ProductsOnCommission Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>24</Code>
								<Description> --&gt; ProductsAndServicesCategory</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
								<BeforeExport>Value = CollectionObject.ProductsAndServices.ProductsAndServicesCategory;</BeforeExport>
							</Property>
							<Property>
								<Code>27</Code>
								<Description> --&gt; DivisionCost</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="DivisionCost" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
								<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
								<BeforeExport>Value = Source.StructuralUnitPayee;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>17</Code>
							<Description>Inventory --&gt; ConsumerMaterials</Description>
							<Order>600</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="ConsumerMaterials" Kind="TabularSection"/>
							<BeforeProcessExport>TableProducts = Source.Inventory.UnloadColumns();
SourceTable = Source.Inventory;

For Each CurRow IN SourceTable Do	
	If ValueIsFilled(CurRow.Batch)
	   AND CurRow.Batch.Status = Enums.BatchStatuses.CommissionMaterials Then	
		NewRow = TableProducts.Add();
		FillPropertyValues(NewRow, CurRow);	
	EndIf;	
EndDo;

ObjectsCollection = TableProducts;</BeforeProcessExport>
							<Property>
								<Code>18</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>21</Code>
								<Description> --&gt; Count</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>22</Code>
								<Description> --&gt; Factor</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>CustomerOrder --&gt; Counterparty</Description>
								<Order>600</Order>
								<Source Name="CustomerOrder" Kind="Attribute" Type="DocumentRef.CustomerOrder"/>
								<Receiver Name="" Kind=""/>
								<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
								<ParameterForTransferName>Counterparty</ParameterForTransferName>
								<BeforeExport>If ValueIsFilled(CollectionObject.Batch)
   AND ValueIsFilled(CollectionObject.Batch.BatchOwner) Then
   Value = CollectionObject.Batch.BatchOwner;
ElsIf ValueIsFilled(Source.CustomerOrder) Then
   Value = Source.CustomerOrder.Counterparty;
ElsIf ValueIsFilled(CollectionObject.CustomerOrder) Then
   Value = CollectionObject.CustomerOrder.Counterparty;
Else
   Value = Undefined;
EndIf;</BeforeExport>
							</Property>
							<Property Disable="true">
								<Code>29</Code>
								<Description>Batch --&gt;</Description>
								<Order>650</Order>
								<Source Name="Batch" Kind="Attribute" Type="CatalogRef.ProductsAndServicesBatches"/>
								<Receiver Name="" Kind=""/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReportProductionShift</Code>
					<Description>Document: Assembly inventories</Description>
					<Order>100</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	ExchangeNodeForDataImport = Parameters.ExchangeNodeForDataImport;
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryAssembly</Source>
					<Receiver>DocumentRef.ReportProductionShift</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>22</Code>
							<Description>StructuralUnit --&gt; DivisionCost</Description>
							<Order>300</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="DivisionCost" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
							<BeforeExport>Cancel = Source.StructuralUnit.StructuralUnitType &lt;&gt; Enums.StructuralUnitsTypes.Division;</BeforeExport>
						</Property>
						<Property>
							<Code>38</Code>
							<Description>ProductsStructuralUnit --&gt; Warehouse</Description>
							<Order>350</Order>
							<Source Name="ProductsStructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>
Value = Source.InventoryStructuralUnit;
StructuralUnit = Value;
Execute(Algorithms.GetOCRForStructuralUnit);</BeforeExport>
						</Property>
						<Property>
							<Code>54</Code>
							<Description>InventoryStructuralUnit --&gt; Warehouse</Description>
							<Order>400</Order>
							<Source Name="InventoryStructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>
StructuralUnit = Source.InventoryStructuralUnit;
Execute(Algorithms.GetOCRForStructuralUnit);</BeforeExport>
						</Property>
						<Property>
							<Code>51</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>450</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>7</Code>
							<Description>Products --&gt; Products</Description>
							<Order>500</Order>
							<Source Name="Products" Kind="TabularSection"/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>
Query = New Query;
Query.SetParameter("Document", Source.Ref);
Query.SetParameter("Date", Source.Date);
Query.SetParameter("ReferenceCurrency", Parameters.NationalCurrency);
Query.SetParameter("SimpCurrency", Parameters.AccountingCurrency);
Query.Text = "SELECT
				|	MAX(InventoryAssemblyProducts.LineNumber) AS LineNumber,
				|	InventoryAssemblyProducts.Ref AS Document,
				|	InventoryAssemblyProducts.ProductsAndServices,
				|	InventoryAssemblyProducts.ProductsAndServices.ProductsAndServicesCategory AS ProductsAndServicesCategory,
				|	InventoryAssemblyProducts.Specification,
				|	SUM(InventoryAssemblyProducts.Quantity) AS PlacesQuantity,
				|	SUM(CASE
				|			WHEN VALUETYPE(InventoryAssemblyProducts.MeasurementUnit) = Type(Catalog.UOM)
				|					AND InventoryAssemblyProducts.MeasurementUnit.Factor &gt; 0
				|				THEN InventoryAssemblyProducts.Count * InventoryAssemblyProducts.MeasurementUnit.Factor
				|			ELSE InventoryAssemblyProducts.Count
				|		END) AS Count,
				|	CASE
				|		WHEN InventoryAssemblyProducts.MeasurementUnit REFS Catalog.UOM
				|			THEN InventoryAssemblyProducts.ProductsAndServices.MeasurementUnit
				|		ELSE InventoryAssemblyProducts.MeasurementUnit
				|	END AS MeasurementUnit,
				|	CASE
				|		WHEN InventoryAssemblyProducts.MeasurementUnit REFS Catalog.UOM
				|			THEN InventoryAssemblyProducts.MeasurementUnit.Factor
				|		ELSE 1
				|	END AS Factor
				|INTO TemporaryTableProduction
				|FROM
				|	Document.InventoryAssembly.Products AS InventoryAssemblyProducts
				|WHERE
				|	InventoryAssemblyProducts.Ref = &amp;Document
				|
				|GROUP BY
				|	InventoryAssemblyProducts.Specification,
				|	InventoryAssemblyProducts.ProductsAndServices,
				|	InventoryAssemblyProducts.Ref,
				|	CASE
				|		WHEN InventoryAssemblyProducts.MeasurementUnit REFS Catalog.UOM
				|			THEN InventoryAssemblyProducts.MeasurementUnit.Factor
				|		ELSE 1
				|	END,
				|	CASE
				|		WHEN InventoryAssemblyProducts.MeasurementUnit REFS Catalog.UOM
				|			THEN InventoryAssemblyProducts.ProductsAndServices.MeasurementUnit
				|		ELSE InventoryAssemblyProducts.MeasurementUnit
				|	END,
				|	InventoryAssemblyProducts.ProductsAndServices.ProductsAndServicesCategory
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|SELECT ALLOWED
				|	Inventory.Recorder,
				|	Inventory.ProductsAndServicesCorr AS Products,
				|	Inventory.SpecificationCorr AS ProductionSpecification,
				|	SUM(Inventory.Amount * CASE
				|			WHEN &amp;ReferenceCurrency &lt;&gt; &amp;SimpCurrency
				|				THEN CASE
				|						WHEN ISNULL(CurrencyRatesPrices.Multiplicity, 0) &gt; 0
				|								AND ISNULL(CurrencyRatesPrices.ExchangeRate, 0) &gt; 0
				|								AND ISNULL(CurrencyRatesCurrencies.Multiplicity, 0) &gt; 0
				|								AND ISNULL(CurrencyRatesCurrencies.ExchangeRate, 0) &gt; 0
				|							THEN CurrencyRatesPrices.ExchangeRate * CurrencyRatesCurrencies.Multiplicity / (CurrencyRatesCurrencies.ExchangeRate * CurrencyRatesPrices.Multiplicity)
				|						ELSE 0
				|					END
				|			ELSE 1
				|		END) AS CostAmount
				|INTO TemporaryTableCost
				|FROM
				|	AccumulationRegister.Inventory AS Inventory
				|		LEFT JOIN InformationRegister.CurrencyRates.SliceLast(&amp;Date, Currency = &amp;SimpCurrency) AS CurrencyRatesPrices
				|		BY (TRUE)
				|		LEFT JOIN InformationRegister.CurrencyRates.SliceLast(&amp;Date, Currency = &amp;ReferenceCurrency) AS CurrencyRatesCurrencies
				|		BY (TRUE)
				|WHERE
				|	Inventory.Recorder = &amp;Document
				|	AND Inventory.ProductionExpenses
				|	AND Inventory.RecordType = VALUE(AccumulationRecordType.Expense)
				|
				|GROUP BY
				|	Inventory.ProductsAndServicesCorr,
				|	Inventory.SpecificationCorr,
				|	Inventory.Recorder
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|SELECT
				|	TemporaryTableProduction.ProductsAndServices AS ProductsAndServices,
				|	TemporaryTableProduction.Specification AS Specification,
				|	TemporaryTableProduction.PlacesQuantity AS PlacesQuantity,
				|	TemporaryTableProduction.Count AS Count,
				|	CASE
				|		WHEN TemporaryTableCost.CostAmount IS NULL 
				|			THEN 0
				|		ELSE TemporaryTableCost.CostAmount / TemporaryTableProduction.Count
				|	END AS PlannedCost,
				|	TemporaryTableCost.CostAmount AS AmountOfPlanned,
				|	TemporaryTableProduction.ProductsAndServicesCategory AS ProductsAndServicesCategory,
				|	TemporaryTableProduction.MeasurementUnit AS MeasurementUnit,
				|	TemporaryTableProduction.Factor AS Factor
				|FROM
				|	TemporaryTableProduction AS TemporaryTableProduction
				|		LEFT JOIN TemporaryTableCost AS TemporaryTableCost
				|		BY TemporaryTableProduction.Document = TemporaryTableCost.Recorder
				|			AND TemporaryTableProduction.ProductsAndServices = TemporaryTableCost.Products
				|			AND TemporaryTableProduction.Specification = TemporaryTableCost.ProductionSpecification
				|
				|ORDER BY
				|	TemporaryTableProduction.LineNumber";

If Source.OperationKind = Enums.OperationKindsInventoryAssembly.Disassembly Then
	Query.Text = StrReplace(Query.Text, "Document.InventoryAssembly.Products", "Document.InventoryAssembly.Inventory");
EndIf;

ObjectsCollection = Query.Execute().Unload();</BeforeProcessExport>
							<Property>
								<Code>8</Code>
								<Description> --&gt; MeasurementUnit</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>9</Code>
								<Description> --&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>10</Code>
								<Description> --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>11</Code>
								<Description> --&gt; Specification</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Specification" Kind="Attribute" Type="CatalogRef.ProductsAndServicesSpecifications"/>
								<ConversionRuleCode>SpecificationsProductsAndServices                          </ConversionRuleCode>
							</Property>
							<Property>
								<Code>23</Code>
								<Description> --&gt; Count</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>24</Code>
								<Description> --&gt; Factor</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>25</Code>
								<Description>--&gt; ProductsAndServicesCategory</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
								<BeforeExport>Value = CommonUse.GetAttributeValue(CollectionObject.ProductsAndServices, "ProductsAndServicesCategory");</BeforeExport>
							</Property>
							<Property>
								<Code>52</Code>
								<Description> --&gt; PlannedCost</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="PlannedCost" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>53</Code>
								<Description> --&gt; AmountOfPlanned</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="AmountOfPlanned" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
						<Group>
							<Code>40</Code>
							<Description>Inventory --&gt; Materials</Description>
							<Order>550</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Materials" Kind="TabularSection"/>
							<BeforeProcessExport>
Execute(Algorithms.GenerateMaterialsDistributionTable);</BeforeProcessExport>
							<Property>
								<Code>41</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>42</Code>
								<Description>Count --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>43</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>150</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>45</Code>
								<Description>MeasurementUnit --&gt; MeasurementUnit</Description>
								<Order>200</Order>
								<Source Name="MeasurementUnit" Kind="Attribute"/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>46</Code>
								<Description>--&gt; Factor</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>44</Code>
								<Description>--&gt; ProductsAndServicesCategory</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<BeforeExport>If Not ValueIsFilled(CollectionObject.ProductsAndServicesCategory) Then
	If Source.Products.Count() = 1 Then
		Value = CommonUse.GetAttributeValue(Source.Products[0].ProductsAndServices, "ProductsAndServicesCategory");
	Else
		Value = CommonUse.GetAttributeValue(CollectionObject.ProductsAndServices, "ProductsAndServicesCategory");
	EndIf;
EndIf;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>12</Code>
							<Description>Disposals --&gt; ReturnWaste</Description>
							<Order>600</Order>
							<Source Name="Disposals" Kind="TabularSection"/>
							<Receiver Name="ReturnWaste" Kind="TabularSection"/>
							<Property>
								<Code>14</Code>
								<Description>Count --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>150</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>27</Code>
								<Description>--&gt; ProductsAndServicesCategory</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
								<BeforeExport>If Not ValueIsFilled(Value) Then
	If Source.Products.Count() = 1 Then
		Value = CommonUse.GetAttributeValue(Source.Products[0].ProductsAndServices, "ProductsAndServicesCategory");
	Else
		Value = CommonUse.GetAttributeValue(CollectionObject.ProductsAndServices, "ProductsAndServicesCategory");
	EndIf;
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>37</Code>
								<Description>Batch --&gt; ProductInProcessing</Description>
								<Order>250</Order>
								<Source Name="Batch" Kind="Attribute" Type="CatalogRef.ProductsAndServicesBatches"/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>ProductInProcessing</ParameterForTransferName>
								<BeforeExport>If ValueIsFilled(CollectionObject.Batch)
   AND CollectionObject.Batch.Status = Enums.BatchStatuses.CommissionMaterials Then
	Value = True;
Else
	Value = False;
EndIf;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ProductionTransfer</Code>
					<Description>Document: Production</Description>
					<Order>150</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Object.IsNew()
		AND Object.Products.Count() = 0 Then
		
		Cancel = True;
		
	Else
		
		Object.VATInProductsCost = Enums.ActionVATInProductsCost.DontChange;
		Documents.ProductTransfer.FillGLAccountsInTabularSection(Object, "Products");
		
	EndIf;
	
EndIf;</AfterImport>
					<Source>DocumentRef.InventoryAssembly</Source>
					<Receiver>DocumentRef.ProductTransfer</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
							<OnExport>AdditPrefix = "PP";
Value = Left(Value, 5) + AdditPrefix + Mid(Value, 8);</OnExport>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>InventoryStructuralUnit --&gt; SourceWarehouse</Description>
							<Order>300</Order>
							<Source Name="InventoryStructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="SourceWarehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>
StructuralUnit = Source.InventoryStructuralUnit;
Execute(Algorithms.GetOCRForStructuralUnit);</BeforeExport>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>ProductsStructuralUnit --&gt; WarehouseRecipient</Description>
							<Order>350</Order>
							<Source Name="ProductsStructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="WarehouseRecipient" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>
StructuralUnit = Source.ProductsStructuralUnit;
Execute(Algorithms.GetOCRForStructuralUnit);</BeforeExport>
						</Property>
						<Group>
							<Code>9</Code>
							<Description>--&gt; Products</Description>
							<Order>450</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>
Query = New Query;
Query.SetParameter("Ref", Source.Ref);

Query.Text = "SELECT
				|	InventoryAssemblyProducts.ProductsAndServices AS ProductsAndServices,
				|	InventoryAssemblyProducts.MeasurementUnit AS MeasurementUnit,
				|	SUM(InventoryAssemblyProducts.Quantity) AS PlacesQuantity,
				|	CASE
				|		WHEN VALUETYPE(InventoryAssemblyProducts.MeasurementUnit) = Type(Catalog.UOM)
				|			THEN InventoryAssemblyProducts.MeasurementUnit.Factor
				|		ELSE 1
				|	END AS Factor,
				|	SUM(CASE
				|			WHEN VALUETYPE(InventoryAssemblyProducts.MeasurementUnit) = Type(Catalog.UOM)
				|					AND InventoryAssemblyProducts.MeasurementUnit.Factor &gt; 0
				|				THEN InventoryAssemblyProducts.Count * InventoryAssemblyProducts.MeasurementUnit.Factor
				|			ELSE InventoryAssemblyProducts.Count
				|		END) AS Count,
				|	MAX(InventoryAssemblyProducts.LineNumber) AS LineNumber
				|FROM
				|	Document.InventoryAssembly.Products AS InventoryAssemblyProducts
				|WHERE
				|	InventoryAssemblyProducts.Ref = &amp;Refs
				|
				|GROUP BY
				|	InventoryAssemblyProducts.ProductsAndServices,
				|	InventoryAssemblyProducts.MeasurementUnit,
				|	CASE
				|		WHEN VALUETYPE(InventoryAssemblyProducts.MeasurementUnit) = Type(Catalog.UOM)
				|			THEN InventoryAssemblyProducts.MeasurementUnit.Factor
				|		ELSE 1
				|	END
				|
				|ORDER BY
				|	LineNumber";

ObjectsCollection = Query.Execute().Unload();</BeforeProcessExport>
							<Property>
								<Code>12</Code>
								<Description>--&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>--&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>--&gt; MeasurementUnit</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>--&gt; Factor</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>--&gt; Count</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ProductionTransferDelete</Code>
					<Description>Document: Production</Description>
					<Order>200</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Object.IsNew() Then
		Cancel = True;
	EndIf;
	
EndIf;</AfterImport>
					<DoNotCreateIfNotFound>true</DoNotCreateIfNotFound>
					<Source>DocumentRef.InventoryAssembly</Source>
					<Receiver>DocumentRef.ProductTransfer</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
							<OnExport>AdditPrefix = "PP";
Value = Left(Value, 5) + AdditPrefix + Mid(Value, 8);</OnExport>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>--&gt; DeletionMark</Description>
							<Order>150</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<BeforeExport>Value = True;</BeforeExport>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>--&gt; Posted</Description>
							<Order>200</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>WasteTransfer</Code>
					<Description>Document: Production</Description>
					<Order>250</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	If Object.IsNew()
		AND Object.Products.Count() = 0 Then
		
		Cancel = True;
		
	Else
		
		Object.VATInProductsCost = Enums.ActionVATInProductsCost.DontChange;
		Documents.ProductTransfer.FillGLAccountsInTabularSection(Object, "Products");
		
	EndIf;
	
EndIf;</AfterImport>
					<Source>DocumentRef.InventoryAssembly</Source>
					<Receiver>DocumentRef.ProductTransfer</Receiver>
					<Properties>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
							<OnExport>AdditPrefix = "BY";
Value = Left(Value, 5) + AdditPrefix + Mid(Value, 8);</OnExport>
						</Property>
						<Property>
							<Code>1</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>InventoryStructuralUnit --&gt; SourceWarehouse</Description>
							<Order>300</Order>
							<Source Name="InventoryStructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="SourceWarehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>
StructuralUnit = Source.InventoryStructuralUnit;
Execute(Algorithms.GetOCRForStructuralUnit);</BeforeExport>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>DisposalsStructuralUnit --&gt; WarehouseRecipient</Description>
							<Order>350</Order>
							<Source Name="DisposalsStructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="WarehouseRecipient" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>
StructuralUnit = Source.DisposalsStructuralUnit;
Execute(Algorithms.GetOCRForStructuralUnit);</BeforeExport>
						</Property>
						<Group>
							<Code>8</Code>
							<Description>--&gt; Products</Description>
							<Order>400</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="Products" Kind="TabularSection"/>
							<BeforeProcessExport>
Query = New Query;
Query.SetParameter("Ref", Source.Ref);

Query.Text = "SELECT
               |	InventoryAssemblyWaste.ProductsAndServices AS ProductsAndServices,
               |	InventoryAssemblyWaste.MeasurementUnit AS MeasurementUnit,
               |	SUM(InventoryAssemblyWaste.Quantity) AS PlacesQuantity,
               |	CASE
               |		WHEN VALUETYPE(InventoryAssemblyWaste.MeasurementUnit) = Type(Catalog.UOM)
               |			THEN InventoryAssemblyWaste.MeasurementUnit.Factor
               |		ELSE 1
               |	END AS Factor,
               |	SUM(CASE
               |			WHEN VALUETYPE(InventoryAssemblyWaste.MeasurementUnit) = Type(Catalog.UOM)
               |					AND InventoryAssemblyWaste.MeasurementUnit.Factor &gt; 0
               |				THEN InventoryAssemblyWaste.Count * InventoryAssemblyWaste.MeasurementUnit.Factor
               |			ELSE InventoryAssemblyWaste.Count
               |		END) AS Count,
               |	MAX(InventoryAssemblyWaste.LineNumber) AS LineNumber
               |FROM
               |	Document.InventoryAssembly.Disposals AS InventoryAssemblyWaste
               |WHERE
               |	InventoryAssemblyWaste.Ref = &amp;Refs
               |
               |GROUP BY
               |	InventoryAssemblyWaste.ProductsAndServices,
               |	InventoryAssemblyWaste.MeasurementUnit,
               |	CASE
               |		WHEN VALUETYPE(InventoryAssemblyWaste.MeasurementUnit) = Type(Catalog.UOM)
               |			THEN InventoryAssemblyWaste.MeasurementUnit.Factor
               |		ELSE 1
               |	END
               |
               |ORDER BY
               |	LineNumber";
			   
ObjectsCollection = Query.Execute().Unload();</BeforeProcessExport>
							<Property>
								<Code>9</Code>
								<Description>--&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>--&gt; PlacesQuantity</Description>
								<Order>100</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>--&gt; MeasurementUnit</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>--&gt; Factor</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>--&gt; Count</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>WasteTransferDelete</Code>
					<Description>Document: Production</Description>
					<Order>300</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Object.IsNew() Then
		Cancel = True;
	EndIf;
	
EndIf;</AfterImport>
					<DoNotCreateIfNotFound>true</DoNotCreateIfNotFound>
					<Source>DocumentRef.InventoryAssembly</Source>
					<Receiver>DocumentRef.ProductTransfer</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
							<OnExport>AdditPrefix = "BY";
Value = Left(Value, 5) + AdditPrefix + Mid(Value, 8);</OnExport>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>150</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<BeforeExport>Value = True;</BeforeExport>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>200</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>TransferOfMaterialsInOperation</Code>
					<Description>Document: Move inventories</Description>
					<Order>350</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	// Fill in the required attributes in the Coverall tabular section
	For Each CurRow IN Object.Working Clothes Do
	
		Query = New Query();
		Query.Text = 
		"SELECT
		|	UsePurpose.Ref AS PurposeUse
		|FROM
		|	Catalog.UsePurpose AS UsePurpose
		|WHERE
		|	UsePurpose.Owner = &amp;Owner
		|	AND UsePurpose.CostsReflectionMethod = &amp;CostsReflectionMethod";
		Query.SetParameter("Owner", CurRow.ProductsAndServices);
		Query.SetParameter("CostsReflectionMethod", Parameters.ExchangeNodeForDataImport.CostsReflectionMethod);
		
		Selection = Query.Execute().Select();
		If Selection.Next() Then
			
			CurRow.PurposeUse = Selection.PurposeUse;
			
		EndIf;
		
		GLAccounts 				= AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
		CurRow.GLAccount 	= GLAccounts.GLAccount;
		
		//Spec. clothes is always 10.11.1. You do not need to look at GLAccount.TransferAccount
		CurRow.TransferAccount	= ChartsOfAccounts.SelfSupporting.WorkingClothesInOperation;
		
		If ValueIsFilled(CurRow.PurposeUse) AND CurRow.Count = 0 Then
			
			CurRow.Count = CommonUse.GetAttributeValue(CurRow.PurposeUse, "Count");
			
		EndIf;
		
		If Not ValueIsFilled(CurRow.ReflectionInUSN) Then 
			
			STS                 		= AccountingPolicy.CSSIsAppliedNIncomeMinusExpenses(Object.Company, Object.Date);
			CSSIncomes           		= AccountingPolicy.AppliedAIIncomes(Object.Company, Object.Date);
			ReflectInTaxEXEMPTRegistered	= STS AND Not CSSIncomes;
			
			If ReflectInTaxEXEMPTRegistered Then
				
				CurRow.ReflectionInUSN = Enums.ReflectionInUSN.Are Accepted;
				
			EndIf;
			
		EndIf;
	
	EndDo;
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryTransfer</Source>
					<Receiver>DocumentRef.TransferOfMaterialsInOperation</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>10</Code>
							<Description>StructuralUnitPayee --&gt; Location</Description>
							<Order>300</Order>
							<Source Name="StructuralUnitPayee" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Location" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>11</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>350</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>400</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>7</Code>
							<Description>Inventory --&gt; Working Clothes</Description>
							<Order>450</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Working Clothes" Kind="TabularSection"/>
							<Property>
								<Code>8</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>9</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>12</Code>
								<Description> --&gt; Ind</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Ind" Kind="Attribute" Type="CatalogRef.Individuals"/>
								<BeforeExport>Value = Source.StructuralUnitPayee.FRP;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>CancellationOfService</Code>
					<Description>Document: WriteOff inventories</Description>
					<Order>400</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	Object.ExpensesWriteOffMethod = Enums.WaysWriteOffExpenses.ByUseAssignment;
	
	Execute(Algorithms.FillPartyTransferMaterialsToCommissioning);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryWriteOff</Source>
					<Receiver>DocumentRef.CancellationOfService</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>100</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>150</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>200</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>250</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>300</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>StructuralUnit --&gt; CounterpartyDivision</Description>
							<Order>350</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="CounterpartyDivision" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
						</Property>
						<Group>
							<Code>8</Code>
							<Description>Inventory --&gt; Working Clothes</Description>
							<Order>450</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Working Clothes" Kind="TabularSection"/>
							<Property>
								<Code>9</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>12</Code>
								<Description> --&gt; Ind</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Ind" Kind="Attribute" Type="CatalogRef.Individuals"/>
								<BeforeExport>Value = Source.StructuralUnit.FRP;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>ReturnOfMaterials</Code>
					<Description>Document: Move inventories</Description>
					<Order>450</Order>
					<AfterImport>If DataImportToInformationBaseMode() Then
	
	Execute(Algorithms.FillPartyTransferMaterialsToCommissioning);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.InventoryTransfer</Source>
					<Receiver>DocumentRef.ReturnOfMaterials</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>StructuralUnit --&gt; CounterpartyDivision</Description>
							<Order>300</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="CounterpartyDivision" Kind="Attribute" Type="CatalogRef.CompaniesDivisions"/>
							<ConversionRuleCode>UnitCompanies                          </ConversionRuleCode>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>StructuralUnitPayee --&gt; Warehouse</Description>
							<Order>350</Order>
							<Source Name="StructuralUnitPayee" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
						</Property>
						<Property>
							<Code>13</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>400</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Group>
							<Code>9</Code>
							<Description>Inventory --&gt; Working Clothes</Description>
							<Order>450</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Working Clothes" Kind="TabularSection"/>
							<Property>
								<Code>10</Code>
								<Description>Count --&gt; Count</Description>
								<Order>50</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>100</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>12</Code>
								<Description> --&gt; Ind</Description>
								<Order>150</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Ind" Kind="Attribute" Type="CatalogRef.Individuals"/>
								<BeforeExport>Value = Source.StructuralUnit.FRP;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>MaterialExpensesDistribution</Code>
					<Description>Document: Distribution cost</Description>
					<Order>500</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Object.IsNew()
		AND Object.Materials.Count() = 0 Then
		Cancel = True;
	EndIf;
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.CostAllocation</Source>
					<Receiver>DocumentRef.RequestInvoice</Receiver>
					<Properties>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
							<OnExport>AdditPrefix = "RM";
Value = Left(Value, 5) + AdditPrefix + Mid(Value, 8);</OnExport>
						</Property>
						<Property>
							<Code>1</Code>
							<Description>Company --&gt; Company</Description>
							<Order>150</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>200</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>StructuralUnit --&gt; Warehouse</Description>
							<Order>300</Order>
							<Source Name="StructuralUnit" Kind="Attribute" Type="CatalogRef.StructuralUnits"/>
							<Receiver Name="Warehouse" Kind="Attribute" Type="CatalogRef.Warehouses"/>
							<ConversionRuleCode>Warehouses                                            </ConversionRuleCode>
							<BeforeExport>
StructuralUnit = Source.StructuralUnit;
Execute(Algorithms.GetOCRForStructuralUnit);</BeforeExport>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>350</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>15</Code>
							<Description>--&gt; GLAccountsCostInTable</Description>
							<Order>400</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="GLAccountsCostInTable" Kind="Attribute" Type="Boolean"/>
							<BeforeExport>Value = True;</BeforeExport>
						</Property>
						<Group>
							<Code>8</Code>
							<Description>Inventory --&gt; Materials</Description>
							<Order>450</Order>
							<Source Name="Inventory" Kind="TabularSection"/>
							<Receiver Name="Materials" Kind="TabularSection"/>
							<BeforeProcessExport>
Query = New Query;
Query.Text = "SELECT
				|	CostAllocationInventory.ProductsAndServices AS ProductsAndServices,
				|	SUM(CostDistributionInventoryDistribution.Quantity) AS Quantity,
				|	SUM(CostDistributionInventoryDistribution.Quantity) AS PlacesQuantity,
				|	CostAllocationInventory.MeasurementUnit AS MeasurementUnit,
				|	MAX(ISNULL(CostAllocationInventory.MeasurementUnit.Factor, 1)) AS Factor,
				|	CostDistributionInventoryDistribution.ProductsAndServices.ProductsAndServicesCategory AS ProductsAndServicesCategory,
				|	MAX(CostDistributionInventoryDistribution.LineNumber) AS LineNumber
				|FROM
				|	Document.CostAllocation.Inventory AS CostAllocationInventory
				|		INNER JOIN Document.CostAllocation.InventoryDistribution AS CostDistributionInventoryDistribution
				|		BY CostAllocationInventory.ConnectionKey = CostDistributionInventoryDistribution.ConnectionKey
				|			AND CostAllocationInventory.Ref = CostDistributionInventoryDistribution.Ref
				|WHERE
				|	CostAllocationInventory.Ref = &amp;Refs
				|	AND CostDistributionInventoryDistribution.Ref = &amp;Refs
				|
				|GROUP BY
				|	CostAllocationInventory.ProductsAndServices,
				|	CostAllocationInventory.MeasurementUnit,
				|	CostDistributionInventoryDistribution.ProductsAndServices.ProductsAndServicesCategory
				|
				|ORDER BY
				|	LineNumber";

Query.SetParameter("Ref", Source.Ref);
ObjectsCollection = Query.Execute().Unload();</BeforeProcessExport>
							<Property>
								<Code>9</Code>
								<Description>ProductsAndServices --&gt; ProductsAndServices</Description>
								<Order>50</Order>
								<Source Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<Receiver Name="ProductsAndServices" Kind="Attribute" Type="CatalogRef.ProductsAndServices"/>
								<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
							</Property>
							<Property>
								<Code>10</Code>
								<Description>Count --&gt; Count</Description>
								<Order>100</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="Count" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>11</Code>
								<Description>Count --&gt; PlacesQuantity</Description>
								<Order>150</Order>
								<Source Name="Count" Kind="Attribute" Type="Number"/>
								<Receiver Name="PlacesQuantity" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>12</Code>
								<Description>--&gt; MeasurementUnit</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="MeasurementUnit" Kind="Attribute" Type="CatalogRef.UOMClassifier"/>
								<BeforeExport>Execute(Algorithms.FillInMeasurementUnitInTablePortionOfThe);</BeforeExport>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>--&gt; Factor</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Factor" Kind="Attribute" Type="Number"/>
								<BeforeExport>Execute(Algorithms.FillInTablePortionOfCoefficient);</BeforeExport>
							</Property>
							<Property>
								<Code>14</Code>
								<Description>--&gt; ProductsAndServicesCategory</Description>
								<Order>300</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="ProductsAndServicesCategory" Kind="Attribute" Type="CatalogRef.ProductsAndServicesCategories"/>
								<BeforeExport>If Not ValueIsFilled(CollectionObject.ProductsAndServicesCategory) Then
	Value = CommonUse.GetAttributeValue(CollectionObject.ProductsAndServices, "ProductsAndServicesCategory");
EndIf;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
			</Group>
			<Group>
				<Code>MutualSettlements</Code>
				<Description>MutualSettlements</Description>
				<Order>350</Order>
				<Rule>
					<Code>DebtAdjustment</Code>
					<Description>Document: Adjustment debt</Description>
					<Order>50</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
EndIf;</AfterImport>
					<SynchronizeByID>true</SynchronizeByID>
					<Source>DocumentRef.Netting</Source>
					<Receiver>DocumentRef.DebtAdjustment</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsSettlement"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsDebtAdjustment"/>
							<ConversionRuleCode>OperationKindsDebtAdjustment                    </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>4</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>5</Code>
							<Description>Number --&gt; Number</Description>
							<Order>150</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
							<BeforeExport>Value = 	Left(Source.Number, 5) + "D" + Mid(Source.Number, 7);</BeforeExport>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>Company --&gt; Company</Description>
							<Order>200</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>2</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>350</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>CounterpartySource --&gt; CounterpartyDebitor</Description>
							<Order>400</Order>
							<Source Name="CounterpartySource" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="CounterpartyDebitor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsNetting.VendorDebtAdjustment Then
	Value = Source.Counterparty;	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Counterparty --&gt; CounterpartyCreditor</Description>
							<Order>450</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="CounterpartyCreditor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsNetting.CustomerDebtAdjustment 
	OR Source.OperationKind = Enums.OperationKindsNetting.VendorDebtAdjustment Then
	
	Empty = True;	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>27</Code>
							<Description> --&gt; DebtAdvanceKind</Description>
							<Order>550</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="DebtAdvanceKind" Kind="Attribute" Type="EnumRef.AdvaceDebtKinds"/>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsNetting.CustomerDebtAdjustment
	OR Source.OperationKind = Enums.OperationKindsNetting.CustomerDebtAssignment Then
	Value = "CustomerDebt";	
ElsIf Source.OperationKind = Enums.OperationKindsNetting.VendorDebtAdjustment
	OR Source.OperationKind = Enums.OperationKindsNetting.DebtAssignmentToVendor Then
	Value = "DebtToVendor";	
Else
	Value = "";	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>28</Code>
							<Description> --&gt; DebtAdvanceType</Description>
							<Order>600</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="DebtAdvanceType" Kind="Attribute" Type="EnumRef.DebtTypes"/>
							<BeforeExport>Value = "CounterpartyItself";</BeforeExport>
						</Property>
						<Group>
							<Code>10</Code>
							<Description>Debitor --&gt; AccountsReceivable</Description>
							<Order>750</Order>
							<Source Name="Debitor" Kind="TabularSection"/>
							<Receiver Name="AccountsReceivable" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.OperationKind = Enums.OperationKindsNetting.DebtAssignmentToVendor Then
	Cancel = True;
Else
	AdvanceFlag = False;
	Execute(Algorithms.GenerateTabularSectionDebitor);
EndIf;</BeforeProcessExport>
							<Property>
								<Code>12</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>50</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>
TabularSectionName = "Debitor";
Execute(Algorithms.GenerateStructureOfMutualCountsContract);</BeforeExport>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>100</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>200</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>20</Code>
								<Description> --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>37</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>300</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>350</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>29</Code>
								<Description> --&gt; CorCounterpartyContract</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CorCounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsNetting.CustomerDebtAssignment Then
	TabularSectionName = "";
	Execute(Algorithms.GenerateStructureOfMutualCountsContract);
Else
	Empty = True;	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>33</Code>
								<Description>--&gt; AdvanceFlag</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>AdvanceFlag</ParameterForTransferName>
								<BeforeExport>Value = False;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>11</Code>
							<Description>Creditor --&gt; AccountsPayable</Description>
							<Order>800</Order>
							<Source Name="Creditor" Kind="TabularSection"/>
							<Receiver Name="AccountsPayable" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.OperationKind = Enums.OperationKindsNetting.CustomerDebtAssignment Then
	Cancel = True;
Else
	AdvanceFlag = False;
	Execute(Algorithms.GenerateTabularSectionCreditor);
EndIf;</BeforeProcessExport>
							<Property>
								<Code>16</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>50</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>
TabularSectionName = "Creditor";
Execute(Algorithms.GenerateStructureOfMutualCountsContract);</BeforeExport>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>100</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>19</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>200</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>21</Code>
								<Description> --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>38</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>300</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>26</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>350</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>30</Code>
								<Description> --&gt; CorCounterpartyContract</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CorCounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsNetting.DebtAssignmentToVendor Then
	TabularSectionName = "";
	Execute(Algorithms.GenerateStructureOfMutualCountsContract);
Else
	Empty = True;	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>34</Code>
								<Description>--&gt; AdvanceFlag</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>AdvanceFlag</ParameterForTransferName>
								<BeforeExport>Value = False;</BeforeExport>
							</Property>
						</Group>
						<Property Disable="true">
							<Code>31</Code>
							<Description>Contract --&gt;</Description>
							<Order>850</Order>
							<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
							<Receiver Name="" Kind=""/>
						</Property>
						<Property Disable="true">
							<Code>36</Code>
							<Description>SettlementsAmount --&gt;</Description>
							<Order>900</Order>
							<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
							<Receiver Name="" Kind=""/>
						</Property>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>DebtAdjustmentAdvances</Code>
					<Description>Document: Adjustment debt</Description>
					<Order>100</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	Execute(Algorithms.ProcessDocumentImportAfterFilling);
	
EndIf;</AfterImport>
					<Source>DocumentRef.Netting</Source>
					<Receiver>DocumentRef.DebtAdjustment</Receiver>
					<Properties>
						<Property>
							<Code>1</Code>
							<Description>OperationKind --&gt; OperationKind</Description>
							<Order>50</Order>
							<Source Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsSettlement"/>
							<Receiver Name="OperationKind" Kind="Attribute" Type="EnumRef.OperationKindsDebtAdjustment"/>
							<ConversionRuleCode>OperationKindsDebtAdjustment                    </ConversionRuleCode>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Date --&gt; Date</Description>
							<Order>100</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>3</Code>
							<Description>Number --&gt; Number</Description>
							<Order>150</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
							<BeforeExport>Value = 	Left(Source.Number, 5) + "A" + Mid(Source.Number, 7);</BeforeExport>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Company --&gt; Company</Description>
							<Order>200</Order>
							<Source Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<Receiver Name="Company" Kind="Attribute" Type="CatalogRef.Companies"/>
							<ConversionRuleCode>Companies                                       </ConversionRuleCode>
						</Property>
						<Property>
							<Code>5</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>250</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>6</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>300</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
						</Property>
						<Property>
							<Code>7</Code>
							<Description>Comment --&gt; Comment</Description>
							<Order>350</Order>
							<Source Name="Comment" Kind="Attribute" Type="String"/>
							<Receiver Name="Comment" Kind="Attribute" Type="String"/>
						</Property>
						<Property>
							<Code>8</Code>
							<Description>CounterpartySource --&gt; CounterpartyDebitor</Description>
							<Order>400</Order>
							<Source Name="CounterpartySource" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="CounterpartyDebitor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsNetting.VendorDebtAdjustment Then
	Value = Source.Counterparty;	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>9</Code>
							<Description>Counterparty --&gt; CounterpartyCreditor</Description>
							<Order>450</Order>
							<Source Name="Counterparty" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<Receiver Name="CounterpartyCreditor" Kind="Attribute" Type="CatalogRef.Counterparties"/>
							<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsNetting.CustomerDebtAdjustment 
	OR Source.OperationKind = Enums.OperationKindsNetting.VendorDebtAdjustment Then
	
	Empty = True;	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>25</Code>
							<Description> --&gt; DebtAdvanceKind</Description>
							<Order>550</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="DebtAdvanceKind" Kind="Attribute" Type="EnumRef.AdvaceDebtKinds"/>
							<BeforeExport>If Source.OperationKind = Enums.OperationKindsNetting.CustomerDebtAdjustment
	OR Source.OperationKind = Enums.OperationKindsNetting.CustomerDebtAssignment Then
	Value = "CustomerAdvances";	
ElsIf Source.OperationKind = Enums.OperationKindsNetting.VendorDebtAdjustment
	OR Source.OperationKind = Enums.OperationKindsNetting.DebtAssignmentToVendor Then
	Value = "AdvancesToVendor";	
Else
	Value = "";	
EndIf;</BeforeExport>
						</Property>
						<Property>
							<Code>26</Code>
							<Description> --&gt; DebtAdvanceType</Description>
							<Order>600</Order>
							<Source Name="" Kind=""/>
							<Receiver Name="DebtAdvanceType" Kind="Attribute" Type="EnumRef.DebtTypes"/>
							<BeforeExport>Value = "CounterpartyItself";</BeforeExport>
						</Property>
						<Group>
							<Code>11</Code>
							<Description>Debitor --&gt; AccountsPayable</Description>
							<Order>650</Order>
							<Source Name="Debitor" Kind="TabularSection"/>
							<Receiver Name="AccountsPayable" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.OperationKind = Enums.OperationKindsNetting.DebtAssignmentToVendor Then
	Cancel = True;
Else
	AdvanceFlag = True;
	Execute(Algorithms.GenerateTabularSectionDebitor);
EndIf;</BeforeProcessExport>
							<Property>
								<Code>12</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>50</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>
TabularSectionName = "Debitor";
Execute(Algorithms.GenerateStructureOfMutualCountsContract);</BeforeExport>
							</Property>
							<Property>
								<Code>13</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>100</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>15</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>150</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>16</Code>
								<Description> --&gt; Amount</Description>
								<Order>200</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>14</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>250</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>17</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>300</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>27</Code>
								<Description> --&gt; CorCounterpartyContract</Description>
								<Order>350</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CorCounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsNetting.CustomerDebtAssignment Then
	TabularSectionName = "";
	Execute(Algorithms.GenerateStructureOfMutualCountsContract);
Else
	Empty = True;	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>29</Code>
								<Description>--&gt; AdvanceFlag</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>AdvanceFlag</ParameterForTransferName>
								<BeforeExport>Value = True;</BeforeExport>
							</Property>
						</Group>
						<Group>
							<Code>18</Code>
							<Description>Creditor --&gt; AccountsReceivable</Description>
							<Order>700</Order>
							<Source Name="Creditor" Kind="TabularSection"/>
							<Receiver Name="AccountsReceivable" Kind="TabularSection"/>
							<BeforeProcessExport>If Source.OperationKind = Enums.OperationKindsNetting.CustomerDebtAssignment Then
	Cancel = True;
Else
	AdvanceFlag = True;
	Execute(Algorithms.GenerateTabularSectionCreditor);
EndIf;</BeforeProcessExport>
							<Property>
								<Code>19</Code>
								<Description>Contract --&gt; CounterpartyContract</Description>
								<Order>50</Order>
								<Source Name="Contract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<Receiver Name="CounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
								<BeforeExport>
TabularSectionName = "Creditor";
Execute(Algorithms.GenerateStructureOfMutualCountsContract);</BeforeExport>
							</Property>
							<Property>
								<Code>20</Code>
								<Description>Document --&gt; Deal</Description>
								<Order>100</Order>
								<Source Name="Document" Kind="Attribute"/>
								<Receiver Name="Deal" Kind="Attribute"/>
								<BeforeExport>Execute(Algorithms.DetermineOCRNameAccountsDocument);</BeforeExport>
							</Property>
							<Property>
								<Code>21</Code>
								<Description>SettlementsAmount --&gt; AmountMutualSettlements</Description>
								<Order>200</Order>
								<Source Name="SettlementsAmount" Kind="Attribute" Type="Number"/>
								<Receiver Name="AmountMutualSettlements" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>23</Code>
								<Description> --&gt; Amount</Description>
								<Order>250</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="Amount" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>24</Code>
								<Description>ExchangeRate --&gt; MutualSettlementsExchangeRate</Description>
								<Order>300</Order>
								<Source Name="ExchangeRate" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsExchangeRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>31</Code>
								<Description>Multiplicity --&gt; MutualSettlementsCurrencyRate</Description>
								<Order>350</Order>
								<Source Name="Multiplicity" Kind="Attribute" Type="Number"/>
								<Receiver Name="MutualSettlementsCurrencyRate" Kind="Attribute" Type="Number"/>
							</Property>
							<Property>
								<Code>28</Code>
								<Description> --&gt; CorCounterpartyContract</Description>
								<Order>400</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="CorCounterpartyContract" Kind="Attribute" Type="CatalogRef.CounterpartiesContracts"/>
								<BeforeExport>If Source.OperationKind = Enums.OperationKindsNetting.DebtAssignmentToVendor Then
	TabularSectionName = "";
	Execute(Algorithms.GenerateStructureOfMutualCountsContract);
Else
	Empty = True;	
EndIf;</BeforeExport>
							</Property>
							<Property>
								<Code>30</Code>
								<Description>--&gt; AdvanceFlag</Description>
								<Order>450</Order>
								<Source Name="" Kind=""/>
								<Receiver Name="" Kind=""/>
								<ParameterForTransferName>AdvanceFlag</ParameterForTransferName>
								<BeforeExport>Value = True;</BeforeExport>
							</Property>
						</Group>
					</Properties>
					<Values/>
				</Rule>
				<Rule>
					<Code>DebtAdjustmentAdvancesDelete</Code>
					<Description>Document: Adjustment debt</Description>
					<Order>150</Order>
					<AfterImport>
If DataImportToInformationBaseMode() Then
	
	If Object.IsNew() Then
		Cancel = True;
	EndIf;
	
EndIf;</AfterImport>
					<DoNotCreateIfNotFound>true</DoNotCreateIfNotFound>
					<Source>DocumentRef.Netting</Source>
					<Receiver>DocumentRef.DebtAdjustment</Receiver>
					<Properties>
						<Property Search="true">
							<Code>1</Code>
							<Description>Date --&gt; Date</Description>
							<Order>50</Order>
							<Source Name="Date" Kind="Property" Type="Date"/>
							<Receiver Name="Date" Kind="Property" Type="Date"/>
						</Property>
						<Property Search="true">
							<Code>2</Code>
							<Description>Number --&gt; Number</Description>
							<Order>100</Order>
							<Source Name="Number" Kind="Property" Type="String"/>
							<Receiver Name="Number" Kind="Property" Type="String"/>
							<BeforeExport>Value = 	Left(Source.Number, 5) + "A" + Mid(Source.Number, 7);</BeforeExport>
						</Property>
						<Property>
							<Code>3</Code>
							<Description>DeletionMark --&gt; DeletionMark</Description>
							<Order>150</Order>
							<Source Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<Receiver Name="DeletionMark" Kind="Property" Type="Boolean"/>
							<BeforeExport>Value = True;</BeforeExport>
						</Property>
						<Property>
							<Code>4</Code>
							<Description>Posted --&gt; Posted</Description>
							<Order>200</Order>
							<Source Name="Posted" Kind="Property" Type="Boolean"/>
							<Receiver Name="Posted" Kind="Property" Type="Boolean"/>
							<BeforeExport>Value = False;</BeforeExport>
						</Property>
					</Properties>
					<Values/>
				</Rule>
			</Group>
		</Group>
		<Group>
			<Code>Plans kinds characteristics</Code>
			<Description>Plans kinds characteristics</Description>
			<Order>250</Order>
			<Rule>
				<Code>AdditionalAttributesAndInformation</Code>
				<Description>Plan kinds characteristics: Additional attributes and information</Description>
				<Order>50</Order>
				<SynchronizeByID>true</SynchronizeByID>
				<Source>ChartOfCharacteristicTypesRef.AdditionalAttributesAndInformation</Source>
				<Receiver>ChartOfCharacteristicTypesRef.AdditionalAttributesAndInformation</Receiver>
				<Properties>
					<Property Search="true">
						<Code>1</Code>
						<Description>Description --&gt; Description</Description>
						<Order>50</Order>
						<Source Name="Description" Kind="Property" Type="String"/>
						<Receiver Name="Description" Kind="Property" Type="String"/>
					</Property>
				</Properties>
				<Values/>
			</Rule>
		</Group>
	</ObjectConversionRules>
	<DataUnloadRules>
		<Group Disable="false">
			<Code>Catalogs</Code>
			<Description>Catalogs</Description>
			<Order>50</Order>
			<Rule Disable="false">
				<Code>Currencies</Code>
				<Description>Currencies catalog</Description>
				<Order>100</Order>
				<ConversionRuleCode>Currencies                                            </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.Currencies</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>CounterpartyContracts</Code>
				<Description>Catalog "Counterparty's Contracts"</Description>
				<Order>200</Order>
				<Description>Kind treaty in PSU defined type first exported to to it document.</Description>
				<ConversionRuleCode>CounterpartyContracts                              </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.CounterpartyContracts</SelectionObject>
				<BeforeObjectExport>If Object.Owner.DoOperationsByContracts &lt;&gt; True Then
	OCRName = "CounterpartyContracts";
Else
	OCRName = "CounterpartyContractsSearchByIdIdentificator";
EndIf;</BeforeObjectExport>
			</Rule>
			<Rule Disable="false">
				<Code>Counterparties</Code>
				<Description>Catalog "Counterparties"</Description>
				<Order>250</Order>
				<Description>Together with catalog is exported contact info.</Description>
				<ConversionRuleCode>Counterparties                                       </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.Counterparties</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>Companies</Code>
				<Description>Companies catalog</Description>
				<Order>300</Order>
				<Description>Together with catalog is exported contact info.</Description>
				<ConversionRuleCode>Companies                                       </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.Companies</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>UOMClassifier</Code>
				<Description>Catalog "UOM classifier"</Description>
				<Order>400</Order>
				<ConversionRuleCode>UOMClassifier                      </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.UOMClassifier</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>ProductsAndServices</Code>
				<Description>Catalog "ProductsAndServices"</Description>
				<Order>500</Order>
				<ConversionRuleCode>ProductsAndServices                                      </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.ProductsAndServices</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>ProductsAndServicesCategories</Code>
				<Description>Catalog "Products and services categories"</Description>
				<Order>550</Order>
				<ConversionRuleCode>ProductsAndServicesCategories                              </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.ProductsAndServicesCategories</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>CCDNumbers</Code>
				<Description>Catalog "CCD numbers"</Description>
				<Order>600</Order>
				<ConversionRuleCode>CCDNumbers                                         </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.CCDNumbers</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>CashFlowItems</Code>
				<Description>Catalog "Cash flow items"</Description>
				<Order>700</Order>
				<ConversionRuleCode>CashFlowItems                     </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.CashFlowItems</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>Individuals</Code>
				<Description>Catalog "Individuals"</Description>
				<Order>750</Order>
				<ConversionRuleCode>Individuals                                    </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.Individuals</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>Banks</Code>
				<Description>Banks</Description>
				<Order>775</Order>
				<ConversionRuleCode>Banks                                             </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.Banks</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>BankAccounts</Code>
				<Description>Catalog "Bank accounts"</Description>
				<Order>800</Order>
				<ConversionRuleCode>BankAccounts                                   </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.BankAccounts</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>StructuralUnits</Code>
				<Description>Structural units catalog</Description>
				<Order>950</Order>
				<Description>For export structural units From type "Warehouse", "Retail", "Retail accrual accounting" used OCR "Warehouses". For the rest used OCR "UnitCompanies"</Description>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.StructuralUnits</SelectionObject>
				<BeforeObjectExport>If Object.StructuralUnitType = Enums.StructuralUnitsTypes.Warehouse
 OR Object.StructuralUnitType = Enums.StructuralUnitsTypes.Retail
 OR Object.StructuralUnitType = Enums.StructuralUnitsTypes.RetailAccrualAccounting Then
	OCRName = "Warehouses";
Else
	OCRName = "UnitCompanies";
EndIf;</BeforeObjectExport>
			</Rule>
			<Rule Disable="false">
				<Code>Specifications</Code>
				<Description>Catalog "Specifications"</Description>
				<Order>1000</Order>
				<ConversionRuleCode>SpecificationsProductsAndServices                          </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.Specifications</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>PriceKinds</Code>
				<Description>Catalog "Price kinds"</Description>
				<Order>1050</Order>
				<ConversionRuleCode>PriceTypesProductsAndServices                               </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.PriceKinds</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>ContactInformationTypes</Code>
				<Description>ContactInformationTypes</Description>
				<Order>1100</Order>
				<ConversionRuleCode>ContactInformationTypes                          </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.ContactInformationTypes</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>IndividualsDocumentsKinds</Code>
				<Description>Kinds documents actual persons</Description>
				<Order>1150</Order>
				<ConversionRuleCode>IndividualsDocumentsKinds                       </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.IndividualsDocumentsKinds</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>AlcoholicProductsKinds</Code>
				<Description>Kinds alcohol products</Description>
				<Order>1200</Order>
				<ConversionRuleCode>AlcoholicProductsKinds                          </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.AlcoholicProductsKinds</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>AlcoholicProductsVendorLicenses</Code>
				<Description>Licenses vendors alcohol products</Description>
				<Order>1250</Order>
				<ConversionRuleCode>AlcoholicProductsVendorLicenses           </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>CatalogRef.AlcoholicProductsVendorLicenses</SelectionObject>
				<BeforeObjectExport>DataSource = Object;
IsRemoval = False;
Execute(Algorithms.ExportAlcoholProductsLicenseVendor);
Cancel = True;</BeforeObjectExport>
			</Rule>
		</Group>
		<Group Disable="false">
			<Code>InformationRegisters</Code>
			<Description>InformationRegisters</Description>
			<Order>100</Order>
			<Rule Disable="false">
				<Code>IndividualsDocuments</Code>
				<Description>Documents actual persons</Description>
				<Order>250</Order>
				<ConversionRuleCode>IndividualsDocuments                            </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>InformationRegisterRecord.IndividualsDocuments</SelectionObject>
			</Rule>
			<Rule Disable="false">
				<Code>IndividualsDescriptionFull</Code>
				<Description>Surname, name, patronymic actual persons</Description>
				<Order>300</Order>
				<ConversionRuleCode>SNPIndividuals                                  </ConversionRuleCode>
				<DataSelectionVariant>StandardSelection</DataSelectionVariant>
				<SelectionObject>InformationRegisterRecord.IndividualsDescriptionFull</SelectionObject>
			</Rule>
		</Group>
		<Group Disable="false">
			<Code>Documents</Code>
			<Description>Documents</Description>
			<Order>150</Order>
			<Group Disable="false">
				<Code>MarketingAndSales</Code>
				<Description>MarketingAndSales</Description>
				<Order>1450</Order>
				<Rule Disable="false">
					<Code>AcceptanceCertificate</Code>
					<Description>Document "Acceptance certificate"</Description>
					<Order>200</Order>
					<ConversionRuleCode>ActOnProvisionOfIndustrialServices                </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.AcceptanceCertificate</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>CustomerInvoice</Code>
					<Description>Document "Customer invoice"</Description>
					<Order>250</Order>
					<Description>For documents From kind Operations "Sale to customer" and "Sale to agent" used OCR "GoodsServicesSale".
For documents From kind Operations "Transfer to processing" used OCR "TransferOfProducts".
For documents From kind Operations "Return to principal", "Return from processing", "Return to vendor" used OCR "ReturnProductsToSupplier".</Description>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.CustomerInvoice</SelectionObject>
					<BeforeObjectExport>If Object.OperationKind = Enums.OperationKindsCustomerInvoice.SaleToCustomer
 OR Object.OperationKind = Enums.OperationKindsCustomerInvoice.TransferForCommission Then
	OCRName = "GoodsServicesSale";
ElsIf Object.OperationKind = Enums.OperationKindsCustomerInvoice.TransferToProcessing Then
	OCRName = "TransferOfProducts";
ElsIf Object.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToPrincipal
	  OR Object.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnFromProcessing
	  OR Object.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToVendor Then
	OCRName = "ReturnProductsToSupplier";
EndIf;</BeforeObjectExport>
				</Rule>
				<Rule Disable="false">
					<Code>AgentReport</Code>
					<Description>Document "Agent report"</Description>
					<Order>400</Order>
					<ConversionRuleCode>AgentSalesReport                        </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.AgentReport</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>InvoiceForPayment</Code>
					<Description>Document "Invoice for payment"</Description>
					<Order>450</Order>
					<ConversionRuleCode>InvoiceForPayment                            </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.InvoiceForPayment</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>CustomerInvoiceNote</Code>
					<Description>Document "Invoice note"</Description>
					<Order>1400</Order>
					<ConversionRuleCode>CustomerInvoiceNote                               </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.CustomerInvoiceNote</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>ProcessingReport</Code>
					<Description>Document "Processing report"</Description>
					<Order>1700</Order>
					<ConversionRuleCode>ImplementationServicesForProcessing                      </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.ProcessingReport</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>WorkOrder</Code>
					<Description>CustomerOrder</Description>
					<Order>1800</Order>
					<ConversionRuleCode>JobOrderActOnProvisionOfIndustrialServices      </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.CustomerOrder</SelectionObject>
					<BeforeObjectExport>If Object.Inventory.Count() &gt; 0 Then
	DumpByRule(
		Object,
		,
		,
		,
		"JobOrderImplementationProductsServices"
	);
EndIf;

If Object.ConsumerMaterials.Count() &gt; 0
 OR Object.Materials.Count() &gt; 0 Then
	DumpByRule(
		Object,
		,
		,
		,
		"JobOrderRequirementSlip"
	);
EndIf;</BeforeObjectExport>
				</Rule>
			</Group>
			<Group Disable="false">
				<Code>ProcurementAndPurchasing</Code>
				<Description>ProcurementAndPurchasing</Description>
				<Order>1500</Order>
				<Rule Disable="false">
					<Code>ExpenseReport</Code>
					<Description>Document "Expense report"</Description>
					<Order>50</Order>
					<ConversionRuleCode>ExpenseReport                                    </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.ExpenseReport</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>SupplierInvoiceNote</Code>
					<Description>Document "Customer invoice note received"</Description>
					<Order>100</Order>
					<ConversionRuleCode>SupplierInvoiceNote                             </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.SupplierInvoiceNote</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>SupplierInvoice</Code>
					<Description>Document "Supplier invoice"</Description>
					<Order>300</Order>
					<Description>For documents From kind Operations "Return from customer", "Return from consignee" used OCR "ReturnOfProductsFromCustomer".
For documents From kind Operations "Receipt to consignement", "Receipt to processing", "Receipt from vendor" used OCR "ReceiptOfGoodsAndServices".</Description>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.SupplierInvoice</SelectionObject>
					<BeforeObjectExport>If Object.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromCustomer
	OR Object.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromAgent Then

	OCRName = "ReturnOfProductsFromCustomer";
	
ElsIf Object.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionForCommission
	OR Object.OperationKind = Enums.OperationKindsSupplierInvoice.ReceiptFromVendor 
	OR Object.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionIntoProcessing Then
	
	OCRName = "ReceiptOfGoodsAndServices";
	
EndIf;</BeforeObjectExport>
				</Rule>
				<Rule Disable="false">
					<Code>ReportToPrincipal</Code>
					<Description>Document "Principal report"</Description>
					<Order>550</Order>
					<ConversionRuleCode>SalesReportToPrincipal                           </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.ReportToPrincipal</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>AdditionalCosts</Code>
					<Description>Document "Additional costs"</Description>
					<Order>600</Order>
					<ConversionRuleCode>ReceiptOfAdditionalCosts                            </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.AdditionalCosts</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>SubcontractorReport</Code>
					<Description>Document "Subcontractor report"</Description>
					<Order>700</Order>
					<ConversionRuleCode>ReceiptOfProcessing                          </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.SubcontractorReport</SelectionObject>
				</Rule>
			</Group>
			<Group Disable="false">
				<Code>AccountingInventory</Code>
				<Description>AccountingInventory</Description>
				<Order>1550</Order>
				<Rule Disable="false">
					<Code>InventoryTransfer</Code>
					<Description>Document "Inventory transfer"</Description>
					<Order>650</Order>
					<Description>In Dependencies from type Operations and type structural units used OCR "ProductTransfer", "RequestInvoice", "TransferOfMaterialsInOperation", "ReturnOfMaterials".</Description>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.InventoryTransfer</SelectionObject>
					<BeforeObjectExport>If Object.OperationKind = Enums.OperationKindsInventoryTransfer.Move Then
			
	OCRName = "ProductTransfer";
	
	// Delete documents that could have been exported earlier
	WriteToFileObjectDeletion(Object.Ref, "DocumentRef.RequestInvoice", "DocumentRef.InventoryTransfer");
	WriteToFileObjectDeletion(Object.Ref, "DocumentRef.TransferMaterialsToService", "DocumentRef.InventoryTransfer");
	WriteToFileObjectDeletion(Object.Ref, "DocumentRef.ReturnMaterialsFromService", "DocumentRef.InventoryTransfer");
	
ElsIf Object.OperationKind = Enums.OperationKindsInventoryTransfer.WriteOffToExpenses
	AND Object.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Warehouse
	AND Object.StructuralUnitPayee.StructuralUnitType = Enums.StructuralUnitsTypes.Division Then
	
	OCRName = "RequestInvoice";
	
	WriteToFileObjectDeletion(Object.Ref, "DocumentRef.ProductsTransfer", "DocumentRef.InventoryTransfer");
	WriteToFileObjectDeletion(Object.Ref, "DocumentRef.TransferMaterialsToService", "DocumentRef.InventoryTransfer");
	WriteToFileObjectDeletion(Object.Ref, "DocumentRef.ReturnMaterialsFromService", "DocumentRef.InventoryTransfer");
	
ElsIf Object.OperationKind = Enums.OperationKindsInventoryTransfer.TransferToOperation Then
	
	OCRName = "TransferOfMaterialsInOperation";
	
	WriteToFileObjectDeletion(Object.Ref, "DocumentRef.ProductsTransfer", "DocumentRef.InventoryTransfer");
	WriteToFileObjectDeletion(Object.Ref, "DocumentRef.RequestInvoice", "DocumentRef.InventoryTransfer");
	WriteToFileObjectDeletion(Object.Ref, "DocumentRef.ReturnMaterialsFromService", "DocumentRef.InventoryTransfer");
	
ElsIf Object.OperationKind = Enums.OperationKindsInventoryTransfer.ReturnFromExploitation Then
		
	OCRName = "ReturnOfMaterials";
	
	WriteToFileObjectDeletion(Object.Ref, "DocumentRef.ProductsTransfer", "DocumentRef.InventoryTransfer");
	WriteToFileObjectDeletion(Object.Ref, "DocumentRef.RequestInvoice", "DocumentRef.InventoryTransfer");
	WriteToFileObjectDeletion(Object.Ref, "DocumentRef.TransferMaterialsToService", "DocumentRef.InventoryTransfer");
	
EndIf;</BeforeObjectExport>
				</Rule>
				<Rule Disable="false">
					<Code>InventoryReconciliation</Code>
					<Description>Document "Inventory reconciliation"</Description>
					<Order>750</Order>
					<ConversionRuleCode>ProductsAtWarehouseReconciliation                     </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.InventoryReconciliation</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>InventoryReceipt</Code>
					<Description>Document "Inventory receiving"</Description>
					<Order>800</Order>
					<ConversionRuleCode>ProductsPosting                              </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.InventoryReceipt</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>InventoryWriteOff</Code>
					<Description>Document "Inventory write off"</Description>
					<Order>850</Order>
					<Description>In Dependencies from type structural items and flag write-off inventories from operation used OCR "ProductsWriteOff", "CancellationOfService".</Description>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.InventoryWriteOff</SelectionObject>
					<BeforeObjectExport>
If (Object.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Warehouse
	OR Object.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Retail)
	AND Not Object.RetireInventoryFromOperation Then
	
	OCRName = "ProductsWriteOff";
	
ElsIf Object.StructuralUnit.StructuralUnitType = Enums.StructuralUnitsTypes.Division
	AND Object.RetireInventoryFromOperation Then
	
	OCRName = "CancellationOfService";
	
EndIf;</BeforeObjectExport>
				</Rule>
			</Group>
			<Group Disable="false">
				<Code>WorksServicesProduction</Code>
				<Description>WorksServicesProduction</Description>
				<Order>1600</Order>
				<Rule Disable="false">
					<Code>CostAllocation</Code>
					<Description>CostAllocation</Description>
					<Order>1900</Order>
					<ConversionRuleCode>MaterialExpensesDistribution                   </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.CostAllocation</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>ReportProductionShift</Code>
					<Description>Document "Production"</Description>
					<Order>1900</Order>
					<ConversionRuleCode>ReportProductionShift                          </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.InventoryAssembly</SelectionObject>
					<BeforeObjectExport>
If Object.ProductsStructuralUnit &lt;&gt; Object.InventoryStructuralUnit
	AND Object.Products.Count() &gt; 0
	AND Not Object.DeletionMark Then
	
	DumpByRule(Object,,,, "ProductionTransfer");
Else
	DumpByRule(Object,,,, "ProductionTransferDelete");
EndIf;

If Object.DisposalsStructuralUnit &lt;&gt; Object.InventoryStructuralUnit
	AND Object.Disposals.Count() &gt; 0
	AND Not Object.DeletionMark Then
	
	DumpByRule(Object,,,, "WasteTransfer");
Else
	DumpByRule(Object,,,, "WasteTransferDelete");
EndIf;</BeforeObjectExport>
				</Rule>
			</Group>
			<Group Disable="false">
				<Code>CashAssets</Code>
				<Description>CashAssets</Description>
				<Order>1650</Order>
				<Rule Disable="false">
					<Code>PaymentReceipt</Code>
					<Description>Document "Payment receipt"</Description>
					<Order>1200</Order>
					<ConversionRuleCode>ReceiptOnBankAccount                        </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.PaymentReceipt</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>PaymentExpense</Code>
					<Description>Document "Payment expense"</Description>
					<Order>1250</Order>
					<ConversionRuleCode>WriteOffFromCurrentAccount                          </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.PaymentExpense</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>CashReceipt</Code>
					<Description>Document "Petty cash receipt"</Description>
					<Order>1300</Order>
					<ConversionRuleCode>ReceiptCashOrder                            </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.CashReceipt</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>CashPayment</Code>
					<Description>Document "Cash payment"</Description>
					<Order>1350</Order>
					<ConversionRuleCode>ExpenseCashOrder                            </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.CashPayment</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>PaymentOrder</Code>
					<Description>Document "Payment order"</Description>
					<Order>1700</Order>
					<ConversionRuleCode>PaymentOrder                                </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.PaymentOrder</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>CashTransfer</Code>
					<Description>Move money</Description>
					<Order>1750</Order>
					<ConversionRuleCode>MovingDSReceiptCashOrder               </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.CashTransfer</SelectionObject>
					<BeforeObjectExport> If Object.CashCRType = Enums.CashAssetTypes.Noncash
	 AND Object.CashAssetsTypePayee = Enums.CashAssetTypes.Cash Then
	 
	 OCRName = "MovingDSReceiptCashOrder";
	 
 ElsIf Object.CashCRType = Enums.CashAssetTypes.Cash
	 AND Object.CashAssetsTypePayee = Enums.CashAssetTypes.Noncash Then
	 
	 OCRName = "MovingDCExpenseCashOrder";
	 	 
 ElsIf Object.CashCRType = Enums.CashAssetTypes.Noncash
	 AND Object.CashAssetsTypePayee = Enums.CashAssetTypes.Noncash Then
	 
	 OCRName = "MovingCADirectCurrentAccount";
	 
 Else
	 Cancel = True;
 EndIf;</BeforeObjectExport>
				</Rule>
			</Group>
			<Group Disable="false">
				<Code>RetailSales</Code>
				<Description>RetailSales</Description>
				<Order>1750</Order>
				<Rule Disable="false">
					<Code>RetailReport</Code>
					<Description>Document "Retail report"</Description>
					<Order>1700</Order>
					<ConversionRuleCode>RetailReport                           </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.RetailReport</SelectionObject>
				</Rule>
				<Rule Disable="false">
					<Code>RetailRevaluation</Code>
					<Description>Document "Retail revaluation (amount accounting)"</Description>
					<Order>1700</Order>
					<ConversionRuleCode>ReestimationOfProductsInRetail                         </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.RetailRevaluation</SelectionObject>
				</Rule>
			</Group>
			<Group Disable="false">
				<Code>MutualSettlements</Code>
				<Description>MutualSettlements</Description>
				<Order>1850</Order>
				<Rule Disable="false">
					<Code>Netting</Code>
					<Description>Netting</Description>
					<Order>1800</Order>
					<ConversionRuleCode>DebtAdjustment                                </ConversionRuleCode>
					<DataSelectionVariant>StandardSelection</DataSelectionVariant>
					<SelectionObject>DocumentRef.Netting</SelectionObject>
					<BeforeObjectExport>
HasDebt = Object.Debitor.Find(False, "AdvanceFlag") &lt;&gt; Undefined
	OR Object.Creditor.Find(False, "AdvanceFlag") &lt;&gt; Undefined; 

HasAdvance = Object.Debitor.Find(True, "AdvanceFlag") &lt;&gt; Undefined
	OR Object.Creditor.Find(True, "AdvanceFlag") &lt;&gt; Undefined;
	
OutgoingData = New Structure;
OutgoingData.Insert("HasDebt", HasDebt);
OutgoingData.Insert("HasAdvance", HasAdvance);

If HasDebt Then
	DumpByRule(Object,,,, "DebtAdjustment");
Else
	WriteToFileObjectDeletion(Object.Ref, "DocumentRef.DebtAdjustment", "DocumentRef.Netting");
EndIf;

If HasAdvance Then
	DumpByRule(Object,,,, "DebtAdjustmentAdvances");
Else
	DumpByRule(Object,,,, "DebtAdjustmentAdvancesDelete");
EndIf;

Cancel = True;</BeforeObjectExport>
				</Rule>
			</Group>
		</Group>
	</DataUnloadRules>
	<DataClearingRules/>
	<Algorithms>
		<Group Name="Export">
			<Algorithm Name="ExportAlcoholProductsLicenseVendor" UsedOnImport="false">
				<Text>If DataSource = Type("CatalogRef.AlcoholicProductsVendorsLicenses") Then
	LicenseAttributes = CommonUse.ObjectAttributesValues(DataSource, 
		"Owner, LicenseKind, StartDate, EndDate, IssuedBy, Name");
Else
	LicenseAttributes = DataSource;
EndIf;
		
If Not ValueIsFilled(LicenseAttributes.StartDate) Then
	LicenseAttributes.StartDate = Date(1980, 1, 1);
EndIf;

// Create an empty records set
Filter = New ValueTable;
Filter.Columns.Add("Name");
Filter.Columns.Add("Value");
Filter.Columns.Add("Use");

FilterRow = Filter.Add();
FilterRow.Name           = "Vendor";
FilterRow.Value      = LicenseAttributes.Owner;
FilterRow.Use = True;

FilterRow = Filter.Add();
FilterRow.Name           = "LicenseKind";
FilterRow.Value      = LicenseAttributes.LicenseKind;
FilterRow.Use = True;

FilterRow = Filter.Add();
FilterRow.Name           = "Period";
FilterRow.Value      = LicenseAttributes.StartDate;
FilterRow.Use = True;

If Not ValueIsFilled(FilterRow.Value) Then
	Value = Date(1980, 1, 1);
EndIf;

Rows = New ValueTable;
Rows.Columns.Add("Ref");
Rows.Columns.Add("Vendor");
Rows.Columns.Add("LicenseKind");
Rows.Columns.Add("Period");
Rows.Columns.Add("EndDate");
Rows.Columns.Add("IssuedBy");
Rows.Columns.Add("SeriesNumber");

If Not IsRemoval Then

	String = Rows.Add();
	FillPropertyValues(String, LicenseAttributes);
	String.Vendor  = LicenseAttributes.Owner;
	String.Period     = LicenseAttributes.StartDate;
	String.SeriesNumber = LicenseAttributes.Description;
	
EndIf;

// Export
// the set of records create a virtual set of records
RecordSet = New Structure("Filter, Rows");
RecordSet.Filter  = Filter;
RecordSet.Rows = Rows;

DumpRegister(RecordSet, , , True, "AlcoholicProductsVendorLicenses");
</Text>
				<Parameters>DataSource, IsRemoval</Parameters>
			</Algorithm>
			<Algorithm Name="FillInMeasurementUnitInTablePortionOfThe" UsedOnImport="false">
				<Text>If TypeOf(CollectionObject.MeasurementUnit) = Type("CatalogRef.UOM") Then
	Value = CommonUse.GetAttributeValue(CollectionObject.ProductsAndServices, "MeasurementUnit");	
Else
	Value = CollectionObject.MeasurementUnit;
EndIf;</Text>
				<Parameters>Value, CollectionObject</Parameters>
			</Algorithm>
			<Algorithm Name="FillInTablePortionOfThe" UsedOnImport="false">
				<Text>If TypeOf(CollectionObject.MeasurementUnit) = Type("CatalogRef.UOM") Then
	Factor = CollectionObject.MeasurementUnit.Factor;	
	If Factor &gt; 0 Then
		Value = CollectionObject.Count * Factor;
	EndIf;
Else
	Value = CollectionObject.Count;
EndIf;</Text>
				<Parameters>Value, CollectionObject</Parameters>
			</Algorithm>
			<Algorithm Name="FillInTablePortionOfCoefficient" UsedOnImport="false">
				<Text>Value = ?(TypeOf(CollectionObject.MeasurementUnit) = Type("CatalogRef.UOM"), CommonUse.GetAttributeValue(CollectionObject.MeasurementUnit, "Factor"), 1);</Text>
				<Parameters>Value, CollectionObject</Parameters>
			</Algorithm>
			<Algorithm Name="FillCCDNumbersCountriesOrigin" UsedOnImport="false">
				<Text>If TypeOf(ObjectsCollection) = Type("ValueTable")
	AND ObjectsCollection.Count() &gt; 0 Then
	
	TableNumbersCCD = New ValueTable;
	If TypeOf(Source) = Type("DocumentObject.SupplierInvoice")
		OR TypeOf(Source) = Type("DocumentObject.ExpenseReport") Then
		
		Query = New Query;
		Query.Text =
		"SELECT DISTINCT
		|	SupplierInvoiceNoteInventory.ProductsAndServices,
		|	SupplierInvoiceNoteInventory.Characteristic,
		|	SupplierInvoiceNoteInventory.Batch,
		|	SupplierInvoiceNoteInventory.CCDNo,
		|	SupplierInvoiceNoteInventory.CountryOfOrigin,
		|	SUM(SupplierInvoiceNoteInventory.Quantity) AS QuantityInInvoice
		|FROM
		|	Document.SupplierInvoiceNote.Inventory AS SupplierInvoiceNoteInventory
		|WHERE
		|	SupplierInvoiceNoteInventory.Ref.BasisDocument = &amp;BasisDocument
		|
		|GROUP BY
		|	SupplierInvoiceNoteInventory.Characteristic,
		|	SupplierInvoiceNoteInventory.ProductsAndServices,
		|	SupplierInvoiceNoteInventory.CountryOfOrigin,
		|	SupplierInvoiceNoteInventory.CCDNo,
		|	SupplierInvoiceNoteInventory.Batch";
		
		Query.SetParameter("BasisDocument", Source.Ref);
		TableNumbersCCD = Query.Execute().Unload();
		
	ElsIf TypeOf(Source) = Type("DocumentObject.CustomerInvoice") Then
		
		Query = New Query;
		Query.Text =
		"SELECT
		|	CustomerInvoiceNote.Ref
		|INTO AccountsInvoice
		|FROM
		|	Document.CustomerInvoiceNote AS CustomerInvoiceNote
		|WHERE
		|	CustomerInvoiceNote.BasisDocument = &amp;BasisDocument
		|
		|UNION
		|
		|SELECT
		|	InvoiceBasisDocuments.Ref
		|FROM
		|	Document.CustomerInvoiceNote.BasisDocuments AS InvoiceBasisDocuments
		|WHERE
		|	InvoiceBasisDocuments.BasisDocument = &amp;BasisDocument
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|SELECT DISTINCT
		|	InvoiceInventory.ProductsAndServices,
		|	InvoiceInventory.Characteristic,
		|	InvoiceInventory.Batch,
		|	InvoiceInventory.CCDNo,
		|	InvoiceInventory.CountryOfOrigin,
		|	SUM(InvoiceInventory.Quantity) AS QuantityInInvoice
		|FROM
		|	AccountsInvoice AS AccountsInvoice
		|		INNER JOIN Document.CustomerInvoiceNote.Inventory AS InvoiceInventory
		|		BY AccountsInvoice.Ref = InvoiceInventory.Ref
		|
		|GROUP BY
		|	InvoiceInventory.Batch,
		|	InvoiceInventory.ProductsAndServices,
		|	InvoiceInventory.CCDNo,
		|	InvoiceInventory.Characteristic,
		|	InvoiceInventory.CountryOfOrigin";
		
		Query.SetParameter("BasisDocument", Source.Ref);
		TableNumbersCCD = Query.Execute().Unload();
		
	ElsIf TypeOf(Source) = Type("DocumentObject.AgentReport") Then
		
		Query = New Query;
		Query.Text =
		"SELECT
		|	AgentReportCustomers.ConnectionKey,
		|	InvoiceInventory.ProductsAndServices,
		|	InvoiceInventory.Characteristic,
		|	InvoiceInventory.Batch,
		|	InvoiceInventory.CCDNo,
		|	InvoiceInventory.CountryOfOrigin,
		|	SUM(InvoiceInventory.Quantity) AS QuantityInInvoice
		|FROM
		|	Document.AgentReport.Customers AS AgentReportCustomers
		|		INNER JOIN Document.CustomerInvoiceNote.Inventory AS InvoiceInventory
		|		BY AgentReportCustomers.CustomerInvoiceNote = InvoiceInventory.Ref
		|WHERE
		|	AgentReportCustomers.Ref = &amp;Refs
		|
		|GROUP BY
		|	InvoiceInventory.Characteristic,
		|	InvoiceInventory.ProductsAndServices,
		|	InvoiceInventory.CountryOfOrigin,
		|	InvoiceInventory.CCDNo,
		|	InvoiceInventory.Batch,
		|	AgentReportCustomers.ConnectionKey";
		
		Query.SetParameter("Ref", Source.Ref);
		TableNumbersCCD = Query.Execute().Unload();
		
	EndIf;
	
	// Distribution of CCD numbers
	TableInventory	= ObjectsCollection.CopyColumns();
	
	SearchStructure	= New Structure("ProductsAndServices, Characteristic, Batch");
	If TypeOf(Source) = Type("DocumentObject.AgentReport") Then
		SearchStructure.Insert("ConnectionKey");
	EndIf;
	
	For Each TableRow IN ObjectsCollection Do
		
		AmountByRow		= TableRow.Amount;
		VATAmountByRow	= TableRow.VATAmount;
		TotalOnLine		= TableRow.TotalAmount;
		
		SearchStructure.ProductsAndServices	= TableRow.ProductsAndServices;
		SearchStructure.Characteristic	= TableRow.Characteristic;
		SearchStructure.Batch			= TableRow.Batch;
		If SearchStructure.Property("ConnectionKey") Then
			SearchStructure.ConnectionKey = TableRow.ConnectionKey;
		EndIf;
		
		RowsArrayCCD		= TableNumbersCCD.FindRows(SearchStructure);
		
		QuantityBalance	= TableRow.Count;
		For Each ArrayRow IN RowsArrayCCD Do
			
			NewRow = TableInventory.Add();
			FillPropertyValues(NewRow, TableRow);
			
			NewRow.CCDNo			= ArrayRow.CCDNo;
			NewRow.CountryOfOrigin	= ArrayRow.CountryOfOrigin;
			
			If QuantityBalance &lt;= ArrayRow.CountInInvoice Then
				
				NewRow.Count		= QuantityBalance;
				ArrayRow.CountInInvoice	= ArrayRow.CountInInvoice - QuantityBalance;
				QuantityBalance			= 0;
				
				If ArrayRow.CountInInvoice = 0 Then
					TableNumbersCCD.Delete(ArrayRow);
				EndIf;
				
				NewRow.Amount		= AmountByRow;
				NewRow.VATAmount	= VATAmountByRow;
				NewRow.TotalAmount		= TotalOnLine;
				
				Break;
				
			Else
				
				NewRow.Count	= ArrayRow.CountInInvoice;
				QuantityBalance		= QuantityBalance - ArrayRow.CountInInvoice;
				TableNumbersCCD.Delete(ArrayRow);
				
				NewRow.Amount = NewRow.Count * NewRow.Price;
				
				If ObjectsCollection.Columns.Find("DiscountMarkupPercent") &lt;&gt; Undefined Then
					If TableRow.DiscountMarkupPercent = 100 Then
						NewRow.Amount = 0;
					ElsIf Not TableRow.DiscountMarkupPercent = 0
						AND Not NewRow.Count = 0 Then
						
						NewRow.Amount = NewRow.Amount * (1 - TableRow.DiscountMarkupPercent / 100);
					EndIf;
				EndIf;
				
				VATRate			 = ?(ValueIsFilled(NewRow.VATRate), NewRow.VATRate.Rate, 0);
				NewRow.VATAmount = ?(Source.AmountIncludesVAT, 
					NewRow.Amount - (NewRow.Amount) / ((VATRate + 100) / 100),
					NewRow.Amount * VATRate / 100);
				
				NewRow.TotalAmount    = NewRow.Amount + ?(Source.AmountIncludesVAT, 0, NewRow.VATAmount);
				
				AmountByRow		 = AmountByRow - NewRow.Amount;
				VATAmountByRow	 = VATAmountByRow - NewRow.VATAmount;
				TotalOnLine		 = TotalOnLine - NewRow.TotalAmount;
				
			EndIf;
			
		EndDo;
		
		If QuantityBalance &gt; 0 Then
			
			NewRow				= TableInventory.Add();
			FillPropertyValues(NewRow, TableRow);
			
			NewRow.Count			= QuantityBalance;
			
			NewRow.Amount				= AmountByRow;
			NewRow.VATAmount			= VATAmountByRow;
			NewRow.TotalAmount				= TotalOnLine;
			
		EndIf;
		
	EndDo;
	
	ObjectsCollection = TableInventory;
	
EndIf;</Text>
				<Parameters>ObjectsCollection, Source</Parameters>
			</Algorithm>
			<Algorithm Name="FillInVatRateOfRemuneration" UsedOnImport="false">
				<Text>If Source.VATCommissionFeePercent.NotTaxable Then
	Expression = "Enums.VATRates.WithoutVAT";	
ElsIf Source.VATCommissionFeePercent.Rate = 18
	 AND Not Source.VATCommissionFeePercent.Calculated Then
	Expression = "Enums.VATRates.VAT18";
ElsIf Source.VATCommissionFeePercent.Rate = 18
		AND Source.VATCommissionFeePercent.Calculated Then
	Expression = "Enums.VATRates.VAT18_118";
ElsIf Source.VATCommissionFeePercent.Rate = 10 
	 AND Not Source.VATCommissionFeePercent.Calculated Then
	Expression = "Enums.VATRates.VAT10";
ElsIf Source.VATCommissionFeePercent.Rate = 10 
		AND Source.VATCommissionFeePercent.Calculated Then
	Expression = "Enums.VATRates.VAT10_110";
ElsIf Source.VATCommissionFeePercent.Rate = 0 Then
	Expression = "Enums.VATRates.VAT0"; 
ElsIf Source.VATCommissionFeePercent.Rate = 20
	 AND Not Source.VATCommissionFeePercent.Calculated Then
	Expression = "Enums.VATRates.VAT20";
ElsIf Source.VATCommissionFeePercent.Rate = 20
		AND Source.VATCommissionFeePercent.Calculated Then
	Expression = "Enums.VATRates.VAT20_120";
Else
	Expression = "Enums.VATRates.VAT18";
EndIf;</Text>
				<Parameters>Expression, Source</Parameters>
			</Algorithm>
			<Algorithm Name="FillVatRateTableParts" UsedOnImport="false">
				<Text>// The algorithm is designed to fill in VAT rate
// in the typical tabular section Called in the handler "before export" PCR.
If CollectionObject.VATRate.NotTaxable Then
	Expression = "Enums.VATRates.WithoutVAT";	
ElsIf CollectionObject.VATRate.Rate = 18
		AND Not CollectionObject.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT18";
ElsIf CollectionObject.VATRate.Rate = 18
		AND CollectionObject.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT18_118";
ElsIf CollectionObject.VATRate.Rate = 10 
	 AND Not CollectionObject.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT10";
ElsIf CollectionObject.VATRate.Rate = 10 
		AND CollectionObject.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT10_110";
ElsIf CollectionObject.VATRate.Rate = 0 Then
	Expression = "Enums.VATRates.VAT0"; 
ElsIf CollectionObject.VATRate.Rate = 20
	 AND Not CollectionObject.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT20";
ElsIf CollectionObject.VATRate.Rate = 20
		AND CollectionObject.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT20_120";
Else
	Expression = "Enums.VATRates.VAT18";
EndIf;</Text>
				<Parameters>Expression, CollectionObject</Parameters>
			</Algorithm>
			<Algorithm Name="FillInVatRateCaps" UsedOnImport="false">
				<Text>If Source.VATRate.NotTaxable Then
	Expression = "Enums.VATRates.WithoutVAT";	
ElsIf Source.VATRate.Rate = 18
	 AND Not Source.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT18";
ElsIf Source.VATRate.Rate = 18
		AND Source.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT18_118";
ElsIf Source.VATRate.Rate = 10 
	 AND Not Source.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT10";
ElsIf Source.VATRate.Rate = 10 
		AND Source.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT10_110";
ElsIf Source.VATRate.Rate = 0 Then
	Expression = "Enums.VATRates.VAT0"; 
ElsIf Source.VATRate.Rate = 20
	 AND Not Source.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT20";
ElsIf Source.VATRate.Rate = 20
		AND Source.VATRate.Calculated Then
	Expression = "Enums.VATRates.VAT20_120";
Else
	Expression = "Enums.VATRates.VAT18";
EndIf;</Text>
				<Parameters>Expression, Source</Parameters>
			</Algorithm>
			<Algorithm Name="FillPriceInTabularSection" UsedOnImport="false">
				<Text>If TypeOf(CollectionObject.MeasurementUnit) = Type("CatalogRef.UOM") Then
	Factor = CollectionObject.MeasurementUnit.Factor;	
	If Factor &gt; 0 Then
		Value = CollectionObject.Price / Factor;
	EndIf;
Else
	Value = CollectionObject.Price;
EndIf;</Text>
				<Parameters>Value, CollectionObject</Parameters>
			</Algorithm>
			<Algorithm Name="DefineAccountingAccountByOperation" UsedOnImport="false">
				<Text>AccountingRecord = "";

If ValueIsFilled(Operation)
	AND TypeOf(Operation) = Type("ChartOfAccountsRef.Managerial") Then
	
	AccountProperties = CommonUse.ObjectAttributesValues(Operation, "GLAccountType, Currency");
	
	DocumentInCurrency = False;
	If AccountProperties.Currency = True Then
		DocumentMetadata = Document.Metadata();
		If DocumentMetadata.Attributes.Find("DocumentCurrency") &lt;&gt; Undefined Then 
			If Document.DocumentCurrency &lt;&gt; Constants.NationalCurrency.Get() Then
				DocumentInCurrency = True;
			EndIf;
		EndIf;
	EndIf;
	
	TypeOfAccount = AccountProperties.TypeOfAccount;
	If TypeOfAccount = Enums.GLAccountsTypes.OtherIncome Then
		AccountingRecord = "91.01";
	ElsIf TypeOfAccount = Enums.GLAccountsTypes.OtherExpenses Then
		AccountingRecord = "91.02";
	ElsIf TypeOfAccount = Enums.GLAccountsTypes.CashAssets Then
		If Operation = ChartsOfAccounts.Managerial.FinancialInvestments Then
			AccountingRecord = "58.03";
		ElsIf DocumentInCurrency = True Then
			AccountingRecord = "57.21";
		Else
			AccountingRecord = "57.01";
		EndIf;
	ElsIf TypeOfAccount = Enums.GLAccountsTypes.CreditsAndLoans Then
		If DocumentInCurrency = True Then
			AccountingRecord = "66.23";
		Else
			AccountingRecord = "66.03";
		EndIf;
	ElsIf TypeOfAccount = Enums.GLAccountsTypes.LongtermObligations Then
		If DocumentInCurrency = True Then
			AccountingRecord = "67.23";
		Else
			AccountingRecord = "67.03";
		EndIf;
	ElsIf TypeOfAccount = Enums.GLAccountsTypes.Debitors
		OR TypeOfAccount = Enums.GLAccountsTypes.Creditors Then
		If DocumentInCurrency = True Then
			AccountingRecord = "76.29";
		Else
			AccountingRecord = "76.09";
		EndIf;	
	ElsIf TypeOfAccount = Enums.GLAccountsTypes.Capital Then
		AccountingRecord = "80.09";
		
	ElsIf TypeOfAccount = Enums.GLAccountsTypes.Expenses Then
		If Operation = ChartsOfAccounts.Managerial.CommercialExpenses Then
			If GetFunctionalOption("UseSubsystemProduction") = True Then
				AccountingRecord = "44.02";
			Else
				AccountingRecord = "44.01";
			EndIf;
		Else
			AccountingRecord = "26";
		EndIf;
	EndIf;
EndIf;</Text>
				<Parameters>AccountingRecord, Operation, Document</Parameters>
			</Algorithm>
			<Algorithm Name="DetermineNameOfPwcFoundationDocument" UsedOnImport="false">
				<Text>If TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.CustomerOrder") Then
	If CollectionObject.DocumentType = "SalesOfGoodsAndServices" Then
		OCRName = "JobOrderImplementationProductsServices";
	Else
		OCRName = "JobOrderActOnProvisionOfIndustrialServices";
	EndIf;
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.CustomerInvoice") Then
	If CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.SaleToCustomer
	 OR CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.TransferForCommission Then
		OCRName = "GoodsServicesSale";
	ElsIf CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.TransferToProcessing Then
		OCRName = "TransferOfProducts";
	ElsIf CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToPrincipal
		  OR CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnFromProcessing
		  OR CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToVendor Then
		OCRName = "ReturnProductsToSupplier";
	EndIf;
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.SupplierInvoice") Then
	If CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromCustomer
	 OR CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromAgent Then
		OCRName = "ReturnOfProductsFromCustomer";
	ElsIf CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionForCommission
		  OR CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionIntoProcessing
		  OR CollectionObject.BasisDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceiptFromVendor Then
		OCRName = "ReceiptOfGoodsAndServices";
	EndIf;
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.AcceptanceCertificate") Then
	OCRName = "ActOnProvisionOfIndustrialServices";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.AgentReport") Then
	OCRName = "AgentSalesReport";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.PaymentExpense") Then
	OCRName = "WriteOffFromCurrentAccount";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.ProcessingReport") Then
	OCRName = "ImplementationServicesForProcessing";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.ExpenseReport") Then
	OCRName = "ExpenseReport";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.CustomerOrder") Then
	OCRName = "GoodsServicesSale";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.SubcontractorReport") Then
	OCRName = "ReceiptOfProcessing";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.ReportToPrincipal") Then
	OCRName = "SalesReportToPrincipal";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.CashPayment") Then
	OCRName = "ExpenseCashOrder";
ElsIf TypeOf(CollectionObject.BasisDocument) = Type("DocumentRef.AdditionalCosts") Then
	OCRName = "ReceiptOfAdditionalCosts";
EndIf;</Text>
				<Parameters>OCRName, CollectionObject</Parameters>
			</Algorithm>
			<Algorithm Name="DetermineOCRNameAccountsDocument" UsedOnImport="false">
				<Text>If TypeOf(CollectionObject.Document) = Type("DocumentRef.CustomerOrder") 
	AND CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerOrder.JobOrder Then
	
	If CollectionObject.Document.Works.Count() &gt; 0 Then
		OCRName = "ActOnProvisionOfIndustrialServices";
	Else
		OCRName = "GoodsServicesSale";
	EndIf;

ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.CustomerInvoice") Then
	If CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerInvoice.SaleToCustomer
	 OR CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerInvoice.TransferForCommission Then
		OCRName = "GoodsServicesSale";
	ElsIf CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerInvoice.TransferToProcessing Then
		OCRName = "TransferOfProducts";
	ElsIf CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToPrincipal
		  OR CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnFromProcessing
		  OR CollectionObject.Document.OperationKind = Enums.OperationKindsCustomerInvoice.ReturnToVendor Then
		OCRName = "ReturnProductsToSupplier";
	EndIf;
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.SupplierInvoice") Then
	If CollectionObject.Document.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromCustomer
	 OR CollectionObject.Document.OperationKind = Enums.OperationKindsSupplierInvoice.ReturnFromAgent Then
		OCRName = "ReturnOfProductsFromCustomer";
	ElsIf CollectionObject.Document.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionForCommission
		  OR CollectionObject.Document.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionIntoProcessing
		  OR CollectionObject.Document.OperationKind = Enums.OperationKindsSupplierInvoice.ReceiptFromVendor Then
		OCRName = "ReceiptOfGoodsAndServices";
	EndIf;
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.AcceptanceCertificate") Then
	OCRName = "ActOnProvisionOfIndustrialServices";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.AgentReport") Then
	OCRName = "AgentSalesReport";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.PaymentExpense") Then
	OCRName = "WriteOffFromCurrentAccount";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.ProcessingReport") Then
	OCRName = "ImplementationServicesForProcessing";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.ExpenseReport") Then
	OCRName = "ExpenseReport";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.CustomerOrder") Then
	OCRName = "GoodsServicesSale";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.SubcontractorReport") Then
	OCRName = "ReceiptOfProcessing";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.ReportToPrincipal") Then
	OCRName = "SalesReportToPrincipal";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.CashPayment") Then
	OCRName = "ExpenseCashOrder";
ElsIf TypeOf(CollectionObject.Document) = Type("DocumentRef.AdditionalCosts") Then
	OCRName = "ReceiptOfAdditionalCosts";
EndIf;</Text>
				<Parameters>OCRName, CollectionObject</Parameters>
			</Algorithm>
			<Algorithm Name="GetOCRForStructuralUnit" UsedOnImport="false">
				<Text>
If StructuralUnit.StructuralUnitType &lt;&gt; Enums.StructuralUnitsTypes.Division Then
	OCRName = "Warehouses";
Else
	OCRName = "ProductionWarehouses";
	DumpByRule(StructuralUnit,,,, OCRName);
EndIf;</Text>
				<Parameters>StructuralUnit, OCRName</Parameters>
			</Algorithm>
			<Algorithm Name="GenerateStructureOfMutualCountsContract" UsedOnImport="false">
				<Text>
Contract = ?(TabularSectionName = "", Source.Contract, CollectionObject.Contract);
Counterparty = ?(TabularSectionName = "Debitor", Source.CounterpartySource, Source.Counterparty); 

If Counterparty.DoOperationsByContracts &lt;&gt; True Then
	
	OCRName = "CounterpartyContracts";
	
	ContractKindsList = Catalogs.CounterpartyContracts.GetContractKindsListForDocument(Source, Source.OperationKind);
		
	If Contract.Company &lt;&gt; Source.Company
		OR ContractKindsList.FindByValue(Contract.ContractKind) = Undefined Then 
			
		StructureOfTreaty = New Structure;
		StructureOfTreaty.Insert("Description");
		StructureOfTreaty.Insert("Owner");
		StructureOfTreaty.Insert("Code");
		StructureOfTreaty.Insert("Company");
		StructureOfTreaty.Insert("DeletionMark");
		StructureOfTreaty.Insert("SettlementsInStandardUnits");
		StructureOfTreaty.Insert("SettlementsCurrency");
		StructureOfTreaty.Insert("IsFolder");
		StructureOfTreaty.Insert("ContractKind");
		StructureOfTreaty.Insert("PriceKind");
		StructureOfTreaty.Insert("ContractDate");
		StructureOfTreaty.Insert("ContractNo");
			
		FillPropertyValues(StructureOfTreaty, Contract);
			
		StructureOfTreaty.Code = "";
		StructureOfTreaty.Company = Source.Company;
			
		If ContractKindsList.Count() &gt; 0 Then
			StructureOfTreaty.ContractKind = ContractKindsList[0].Value;
		EndIf;
			
		Value = StructureOfTreaty;
			
	EndIf;
	
Else
	
	Value = Contract;
	OCRName = "CounterpartyContractsSearchByIdIdentificator";

EndIf;</Text>
				<Parameters>Source, CollectionObject, TabularSectionName, Value, OCRName</Parameters>
			</Algorithm>
			<Algorithm Name="BuildingStructureOfContractCounterparty" UsedOnImport="false">
				<Text>
If Source.Counterparty.DoOperationsByContracts &lt;&gt; True Then
	
	OCRName = "CounterpartyContracts";
	
	If TypeOf(Source) = Type("DocumentObject.CustomerInvoiceNote") 
		OR TypeOf(Source) = Type("DocumentObject.SupplierInvoiceNote") Then
			
		Document = Source.BasisDocument;
	Else
		Document = Source.Ref;
	EndIf;
		
	If TypeOf(Document) = Type("DocumentRef.AcceptanceCertificate")
		OR TypeOf(Document) = Type("DocumentRef.ExpenseReport")
		OR TypeOf(Document) = Type("DocumentRef.AdditionalCosts")
		OR TypeOf(Document) = Type("DocumentRef.AgentReport") 
		OR TypeOf(Document) = Type("DocumentRef.ReportToPrincipal")
		OR TypeOf(Document) = Type("DocumentRef.ProcessingReport")
		OR TypeOf(Document) = Type("DocumentRef.SubcontractorReport")
		OR TypeOf(Document) = Type("DocumentRef.InvoiceForPayment") Then
			
		ContractKindsList = Catalogs.CounterpartyContracts.GetContractKindsListForDocument(Document);
	Else
		ContractKindsList = Catalogs.CounterpartyContracts.GetContractKindsListForDocument(Document, Document.OperationKind);
	EndIf;
		
	Contract = ?(ValueIsFilled(CollectionObject), CollectionObject.Contract, Source.Contract);
		
	If Contract.Company &lt;&gt; Source.Company
		OR ContractKindsList.FindByValue(Contract.ContractKind) = Undefined Then 
			
		StructureOfTreaty = New Structure;
		StructureOfTreaty.Insert("Description");
		StructureOfTreaty.Insert("Owner");
		StructureOfTreaty.Insert("Code");
		StructureOfTreaty.Insert("Company");
		StructureOfTreaty.Insert("DeletionMark");
		StructureOfTreaty.Insert("SettlementsInStandardUnits");
		StructureOfTreaty.Insert("SettlementsCurrency");
		StructureOfTreaty.Insert("IsFolder");
		StructureOfTreaty.Insert("ContractKind");
		StructureOfTreaty.Insert("PriceKind");
		StructureOfTreaty.Insert("ContractDate");
		StructureOfTreaty.Insert("ContractNo");
			
		FillPropertyValues(StructureOfTreaty, Contract);
			
		StructureOfTreaty.Code = "";
		StructureOfTreaty.Company = Source.Company;
			
		If ContractKindsList.Count() &gt; 0 Then
			StructureOfTreaty.ContractKind = ContractKindsList[0].Value;
		EndIf;
			
		If TypeOf(Source) = Type("DocumentObject.AdditionalCosts") Then
				
			For Each TabularSectionRow IN Source.Inventory Do
				If TypeOf(TabularSectionRow.ReceiptDocument) = Type("DocumentRef.SupplierInvoice")
					AND TabularSectionRow.ReceiptDocument.OperationKind = Enums.OperationKindsSupplierInvoice.ReceptionForCommission Then
						
					StructureOfTreaty.ContractKind = Enums.ContractKinds.FromPrincipal;
					Break;
				EndIf;
			EndDo;
				
		EndIf;
			
		Value = StructureOfTreaty;
			
	EndIf;
	
Else
	
	OCRName = "CounterpartyContractsSearchByIdIdentificator";

EndIf;</Text>
				<Parameters>Source, CollectionObject, Value, OCRName</Parameters>
			</Algorithm>
			<Algorithm Name="GenerateMaterialsDistributionTable" UsedOnImport="false">
				<Text>
ObjectsCollection = New ValueTable;
ObjectsCollection.Columns.Add("ProductsAndServices");
ObjectsCollection.Columns.Add("Count");
ObjectsCollection.Columns.Add("PlacesQuantity");
ObjectsCollection.Columns.Add("MeasurementUnit");
ObjectsCollection.Columns.Add("Factor");
ObjectsCollection.Columns.Add("ProductsAndServicesCategory");

If Source.OperationKind = Enums.OperationKindsInventoryAssembly.Assembly Then
	
	If Source.Products.Count() = 1 Then
		
		For Each TableRow IN Source.Inventory Do
			ProductsAndServicesType = CommonUse.GetAttributeValue(TableRow.ProductsAndServices, "ProductsAndServicesType");
			If ProductsAndServicesType = Enums.ProductsAndServicesTypes.InventoryItem Then
				NewRow = ObjectsCollection.Add();
				FillPropertyValues(NewRow, TableRow);
				NewRow.PlacesQuantity = TableRow.Count;
				NewRow.ProductsAndServicesCategory = CommonUse.GetAttributeValue(Source.Products[0].ProductsAndServices, "ProductsAndServicesCategory"); 
			EndIf;
		EndDo;
		
	Else
		
		DocumentRefInventoryAssembly = Source.Ref;
		
		StructureAdditionalProperties = New Structure;
		SmallBusinessServer.InitializeAdditionalPropertiesForPosting(DocumentRefInventoryAssembly, StructureAdditionalProperties);
		
		Query = New Query;
		Query.Text = 
		"SELECT
		|	InventoryAssemblyProducts.LineNumber AS CorrLineNumber,
		|	InventoryAssemblyProducts.ProductsAndServices AS ProductsAndServicesCorr,
		|	CASE
		|		WHEN &amp;UseCharacteristics
		|			THEN InventoryAssemblyProducts.Characteristic
		|		ELSE VALUE(Catalog.ProductsAndServicesCharacteristics.EmptyRef)
		|	END AS CharacteristicCorr,
		|	CASE
		|		WHEN &amp;UseBatches
		|			THEN InventoryAssemblyProducts.Batch
		|		ELSE VALUE(Catalog.ProductsAndServicesBatches.EmptyRef)
		|	END AS BatchCorr,
		|	InventoryAssemblyProducts.Specification AS SpecificationCorr,
		|	CASE
		|		WHEN InventoryAssemblyProducts.Ref.StructuralUnit.StructuralUnitType = VALUE(Enum.StructuralUnitsTypes.Warehouse)
		|			THEN InventoryAssemblyProducts.ProductsAndServices.InventoryGLAccount
		|		ELSE InventoryAssemblyProducts.ProductsAndServices.ExpensesGLAccount
		|	END AS CorrGLAccount,
		|	CASE
		|		WHEN InventoryAssemblyProducts.Ref.ProductsStructuralUnit.StructuralUnitType = VALUE(Enum.StructuralUnitsTypes.Warehouse)
		|			THEN InventoryAssemblyProducts.ProductsAndServices.InventoryGLAccount
		|		ELSE InventoryAssemblyProducts.ProductsAndServices.ExpensesGLAccount
		|	END AS ProductsGLAccount,
		|	CASE
		|		WHEN InventoryAssemblyProducts.Ref.StructuralUnit.StructuralUnitType = VALUE(Enum.StructuralUnitsTypes.Warehouse)
		|			THEN InventoryAssemblyProducts.ProductsAndServices.InventoryGLAccount
		|		ELSE InventoryAssemblyProducts.ProductsAndServices.ExpensesGLAccount
		|	END AS AccountDr,
		|	CASE
		|		WHEN InventoryAssemblyProducts.Ref.ProductsStructuralUnit.StructuralUnitType = VALUE(Enum.StructuralUnitsTypes.Warehouse)
		|			THEN InventoryAssemblyProducts.ProductsAndServices.InventoryGLAccount
		|		ELSE InventoryAssemblyProducts.ProductsAndServices.ExpensesGLAccount
		|	END AS ProductsAccountDr,
		|	CASE
		|		WHEN InventoryAssemblyProducts.Batch.Status = VALUE(Enum.BatchStatuses.SafeCustody)
		|				OR InventoryAssemblyProducts.Batch.Status = VALUE(Enum.BatchStatuses.ProductsOnCommission)
		|				OR InventoryAssemblyProducts.Batch.Status = VALUE(Enum.BatchStatuses.CommissionMaterials)
		|			THEN InventoryAssemblyProducts.ProductsAndServices.InventoryGLAccount
		|		ELSE CASE
		|				WHEN InventoryAssemblyProducts.Ref.StructuralUnit.StructuralUnitType = VALUE(Enum.StructuralUnitsTypes.Warehouse)
		|					THEN InventoryAssemblyProducts.ProductsAndServices.InventoryGLAccount
		|				ELSE InventoryAssemblyProducts.ProductsAndServices.ExpensesGLAccount
		|			END
		|	END AS ProductsAccountCr,
		|	CASE
		|		WHEN VALUETYPE(InventoryAssemblyProducts.MeasurementUnit) = Type(Catalog.UOMClassifier)
		|			THEN InventoryAssemblyProducts.Count
		|		ELSE InventoryAssemblyProducts.Count * InventoryAssemblyProducts.MeasurementUnit.Factor
		|	END AS CorrQuantity,
		|	FALSE AS Distributed
		|INTO Tu_Products
		|FROM
		|	Document.InventoryAssembly.Products AS InventoryAssemblyProducts
		|WHERE
		|	InventoryAssemblyProducts.Ref = &amp;Refs
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|SELECT
		|	MAX(Tu_Products.CorrLineNumber) AS CorrLineNumber,
		|	Tu_Products.ProductsAndServicesCorr,
		|	Tu_Products.CharacteristicCorr,
		|	Tu_Products.BatchCorr,
		|	Tu_Products.SpecificationCorr,
		|	Tu_Products.CorrGLAccount,
		|	Tu_Products.ProductsGLAccount,
		|	Tu_Products.AccountDr,
		|	Tu_Products.ProductsAccountDr,
		|	Tu_Products.ProductsAccountCr,
		|	SUM(Tu_Products.CorrQuantity) AS CorrQuantity,
		|	Tu_Products.Distributed
		|FROM
		|	Tu_Products AS Tu_Products
		|
		|GROUP BY
		|	Tu_Products.ProductsAndServicesCorr,
		|	Tu_Products.CharacteristicCorr,
		|	Tu_Products.BatchCorr,
		|	Tu_Products.SpecificationCorr,
		|	Tu_Products.CorrGLAccount,
		|	Tu_Products.ProductsGLAccount,
		|	Tu_Products.AccountDr,
		|	Tu_Products.ProductsAccountDr,
		|	Tu_Products.ProductsAccountCr,
		|	Tu_Products.Distributed";
		
		Query.SetParameter("Ref", DocumentRefInventoryAssembly);
		Query.SetParameter("UseCharacteristics", StructureAdditionalProperties.AccountingPolicy.UseCharacteristics);
		Query.SetParameter("UseBatches",  StructureAdditionalProperties.AccountingPolicy.UseBatches);
		
		TableProduction = Query.Execute().Unload();
		Documents.InventoryAssembly.GenerateMaterialsDistributionTableAssembly(DocumentRefInventoryAssembly, StructureAdditionalProperties, TableProduction);
		
		TableMaterialsDistributionAssembly = StructureAdditionalProperties.TableForRegisterRecords.TableMaterialsDistributionAssembly;
		
		Query = New Query;
		Query.Text = 
		"SELECT
		|	TableMaterialsDistributionAssembly.LineNumber,
		|	TableMaterialsDistributionAssembly.ProductsAndServices,
		|	TableMaterialsDistributionAssembly.Count,
		|	TableMaterialsDistributionAssembly.ProductsAndServicesCorr AS Products
		|INTO TU_TableMaterialsDistributionAssembly
		|FROM
		|	&amp;TableMaterialsDistributionAssembly AS TableMaterialsDistributionAssembly
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|SELECT
		|	MAX(TU_TableMaterialsDistributionAssembly.LineNumber) AS LineNumber,
		|	TU_TableMaterialsDistributionAssembly.ProductsAndServices AS ProductsAndServices,
		|	SUM(TU_TableMaterialsDistributionAssembly.Quantity) AS Quantity,
		|	SUM(TU_TableMaterialsDistributionAssembly.Quantity) AS PlacesQuantity,
		|	TU_TableMaterialsDistributionAssembly.Products.ProductsAndServicesCategory AS ProductsAndServicesCategory,
		|	TU_TableMaterialsDistributionAssembly.ProductsAndServices.MeasurementUnit AS MeasurementUnit,
		|	MAX(1) AS Factor
		|FROM
		|	TU_TableMaterialsDistributionAssembly AS TU_TableMaterialsDistributionAssembly
		|
		|GROUP BY
		|	TU_TableMaterialsDistributionAssembly.ProductsAndServices,
		|	TU_TableMaterialsDistributionAssembly.Products.ProductsAndServicesCategory,
		|	TU_TableMaterialsDistributionAssembly.ProductsAndServices.MeasurementUnit
		|
		|ORDER BY
		|	MAX(TU_TableMaterialsDistributionAssembly.LineNumber)";
		
		Query.SetParameter("TableMaterialsDistributionAssembly", TableMaterialsDistributionAssembly);
		
		Selection = Query.Execute().Select();
		While Selection.Next() Do
			NewRow = ObjectsCollection.Add();
			FillPropertyValues(NewRow, Selection);
		EndDo;
		
	EndIf;
	
Else
	
	If Source.Inventory.Count() = 1 Then
		
		For Each TableRow IN Source.Products Do
			ProductsAndServicesType = CommonUse.GetAttributeValue(TableRow.ProductsAndServices, "ProductsAndServicesType");
			If ProductsAndServicesType = Enums.ProductsAndServicesTypes.InventoryItem Then
				NewRow = ObjectsCollection.Add();
				FillPropertyValues(NewRow, TableRow);
				NewRow.PlacesQuantity = TableRow.Count;
				NewRow.ProductsAndServicesCategory = CommonUse.GetAttributeValue(Source.Inventory[0].ProductsAndServices, "ProductsAndServicesCategory"); 
			EndIf;
		EndDo;
		
	Else
		
		DocumentRefInventoryAssembly = Source.Ref;
		
		StructureAdditionalProperties = New Structure;
		SmallBusinessServer.InitializeAdditionalPropertiesForPosting(DocumentRefInventoryAssembly, StructureAdditionalProperties);
		
		Query = New Query;
		Query.Text = 
		"SELECT
		|	InventoryAssemblyProducts.LineNumber AS LineNumber,
		|	InventoryAssemblyProducts.ProductsAndServices AS ProductsAndServices,
		|	CASE
		|		WHEN &amp;UseCharacteristics
		|			THEN InventoryAssemblyProducts.Characteristic
		|		ELSE VALUE(Catalog.ProductsAndServicesCharacteristics.EmptyRef)
		|	END AS Characteristic,
		|	CASE
		|		WHEN &amp;UseBatches
		|			THEN InventoryAssemblyProducts.Batch
		|		ELSE VALUE(Catalog.ProductsAndServicesBatches.EmptyRef)
		|	END AS Batch,
		|	CASE
		|		WHEN &amp;UseBatches
		|			THEN InventoryAssemblyProducts.Batch.Status
		|		ELSE VALUE(Enum.BatchStatuses.EmptyRef)
		|	END AS BatchStatus,
		|	InventoryAssemblyProducts.Specification AS Specification,
		|	CASE
		|		WHEN InventoryAssemblyProducts.Batch.Status = VALUE(Enum.BatchStatuses.SafeCustody)
		|				OR InventoryAssemblyProducts.Batch.Status = VALUE(Enum.BatchStatuses.ProductsOnCommission)
		|				OR InventoryAssemblyProducts.Batch.Status = VALUE(Enum.BatchStatuses.CommissionMaterials)
		|			THEN InventoryAssemblyProducts.ProductsAndServices.InventoryGLAccount
		|		ELSE CASE
		|				WHEN InventoryAssemblyProducts.Ref.StructuralUnit.StructuralUnitType = VALUE(Enum.StructuralUnitsTypes.Warehouse)
		|					THEN InventoryAssemblyProducts.ProductsAndServices.InventoryGLAccount
		|				ELSE InventoryAssemblyProducts.ProductsAndServices.ExpensesGLAccount
		|			END
		|	END AS GLAccount,
		|	CASE
		|		WHEN InventoryAssemblyProducts.Batch.Status = VALUE(Enum.BatchStatuses.SafeCustody)
		|				OR InventoryAssemblyProducts.Batch.Status = VALUE(Enum.BatchStatuses.ProductsOnCommission)
		|				OR InventoryAssemblyProducts.Batch.Status = VALUE(Enum.BatchStatuses.CommissionMaterials)
		|			THEN InventoryAssemblyProducts.ProductsAndServices.InventoryGLAccount
		|		ELSE CASE
		|				WHEN InventoryAssemblyProducts.Ref.InventoryStructuralUnit.StructuralUnitType = VALUE(Enum.StructuralUnitsTypes.Warehouse)
		|					THEN InventoryAssemblyProducts.ProductsAndServices.InventoryGLAccount
		|				ELSE InventoryAssemblyProducts.ProductsAndServices.ExpensesGLAccount
		|			END
		|	END AS InventoryGLAccount,
		|	CASE
		|		WHEN VALUETYPE(InventoryAssemblyProducts.MeasurementUnit) = Type(Catalog.UOMClassifier)
		|			THEN InventoryAssemblyProducts.Count
		|		ELSE InventoryAssemblyProducts.Count * InventoryAssemblyProducts.MeasurementUnit.Factor
		|	END AS Count,
		|	CASE
		|		WHEN InventoryAssemblyProducts.Batch.Status = VALUE(Enum.BatchStatuses.SafeCustody)
		|				OR InventoryAssemblyProducts.Batch.Status = VALUE(Enum.BatchStatuses.ProductsOnCommission)
		|				OR InventoryAssemblyProducts.Batch.Status = VALUE(Enum.BatchStatuses.CommissionMaterials)
		|			THEN InventoryAssemblyProducts.ProductsAndServices.InventoryGLAccount
		|		ELSE CASE
		|				WHEN InventoryAssemblyProducts.Ref.StructuralUnit.StructuralUnitType = VALUE(Enum.StructuralUnitsTypes.Warehouse)
		|					THEN InventoryAssemblyProducts.ProductsAndServices.InventoryGLAccount
		|				ELSE InventoryAssemblyProducts.ProductsAndServices.ExpensesGLAccount
		|			END
		|	END AS AccountCr,
		|	CASE
		|		WHEN VALUETYPE(InventoryAssemblyProducts.MeasurementUnit) = Type(Catalog.UOMClassifier)
		|			THEN InventoryAssemblyProducts.Reserve
		|		ELSE InventoryAssemblyProducts.Reserve * InventoryAssemblyProducts.MeasurementUnit.Factor
		|	END AS Reserve
		|INTO Tu_Products
		|FROM
		|	Document.InventoryAssembly.Products AS InventoryAssemblyProducts
		|WHERE
		|	InventoryAssemblyProducts.Ref = &amp;Refs
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|SELECT
		|	MAX(Tu_Products.LineNumber) AS LineNumber,
		|	Tu_Products.ProductsAndServices,
		|	Tu_Products.Characteristic,
		|	Tu_Products.Batch,
		|	Tu_Products.BatchStatus,
		|	Tu_Products.GLAccount,
		|	Tu_Products.InventoryGLAccount,
		|	Tu_Products.Specification,
		|	SUM(Tu_Products.Quantity) AS Quantity,
		|	SUM(Tu_Products.Reserve) AS Reserve,
		|	Tu_Products.AccountCr,
		|	FALSE AS Distributed
		|FROM
		|	Tu_Products AS Tu_Products
		|
		|GROUP BY
		|	Tu_Products.ProductsAndServices,
		|	Tu_Products.Characteristic,
		|	Tu_Products.Batch,
		|	Tu_Products.BatchStatus,
		|	Tu_Products.GLAccount,
		|	Tu_Products.InventoryGLAccount,
		|	Tu_Products.Specification,
		|	Tu_Products.AccountCr";
		
		Query.SetParameter("Ref", DocumentRefInventoryAssembly);
		Query.SetParameter("UseCharacteristics", StructureAdditionalProperties.AccountingPolicy.UseCharacteristics);
		Query.SetParameter("UseBatches",  StructureAdditionalProperties.AccountingPolicy.UseBatches);
		
		TableProduction = Query.Execute().Unload();
		Documents.InventoryAssembly.GenerateMaterialsDistributionTableDisassembly(DocumentRefInventoryAssembly, StructureAdditionalProperties, TableProduction);
		
		TableOfMaterialsDistributionDisassembling = StructureAdditionalProperties.TableForRegisterRecords.TableOfMaterialsDistributionDisassembling;
		
		Query = New Query;
		Query.Text = 
		"SELECT
		|	TableOfMaterialsDistributionDisassembling.LineNumber,
		|	TableOfMaterialsDistributionDisassembling.ProductsAndServices,
		|	TableOfMaterialsDistributionDisassembling.Count,
		|	TableOfMaterialsDistributionDisassembling.ProductsAndServicesCorr AS Products
		|INTO Tu_TableOfMaterialsDistributionDisassembling
		|FROM
		|	&amp;TableOfMaterialsDistributionDisassembling AS TableOfMaterialsDistributionDisassembling
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|SELECT
		|	MAX(Tu_TableOfMaterialsDistributionDisassembling.LineNumber) AS LineNumber,
		|	Tu_TableOfMaterialsDistributionDisassembling.ProductsAndServices AS ProductsAndServices,
		|	SUM(Tu_TableOfMaterialsDistributionDisassembling.Quantity) AS Quantity,
		|	SUM(Tu_TableOfMaterialsDistributionDisassembling.Quantity) AS PlacesQuantity,
		|	Tu_TableOfMaterialsDistributionDisassembling.Products.ProductsAndServicesCategory AS ProductsAndServicesCategory,
		|	Tu_TableOfMaterialsDistributionDisassembling.ProductsAndServices.MeasurementUnit AS MeasurementUnit,
		|	MAX(1) AS Factor
		|FROM
		|	Tu_TableOfMaterialsDistributionDisassembling AS Tu_TableOfMaterialsDistributionDisassembling
		|
		|GROUP BY
		|	Tu_TableOfMaterialsDistributionDisassembling.ProductsAndServices,
		|	Tu_TableOfMaterialsDistributionDisassembling.Products.ProductsAndServicesCategory,
		|	Tu_TableOfMaterialsDistributionDisassembling.ProductsAndServices.MeasurementUnit
		|
		|ORDER BY
		|	MAX(Tu_TableOfMaterialsDistributionDisassembling.LineNumber)";
		
		Query.SetParameter("TableOfMaterialsDistributionDisassembling", TableOfMaterialsDistributionDisassembling);
		
		Selection = Query.Execute().Select();
		While Selection.Next() Do
			NewRow = ObjectsCollection.Add();
			FillPropertyValues(NewRow, Selection);
		EndDo;
		
	EndIf;
	
EndIf;</Text>
				<Parameters>Source, ObjectsCollection</Parameters>
			</Algorithm>
			<Algorithm Name="GenerateTabularSectionDebitor" UsedOnImport="false">
				<Text>// The algorithm is designed to generate the typical
// Debtor tabular section of the Settlement document Called from the handler "before processor" PGCR

SourceTable = Source.Debitor;
TableDebitor = SourceTable.UnloadColumns();
TableDebitor.Columns.Add("MutualSettlementsExchangeRate");
TableDebitor.Columns.Add("MutualSettlementsCurrencyRate");
TableDebitor.Columns.Add("Amount");

For Each CurRow IN SourceTable Do
	
	If CurRow.AdvanceFlag = AdvanceFlag Then
		
		NewRow = TableDebitor.Add();
		FillPropertyValues(NewRow, CurRow);
		
		ContractCurrency = CurRow.Contract.SettlementsCurrency;
		If ContractCurrency = Parameters.NationalCurrency Then
			NewRow.MutualSettlementsExchangeRate	   = 1;
			NewRow.MutualSettlementsCurrencyRate  = 1;
			NewRow.Amount = NewRow.SettlementsAmount;
		Else
			StructureRate = WorkWithCurrencyRates.GetCurrencyRate(ContractCurrency, Source.Date);
			NewRow.MutualSettlementsExchangeRate	   = StructureRate.ExchangeRate;
			NewRow.MutualSettlementsCurrencyRate  = StructureRate.Multiplicity;
			
			If CurRow.Contract.SettlementsInStandardUnits Then
				NewRow.Amount = WorkWithCurrencyRatesClientServer.RecalculateFromCurrencyToCurrency(NewRow.SettlementsAmount,
					ContractCurrency, Parameters.NationalCurrency,
					NewRow.MutualSettlementsExchangeRate, 1,
					NewRow.MutualSettlementsCurrencyRate, 1
				);
			Else
				NewRow.Amount = NewRow.SettlementsAmount;
			EndIf;
		EndIf;
		
	EndIf;
	
EndDo;

ObjectsCollection = TableDebitor;</Text>
				<Parameters>ObjectsCollection, Source, AdvanceFlag</Parameters>
			</Algorithm>
			<Algorithm Name="GenerateTabularSectionCreditor" UsedOnImport="false">
				<Text>// The algorithm is designed to generate the typical
// Creditor tabular section of the Settlement document Called from the handler "before processor" PGCR

SourceTable = Source.Creditor;
TableCreditor = SourceTable.UnloadColumns();
TableCreditor.Columns.Add("MutualSettlementsExchangeRate");
TableCreditor.Columns.Add("MutualSettlementsCurrencyRate");
TableCreditor.Columns.Add("Amount");

For Each CurRow IN SourceTable Do
	
	If CurRow.AdvanceFlag = AdvanceFlag Then
		
		NewRow = TableCreditor.Add();
		FillPropertyValues(NewRow, CurRow);
		
		ContractCurrency = CurRow.Contract.SettlementsCurrency;
		If ContractCurrency = Parameters.NationalCurrency Then
			NewRow.MutualSettlementsExchangeRate	   = 1;
			NewRow.MutualSettlementsCurrencyRate  = 1;
			NewRow.Amount = NewRow.SettlementsAmount;
		Else
			StructureRate = WorkWithCurrencyRates.GetCurrencyRate(ContractCurrency, Source.Date);
			NewRow.MutualSettlementsExchangeRate	   = StructureRate.ExchangeRate;
			NewRow.MutualSettlementsCurrencyRate  = StructureRate.Multiplicity;
			
			If CurRow.Contract.SettlementsInStandardUnits Then
				NewRow.Amount = WorkWithCurrencyRatesClientServer.RecalculateFromCurrencyToCurrency(NewRow.SettlementsAmount,
					ContractCurrency, Parameters.NationalCurrency,
					NewRow.MutualSettlementsExchangeRate, 1,
					NewRow.MutualSettlementsCurrencyRate, 1
				);
			Else
				NewRow.Amount = NewRow.SettlementsAmount;
			EndIf;
		EndIf;
		
	EndIf;
	
EndDo;

ObjectsCollection = TableCreditor;</Text>
				<Parameters>ObjectsCollection, Source, AdvanceFlag</Parameters>
			</Algorithm>
			<Algorithm Name="GenerateTableOfCustomers" UsedOnImport="false">
				<Text>ATableOfCustomers = New ValueTable;
ATableOfCustomers.Columns.Add("RowKey");
ATableOfCustomers.Columns.Add("Customer");
ATableOfCustomers.Columns.Add("CustomerInvoiceNoteIssued");
ATableOfCustomers.Columns.Add("InvoiceDate");
ATableOfCustomers.Columns.Add("CustomerInvoiceNote");

PaddingValuesLine = New Structure;
PaddingValuesLine.Insert("RowKey", 0);
PaddingValuesLine.Insert("Customer", Source.Counterparty); 

//If there is a written CIN in SB, put it in if there is not, output the check box and fill in the date
PaddingValuesLine.Insert("CustomerInvoiceNoteIssued", True); 

Query = New Query;
Query.Text = 
"SELECT
|	CustomerInvoiceNote.Ref AS InvoiceInvoice
|FROM
|	Document.CustomerInvoiceNote AS CustomerInvoiceNote
|WHERE
|	(CustomerInvoiceNote.BasisDocument = &amp;BasisDocument
|			OR CustomerInvoiceNote.BasisDocuments.Ref = &amp;BasisDocument)
|	AND CustomerInvoiceNote.Posted";

Query.SetParameter("BasisDocument", Source.Ref);
QueryExecutionResult = Query.Execute();

ThereIsWrittenInvoice = False;

If Not QueryExecutionResult.IsEmpty() Then
	
	Selection = QueryExecutionResult.Select();
	Selection.Next();
	
	If ValueIsFilled(Selection.InvoiceInvoice) Then
		
		//There is issued CIN
		PaddingValuesLine.Insert("InvoiceDate",			Selection.InvoiceInvoice.Date);
		PaddingValuesLine.Insert("CustomerInvoiceNote", 	Selection.InvoiceInvoice);
		
		Message("" + Selection.InvoiceInvoice);
		
		ThereIsWrittenInvoice = True;
	EndIf;
	
EndIf;

//There is no written up customer invoice note
If Not ThereIsWrittenInvoice Then 
	
	PaddingValuesLine.Insert("InvoiceDate",			Source.Date);
	
EndIf;

FillPropertyValues(ATableOfCustomers.Add(), PaddingValuesLine);

ObjectsCollection = ATableOfCustomers;</Text>
				<Parameters>ObjectsCollection, Source</Parameters>
			</Algorithm>
			<Algorithm Name="GenerateTableOfProducts" UsedOnImport="false">
				<Text>// The algorithm is designed to generate the typical
// Goods tabular section of the trade documents Called from the handler "before processor" PGCR

// Generate an empty table for storing goods based on the typical Goods tabular section
TableProducts = Source.Inventory.UnloadColumns();
TableProducts.Columns.Add("PlacesQuantity");
SourceTable = Source.Inventory;

// Fill in the result table from the Goods taublar section with products and services different from the services 
For Each CurRow IN SourceTable Do
	If CurRow.ProductsAndServices.ProductsAndServicesType = Enums.ProductsAndServicesTypes.InventoryItem Then
		NewRow = TableProducts.Add();
		FillPropertyValues(NewRow, CurRow);
		NewRow.PlacesQuantity = CurRow.Count;
	EndIf;
EndDo;

// Initialize the collection with the filled in table to prevent the standard collection receipt. 
ObjectsCollection = TableProducts;</Text>
				<Parameters>ObjectsCollection, Source</Parameters>
			</Algorithm>
			<Algorithm Name="GenerateTableOfServices" UsedOnImport="false">
				<Text>// The algorithm is designed to generate the typical
// Services tabular section of the trade documents Called from the handler "before processor" PGCR

// Generate an empty table for storing services based on the typical Goods tabular section
TableService = Source.Inventory.UnloadColumns();
SourceTable = Source.Inventory;

// Fill in the result table from the Goods tabular section with services only 
For Each CurRow IN SourceTable Do
	If CurRow.ProductsAndServices.ProductsAndServicesType = Enums.ProductsAndServicesTypes.Service 
	 OR CurRow.ProductsAndServices.ProductsAndServicesType = Enums.ProductsAndServicesTypes.Work Then
		NewRow = TableService.Add();
		FillPropertyValues(NewRow, CurRow);
	EndIf;
EndDo;

// Initialize the collection with the filled in table to prevent the standard collection receipt
ObjectsCollection = TableService;</Text>
				<Parameters>ObjectsCollection, Source</Parameters>
			</Algorithm>
		</Group>
		<Group Name="Import">
			<Group Name="_FillingDocuments">
				<Algorithm Name="FillingReflectedInSTS" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - TabularSection

If AccountingPolicy.Exists(Object.Company, Object.Date, True, Object.Ref) Then
	
	VariantReflectionOfSFAD = ?(AccountingPolicy.USNApplies(Object.Company, Object.Date) AND
		AccountingPolicy.CSSIsAppliedNIncomeMinusExpenses(Object.Company, Object.Date),
		Enums.ReflectionInUSN.Are Accepted, Enums.ReflectionInUSN.EmptyRef());
	
	// Fill in the reflection in STS for TS
	For Each TableRow IN TabularSection Do
		If Not ValueIsFilled(TableRow.ReflectionInUSN) Or VariantReflectionOfSFAD = Enums.ReflectionInUSN.EmptyRef() Then
			TableRow.ReflectionInUSN = VariantReflectionOfSFAD;
		EndIf;
	EndDo;
	
EndIf;</Text>
					<Parameters>Object, TabularSection</Parameters>
				</Algorithm>
				<Algorithm Name="FillingReflectedVATInCost" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

If AccountingPolicy.Exists(Object.Company, Object.Date, True, Object.Ref) Then
	If Not AccountingPolicy.VATPayer(Object.Company, Object.Date) Then
		Object.VATIncludedToCost = True;
	EndIf;
EndIf;</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessAdvanceReport" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

For Each TableRow IN Object.Products Do
	
		GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(	Object.Company,
																						TableRow.ProductsAndServices,
																						Object.Warehouse);
																						
		If Not ValueIsFilled(TableRow.GLAccount) Then
			TableRow.GLAccount = GLAccounts.GLAccount;
		EndIf;
		If Not ValueIsFilled(TableRow.GlAccountVAT) Then
			TableRow.GlAccountVAT = GLAccounts.GlAccountVAT;
		EndIf;
		
		If ValueIsFilled(GLAccounts.VATAccountingMethod) Then
			TableRow.VATAccountingMethod = ?(TableRow.ServedSF,
				GLAccounts.VATAccountingMethod, Enums.VATAccountingMethods.Written off);
		ElsIf Not TableRow.ServedSF Then 
			TableRow.VATAccountingMethod = Enums.VATAccountingMethods.Written off;	
		ElsIf TableRow.VATAccountingMethod = Enums.VATAccountingMethods.Written off Then
			TableRow.VATAccountingMethod = Undefined;	
		EndIf;
		
EndDo;

For Each TableRow IN Object.Other Do
	
	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(	Object.Company,
																					TableRow.ProductsAndServices,
																					Object.Warehouse);
	
	If Not ValueIsFilled(TableRow.GLExpenseAccount) Then
		TableRow.GLExpenseAccount = GLAccounts.GLAccount;
	EndIf;
	If Not ValueIsFilled(TableRow.ExtDimension1) Then
		TableRow.ExtDimension1 = GLAccounts.ExtDimension1;
	EndIf;
	If Not ValueIsFilled(TableRow.ExtDimension2) Then
		TableRow.ExtDimension2 = GLAccounts.ExtDimension2;
	EndIf;
	If Not ValueIsFilled(TableRow.ExtDimension3) Then
		TableRow.ExtDimension3 = GLAccounts.ExtDimension3;
	EndIf;
	
	If Not ValueIsFilled(TableRow.GLExpenseAccountWELL) Then
		TableRow.GLExpenseAccountWELL = GLAccounts.GLAccount;
	EndIf;
	If Not ValueIsFilled(TableRow.ExtDimensionTA1) Then
		TableRow.ExtDimensionTA1 = GLAccounts.ExtDimension1;
	EndIf;
	If Not ValueIsFilled(TableRow.ExtDimensionTA2) Then
		TableRow.ExtDimensionTA2 = GLAccounts.ExtDimension2;
	EndIf;
	If Not ValueIsFilled(TableRow.ExtDimensionTA3) Then
		TableRow.ExtDimensionTA3 = GLAccounts.ExtDimension3;
	EndIf;
	
	If Not ValueIsFilled(TableRow.GlAccountVAT) 
		AND TableRow.VATRate &lt;&gt; Enums.VATRates.WithoutVAT Then
		TableRow.GlAccountVAT = GLAccounts.GlAccountVAT;
	EndIf;
	
	For Each ExtraDimensionKindsRow IN GLAccounts.GLAccount.ExtDimensionTypes Do
		
		If ValueIsFilled(TableRow["ExtDimension" + ExtraDimensionKindsRow.LineNumber]) Then
			Continue;
		EndIf;
		
		ExtraDimensionTypeDescription = ExtraDimensionKindsRow.ExtDimensionType.ValueType;
		If ExtraDimensionTypeDescription.ContainsType(Type("CatalogRef.CostItems")) Then
			TableRow["ExtDimension" + ExtraDimensionKindsRow.LineNumber] = CommonUseClientServer.PredefinedItem("Catalog.CostItem.OtherCosts");
		ElsIf ExtraDimensionTypeDescription.ContainsType(Type("CatalogRef.OtherIncomeAndExpenses")) Then
			TableRow["ExtDimension" + ExtraDimensionKindsRow.LineNumber] = CommonUseClientServer.PredefinedItem("Catalog.OtherIncomeAndExpenses.OtherExtraordinaryExpensesIncomes");
		ElsIf ExtraDimensionTypeDescription.ContainsType(Type("CatalogRef.ProductsAndServicesCategories")) Then
			TableRow["ExtDimension" + ExtraDimensionKindsRow.LineNumber] = CommonUse.GetAttributeValue(TableRow.ProductsAndServices, "ProductsAndServicesCategory");
		EndIf;
		
		TableRow["ExtraDimensionTaxation" + ExtraDimensionKindsRow.LineNumber] = TableRow["ExtDimension" + ExtraDimensionKindsRow.LineNumber];
	EndDo;
	
	If ValueIsFilled(GLAccounts.VATAccountingMethod) Then
		TableRow.VATAccountingMethod = ?(TableRow.ServedSF,
		GLAccounts.VATAccountingMethod, Enums.VATAccountingMethods.Written off);
	ElsIf Not TableRow.ServedSF Then 
		TableRow.VATAccountingMethod = Enums.VATAccountingMethods.Written off;	
	ElsIf TableRow.VATAccountingMethod = Enums.VATAccountingMethods.Written off Then
		TableRow.VATAccountingMethod = Undefined;	
	EndIf;
	
EndDo;	

ParametersOfTP = Undefined;
If ObjectParameters &lt;&gt; Undefined Then
	
	ParametersOfTP = ObjectParameters.Get("OtherTabularSection");
	If ParametersOfTP &lt;&gt; Undefined 
		AND ParametersOfTP.Columns.Find("ProductionExpense") &lt;&gt; Undefined Then
		
		For Each TableRow IN Object.Other Do	
			
			If Not ValueIsFilled(TableRow.GLExpenseAccount) Then
				If ParametersOfTP[TableRow.LineNumber - 1].ProductionExpense Then
					TableRow.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.GeneralExpenses;
				Else
					TableRow.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.CostOfTreatment;
				EndIf;
				TableRow.ExtDimension1 = CommonUse.GetAttributeValue(TableRow.ProductsAndServices, "CostsItem");
				
				TableRow.GLExpenseAccountWELL = TableRow.GLExpenseAccount;
				TableRow.ExtDimensionTA1 = TableRow.ExtDimension1;
				
				If Not ValueIsFilled(TableRow.ExtDimension1) Then
					TableRow.ExtDimension1 = CommonUseClientServer.PredefinedItem("Catalog.CostItem.OtherCosts");
					TableRow.ExtDimensionTA1 = TableRow.ExtDimension1;
				EndIf;
				
			EndIf;
			
			If Not ValueIsFilled(TableRow.GlAccountVAT) 
				AND TableRow.VATRate &lt;&gt; Enums.VATRates.WithoutVAT Then
				
				GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(	Object.Company,
				TableRow.ProductsAndServices,
				Object.Warehouse);
				TableRow.GlAccountVAT = GLAccounts.GlAccountVAT;
			EndIf;
			
		EndDo;
	EndIf;
EndIf;
	
For Each TableRow IN Object.PaymentToVendor Do
	
	AttributesContractCounterparty = CommonUse.GetAttributeValues(TableRow.CounterpartyContract, "Owner,SettlementsCurrency");
	
	If ValueIsFilled(TableRow.CounterpartyContract) AND Not ValueIsFilled(TableRow.Counterparty) Then
		TableRow.Counterparty = AttributesContractCounterparty.Owner;
	EndIf;
	
	GLAccounts = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(Object.Company,
		TableRow.Counterparty,
		TableRow.CounterpartyContract);
	
	If Not ValueIsFilled(TableRow.GlAccountCalculationsOnAdvances) Then
		TableRow.GlAccountCalculationsOnAdvances   = GLAccounts.AccountAdvances;
	EndIf;
	
	If Not ValueIsFilled(TableRow.GlAccountSettlementsWithCounterparties) Then
		If TableRow.CounterpartyContract.ContractKind = Enums.ContractKindsCounterparties.FromPrincipal Then
			TableRow.GlAccountSettlementsWithCounterparties = GLAccounts.SettlementsAccountWithPrincipal;
		Else
			TableRow.GlAccountSettlementsWithCounterparties = GLAccounts.AccountCalculations;
		EndIf;
	EndIf;
	
	If Not ValueIsFilled(TableRow.Deal) Then
		TableRow.Deal = Undefined;
	EndIf;
	
EndDo;

//Fill in parameters depending on the taxation mode
Execute(Algorithms.FillingReflectedVATInCost);

TabularSection = Object.Products;
Execute(Algorithms.FillingReflectedInSTS);

TabularSection = Object.Other;
Execute(Algorithms.FillingReflectedInSTS);</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessActOnProvisionOfIndustrialServices" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

// Fill in GL account of expenses
If Not ValueIsFilled(Object.GLExpenseAccount) Then
	Object.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.MainProduction;
EndIf;

GLAccounts = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(	Object.Company,
																					Object.Counterparty,
																					Object.CounterpartyContract);
If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
	Object.GlAccountSettlementsWithCounterparties = GLAccounts.CustomerCalculationsAccount;
EndIf;

If Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically
	OR Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument Then
	
	If Not ValueIsFilled(Object.GlAccountCalculationsOnAdvances) Then
		Object.GlAccountCalculationsOnAdvances = GLAccounts.AccountAdvancesCustomer;
	EndIf;
	
Else
	Object.GlAccountCalculationsOnAdvances = ChartsOfAccounts.SelfSupporting.EmptyRef();
EndIf;

TabularSection = Object.Services;
ItServices      = True;
IsComission   = False;
Execute(Algorithms.FillGLAccountsProductsAndServicesSale);

For Each TableRow IN Object.Services Do
	
	If Not ValueIsFilled(TableRow.AmountOfPlanned) Then
		Pricing.FillPlannedCost(TableRow, Object.Date);
		DataProcessorClientServerTableParts.RecalculatePlannedSUM(TableRow, 1);
	EndIf;
	
	If Not ValueIsFilled(TableRow.AmountOfPlanned) Then
		TableRow.PlannedCost = TableRow.Price;
		TableRow.AmountOfPlanned = TableRow.Amount;
	EndIf;
	
	If Not ValueIsFilled(TableRow.Specification) Then
		TableRow.Specification = CommonUse.GetAttributeValue(TableRow.ProductsAndServices, "MainProductsAndServicesSpecification");
	EndIf;
	
EndDo;

//Fill in parameters depending on the taxation mode
Execute(Algorithms.FillingReflectedVATInCost);</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessReturnProductsFromCustomer" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

GLAccounts = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(	Object.Company,
																					Object.Counterparty,
																					Object.CounterpartyContract);
If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
	Object.GlAccountSettlementsWithCounterparties = GLAccounts.CustomerCalculationsAccount;
EndIf;

If Not ValueIsFilled(Object.GlAccountCalculationsOnAdvances) Then	
	Object.GlAccountCalculationsOnAdvances = GLAccounts.AccountAdvancesCustomer;
EndIf;	

If Not ValueIsFilled(Object.SettlementsGLAccountByTare) Then	
	Object.SettlementsGLAccountByTare = GLAccounts.GlAccountPackagingCustomer;
EndIf;

If Not ValueIsFilled(Object.GlAccountVAT) Then
	Object.GlAccountVAT = ChartsOfAccounts.SelfSupporting.VATonAcquiredMPZ;
EndIf;

If ObjectParameters &lt;&gt; Undefined Then
	
	ParametersOfTP = ObjectParameters.Get("ProductsTabularSection");
	If ParametersOfTP &lt;&gt; Undefined AND ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined Then
		
		For Each TableRow IN Object.Products Do	
			
			If Not ValueIsFilled(TableRow.GLAccount)
				AND ParametersOfTP[TableRow.LineNumber - 1].ProductOnCommission Then
				TableRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
			EndIf;
			
		EndDo;
	EndIf;
EndIf;

For Each TableRow IN Object.Products Do
	
	If Not ValueIsFilled(TableRow.ProductsAndServices) Then
		Continue;
	EndIf; 
	
	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(	Object.Company,
																					TableRow.ProductsAndServices,
																					Object.Warehouse);
	
	If Not ValueIsFilled(TableRow.GLAccount) Then
		TableRow.GLAccount = GLAccounts.GLAccount;
	EndIf;
	
	If Not ValueIsFilled(TableRow.TransferredGlAccount) Then
		TableRow.TransferredGlAccount = GLAccounts.TransferAccount;
	EndIf;
	
	If Not ValueIsFilled(TableRow.AccountIncome) Then
		TableRow.AccountIncome = GLAccounts.AccountIncome;
	EndIf;
	
	If Not ValueIsFilled(TableRow.AccountCosts) Then
		TableRow.AccountCosts = GLAccounts.AccountCosts;
	EndIf;
	
	If Not ValueIsFilled(TableRow.GlAccountVATBySale) Then
		TableRow.GlAccountVATBySale = GLAccounts.GlAccountVATSale;
	EndIf;
	
	If ValueIsFilled(TableRow.AccountIncome) Then
		IncomeAccountProperty = AccountingAccountingCallingServerReUse.GetPropertiesAccounts(TableRow.AccountIncome);
		If IncomeAccountProperty.CountExtDimension &gt; 0 Then
			TableRow.ExtDimension = IncomeAccountProperty.ExtDimensionType1ValueType.AdjustValue(TableRow.ExtDimension);
			If TypeOf(TableRow.ExtDimension) = Type("CatalogRef.ProductsAndServicesCategories") Then
				TableRow.ExtDimension = CommonUse.GetAttributeValue(TableRow.ProductsAndServices, "ProductsAndServicesCategory");
			EndIf;
		Else
			TableRow.ExtDimension = Undefined;
		EndIf;
	Else
		TableRow.ExtDimension = Undefined;
	EndIf;
	
	If ValueIsFilled(GLAccounts.VATAccountingMethod) Then
		TableRow.VATAccountingMethod = GLAccounts.VATAccountingMethod;
	EndIf;

EndDo;

TabularSection = Object.Products;
Execute(Algorithms.FillingReflectedInSTS);

Execute(Algorithms.FillReturnablePackagingAccounts);</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessReturnProductsVendor" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

GLAccounts = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(	Object.Company,
																					Object.Counterparty,
																					Object.CounterpartyContract);

If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
	Object.GlAccountSettlementsWithCounterparties = GLAccounts.AccountCalculations;
EndIf;

If Not ValueIsFilled(Object.GlAccountCalculationsOnClaims) Then
	Object.GlAccountCalculationsOnClaims = GLAccounts.PaymentsByClaimsAccount;
EndIf;

If Not ValueIsFilled(Object.SettlementsGLAccountByTare) Then
	Object.SettlementsGLAccountByTare = GLAccounts.GlAccountPackaging;
EndIf;

ProductsOnCommission = Undefined;

If ObjectParameters &lt;&gt; Undefined Then
	ParametersOfTP = ObjectParameters.Get("ProductsTabularSection");
	If ParametersOfTP &lt;&gt; Undefined 
		AND ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined Then
		
		ProductsOnCommission = ParametersOfTP;
	EndIf;
EndIf;
	
For Each TableRow IN Object.Products Do
	
	If ValueIsFilled(TableRow.GLAccount) Then
		Continue;
	EndIf;
	
	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(	Object.Company,
																					TableRow.ProductsAndServices,
																					Object.Warehouse);
	
	ThisCommission = False;
	If Object.OperationKind = Enums.OperationKindsReturnProductsVendor.PurchaseComission Then
		
		If ProductsOnCommission &lt;&gt; Undefined
			AND ProductsOnCommission[TableRow.LineNumber - 1].ProductOnCommission Then
			
			ThisCommission = True;
		EndIf;
		
		If GLAccounts.GlAccountIsOffBalanceSheet = ThisCommission Then
			TableRow.GLAccount = GLAccounts.GLAccount;
		EndIf;
		
		If ThisCommission AND Not GLAccounts.GlAccountIsOffBalanceSheet Then
			TableRow.GLAccount = ChartsOfAccounts.SelfSupporting.EmptyRef();
		Else
			TableRow.GLAccount = GLAccounts.GLAccount;
		EndIf;
		
		If Not ValueIsFilled(TableRow.GLAccount) Then
			TableRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
		EndIf;
		
		TableRow.GlAccountVAT = GLAccounts.GlAccountVAT;
		
	ElsIf Object.OperationKind = Enums.OperationKindsReturnProductsVendor.OfProcessing Then
		
		TableRow.GLAccount = GLAccounts.TolRawGLAccount;
		
	Else
		
		If Not GLAccounts.GlAccountIsOffBalanceSheet Then
			TableRow.GLAccount = GLAccounts.GLAccount;
		EndIf;
		
		TableRow.GlAccountVAT = GLAccounts.GlAccountVAT;
		
	EndIf;
	
EndDo;

//Fill in parameters depending on the taxation mode
Execute(Algorithms.FillingReflectedVATInCost);

Execute(Algorithms.FillReturnablePackagingAccounts);</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessDocumentImportAfterFilling" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - OCRName
// - ObjectParameters

Try
	If TypeOf(Object) = Type("DocumentObject.ExpenseReport") Then

		Execute(Algorithms.ProcessAdvanceReport);
					
	ElsIf TypeOf(Object) = Type("DocumentObject.GoodsServicesReceipt") Then

		Execute(Algorithms.ProcessProductsReceipt);
		
	ElsIf TypeOf(Object) = Type("DocumentObject.AdditionalCostsReceipt") Then

		Execute(Algorithms.HandleReceiptAddCosts);
		
	ElsIf TypeOf(Object) = Type("DocumentObject.ReturnGoodsToVendor") Then
		
		Execute(Algorithms.ProcessReturnProductsVendor);
		
	ElsIf TypeOf(Object) = Type("DocumentObject.GoodsServicesSale") Then
		
		Execute(Algorithms.ProcessProductsSale);
		
	ElsIf TypeOf(Object) = Type("DocumentObject.ProductionServicesProvidedCertificate") Then
		
		Execute(Algorithms.ProcessActOnProvisionOfIndustrialServices);
		
	ElsIf TypeOf(Object) = Type("DocumentObject.RequestInvoice") Then
		
		Execute(Algorithms.HandleSaleInvoiceRequirement);
		
	ElsIf TypeOf(Object) = Type("DocumentObject.ProductionReportForShift") Then
		
		Execute(Algorithms.ProcessProductionReportForShift);
		
	ElsIf TypeOf(Object) = Type("DocumentObject.AgentSalesReport") Then
		
		Execute(Algorithms.HandleAgentSalesReport);
		
	ElsIf TypeOf(Object) = Type("DocumentObject.SalesReportToPrincipal") Then
		
		Execute(Algorithms.HandleSalesReportToMeans);
		
	ElsIf TypeOf(Object) = Type("DocumentObject.ReturnGoodsFromCustomer") Then
		
		Execute(Algorithms.ProcessReturnProductsFromCustomer);
		
	ElsIf TypeOf(Object) = Type("DocumentObject.ReceiptFromProcessor") Then
		
		Execute(Algorithms.HandleReceiptFromProcessing);
		
	ElsIf TypeOf(Object) = Type("DocumentObject.ProcessorServicesImplementation") Then
		
		Execute(Algorithms.ProcessImplementationServicesForProcessing);
		                                                                      
	ElsIf TypeOf(Object) = Type("DocumentObject.GoodsTransfer") Then
		
		Execute(Algorithms.ProcessProductsTransfer);
		
	ElsIf TypeOf(Object) = Type("DocumentObject.GoodsPosting") Then
		
		Execute(Algorithms.HandlePostingProducts);
		                                                                                         
	ElsIf TypeOf(Object) = Type("DocumentObject.GoodsWriteOff") Then
		
		Execute(Algorithms.ProcessProductsWriteOff);
		
	ElsIf TypeOf(Object) = Type("DocumentObject.RetailReport") Then
		
		Execute(Algorithms.ProcessRetailReport);

	ElsIf TypeOf(Object) = Type("DocumentObject.DebtAdjustment") Then
		
		Execute(Algorithms.ProcessDebtAdjustment);
		
	EndIf;
	
Except
	RegisterDoMessageBox(NStr("en='An error occurred while executing a postponed filling. Conversion rules: ';ru='Ошибка при выполнении отложенного заполнения. Правила конвертации: '")+Object);
EndTry

</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessDebtAdjustment" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

If Object.AccountsReceivable.Count()&gt;0 Then
	
	TSName = "AccountsReceivable";
	Execute(Algorithms.ProcessTabularSectionDocumentDebtAdjustment);
	
EndIf;

If Object.AccountsPayable.Count()&gt;0 Then
	
	TSName = "AccountsPayable";
	Execute(Algorithms.ProcessTabularSectionDocumentDebtAdjustment);
	
EndIf;

If Object.OperationKind = Enums.OperationKindsDebtAdjustment.DebtCancellation Then
	
	If Object.AccountsReceivable.Count() &gt; 0
		AND Object.AccountsPayable.Count() = 0
		AND Not ValueIsFilled(Object.AccountDr) Then
		
		Object.AccountDr = ChartsOfAccounts.SelfSupporting.OtherExpenses;
		
	ElsIf Object.AccountsReceivable.Count() = 0
		AND Object.AccountsPayable.Count() &gt; 0
		AND Not ValueIsFilled(Object.AccountCr) Then
		
		Object.AccountCr = ChartsOfAccounts.SelfSupporting.OtherIncome;
		
	EndIf
	
EndIf;

If Object.DocumentCurrency = Constants.CurrencyOfRegulatedAccounting.Get() Then
	Object.DebtDrAmount = Object.AccountsReceivable.Total("Amount");
	Object.CtDebtAmount = Object.AccountsPayable.Total("Amount");
Else
	Object.DebtDrAmount = Object.AccountsReceivable.Total("AmountMutualSettlements");
	Object.CtDebtAmount = Object.AccountsPayable.Total("AmountMutualSettlements");
	
	If Object.AccountsReceivable.Count() &gt; 0
		AND ValueIsFilled(Object.AccountsReceivable[0].CounterpartyContract) Then
		
		Object.DocumentCurrency = Object.AccountsReceivable[0].CounterpartyContract.SettlementsCurrency;
		Object.ExchangeRateDocument	   = Object.AccountsReceivable[0].MutualSettlementsExchangeRate;
		Object.MultiplicityOfDocument  = Object.AccountsReceivable[0].MutualSettlementsCurrencyRate;
		
	ElsIf Object.AccountsPayable.Count() &gt; 0
		AND ValueIsFilled(Object.AccountsPayable[0].CounterpartyContract) Then
		
		Object.DocumentCurrency = Object.AccountsPayable[0].CounterpartyContract.SettlementsCurrency;
		Object.ExchangeRateDocument	   = Object.AccountsPayable[0].MutualSettlementsExchangeRate;
		Object.MultiplicityOfDocument  = Object.AccountsPayable[0].MutualSettlementsCurrencyRate;
		
	EndIf;	
	
EndIf;

If Not ValueIsFilled(Object.OperationKind) Then
	Object.OperationKind = Enums.OperationKindsDebtAdjustment.Other;
EndIf;</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="HandlePostingProducts" UsedOnImport="true">
					<Text>
// Parameters:
// - Object
// - ObjectParameters

If Not ValueIsFilled(Object.OtherIncomeCostsItem) Then
	Object.OtherIncomeCostsItem = CommonUseClientServer.PredefinedItem("Catalog.OtherIncomeAndExpenses.SurplusPosting");
EndIf;

If Not ValueIsFilled(Object.OtherIncomeCostsItem) Then
	Object.OtherIncomeCostsItem = CommonUseClientServer.PredefinedItem("Catalog.OtherIncomeAndExpenses.OtherExtraordinaryExpensesIncomes");
EndIf;

For Each TableRow IN Object.Products Do
	If Not ValueIsFilled(TableRow.GLAccount) Then
		GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(	Object.Company,
																						TableRow.ProductsAndServices,
																						Object.Warehouse);
		TableRow.GLAccount = GLAccounts.GLAccount;
	EndIf;
EndDo;</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="HandleAgentSalesReport" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

Documents.AgentSalesReport.FillAccountsGLAccounts(,False,Object);

TabularSection = Object.Products;
ItServices      = False;
IsComission   = False;
Execute(Algorithms.FillGLAccountsProductsAndServicesSale);

TabularSection = Object.Services;
ItServices      = True;
IsComission   = False;
Execute(Algorithms.FillGLAccountsProductsAndServicesSale);

If Not ValueIsFilled(Object.ExpensesGLAccount) Then
	Object.ExpensesGLAccount = ChartsOfAccounts.SelfSupporting.CostOfTreatment;
	GLAccount = Object.ExpensesGLAccount;
	Execute(Algorithms.DimensionInAccordanceToAccountAccounting);
EndIf;

If Not ValueIsFilled(Object.ExtDimension1) Then
	Object.ExtDimension1 = CommonUseClientServer.PredefinedItem("Catalog.CostItem.AgentServices");
EndIf;

If Not ValueIsFilled(Object.ExtDimension1) Then
	Object.ExtDimension1 = CommonUseClientServer.PredefinedItem("Catalog.CostItem.OtherCosts");
EndIf;

//Fill in parameters depending on the taxation mode
Execute(Algorithms.FillingReflectedVATInCost);</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="HandleSalesReportToMeans" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

GLAccounts = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(	Object.Company,
																					Object.Counterparty,
																					Object.CounterpartyContract);
	
If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
	Object.GlAccountSettlementsWithCounterparties = GLAccounts.CustomerCalculationsAccount;
EndIf;

If Not ValueIsFilled(Object.GlAccountCalculationsOnAdvances) Then
	If Object.KeepRemuneration Then
		Object.GlAccountCalculationsOnAdvances = GLAccounts.SettlementsAccountWithPrincipal;
	Else
		Object.GlAccountCalculationsOnAdvances = GLAccounts.AccountAdvancesCustomer;
	EndIf;
EndIf;

GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(	Object.Company,
																				Object.ServiceRewards);

If Not ValueIsFilled(Object.GlAccountVATBySale) Then
	Object.GlAccountVATBySale = GLAccounts.GlAccountVATSale;
EndIf;

If Not ValueIsFilled(Object.AccountIncome) Then
	Object.AccountIncome = GLAccounts.AccountIncome;
EndIf;

If Object.AccountIncome.ExtDimensionTypes.Count() &gt; 0 Then
	If Object.AccountIncome.ExtDimensionTypes[0].ExtDimensionType.ValueType.ContainsType(TypeOf(Object.ExtDimension)) Then
		//Do not change, the value is appropriate
	Else
		Object.ExtDimension = New(Object.AccountIncome.ExtDimensionTypes[0].ExtDimensionType.ValueType.Types()[0])
	EndIf;
Else
	Object.ExtDimension = Undefined;
EndIf;

If TypeOf(Object.ExtDimension) = Type("CatalogRef.ProductsAndServicesCategories") 
   AND ValueIsFilled(Object.ServiceRewards) 
   AND ValueIsFilled(Object.ServiceRewards.ProductsAndServicesCategory) Then

	Object.ExtDimension = Object.ServiceRewards.ProductsAndServicesCategory;

EndIf;

If Not ValueIsFilled(Object.ServiceRewards) Then
	 Object.ServiceRewards = Parameters.ExchangeNodeForDataImport.ServiceRewards;
 EndIf;</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessRetailReport" UsedOnImport="true">
					<Text>
// Parameters:
// - Object
// - ObjectParameters

Execute(Algorithms.FillGlAccountPettyCashes);

If ObjectParameters &lt;&gt; Undefined Then
	
	ParametersOfTP = ObjectParameters.Get("ProductsTabularSection");
	If ParametersOfTP &lt;&gt; Undefined AND ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined Then
		
		For Each TableRow IN Object.Products Do
			
			If Not ValueIsFilled(TableRow.GLAccount)
				AND ParametersOfTP[TableRow.LineNumber - 1].ProductOnCommission Then
				TableRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
			EndIf;
			
		EndDo;
	EndIf;
EndIf;

TabularSection = Object.Products;
ItServices      = False;
IsComission   = False;

Execute(Algorithms.FillGLAccountsProductsAndServicesSale);

For Each TableRow IN Object.Payment Do
	GLAccounts = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(	Object.Company,
																						TableRow.Counterparty,
																						TableRow.CounterpartyContract);
	If Not ValueIsFilled(TableRow.GlAccountCalculations) Then
		If Not ValueIsFilled(TableRow.PayKind.GlAccountCalculations) Then
			TableRow.GlAccountCalculations = GLAccounts.AccountCalculations;
		Else
			TableRow.GlAccountCalculations = TableRow.PayKind.GlAccountCalculations;
		EndIf;
	EndIf;
EndDo;</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessProductionReportForShift" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

// Fill in the header attributes
If Not ValueIsFilled(Object.GLExpenseAccount) Then
	Object.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.MainProduction;
EndIf;

If Not ValueIsFilled(Object.VATInProductsCost) Then
	Object.VATInProductsCost = Enums.ActionVATInProductsCost.DontChange;
EndIf;

Object.ForWriteOffVATUseAccountAndCostAccountingAnalyst = True;

// Fill in the required attributes in the Production tabular section
For Each CurRow IN Object.Products Do
	
	PlannedCost = CurRow.PlannedCost;
	AmountOfPlanned = CurRow.AmountOfPlanned;
	Pricing.FillPlannedCost(CurRow, Object.Date);
	DataProcessorClientServerTableParts.RecalculatePlannedSUM(CurRow);
	If CurRow.AmountOfPlanned = 0 Then
		CurRow.PlannedCost = PlannedCost;
		CurRow.AmountOfPlanned = AmountOfPlanned;
	EndIf;
	
	If Not ValueIsFilled(CurRow.Account) Then
		GLAccounts						= AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
		CurRow.Account					= GLAccounts.GLAccount;
	EndIf;
	
	If Not ValueIsFilled(CurRow.ProductsAndServicesCategory) Then
		CurRow.ProductsAndServicesCategory	= CommonUse.GetAttributeValue(CurRow.ProductsAndServices, "ProductsAndServicesCategory");
	EndIf;
	
	If Not ValueIsFilled(CurRow.Specification) Then
		CurRow.Specification 			= CurRow.ProductsAndServices.MainProductsAndServicesSpecification;
	EndIf;
	
EndDo;

// Fill in the required attributes in the Services tabular section
For Each CurRow IN Object.Services Do
	
	PlannedCost = CurRow.PlannedCost;
	AmountOfPlanned = CurRow.AmountOfPlanned;
	Pricing.FillPlannedCost(CurRow, Object.Date);
	DataProcessorClientServerTableParts.RecalculatePlannedSUM(CurRow);
	If CurRow.AmountOfPlanned = 0 Then
		CurRow.PlannedCost = PlannedCost;
		CurRow.AmountOfPlanned = AmountOfPlanned;
	EndIf;
	
	GLAccounts 						= AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
	CurRow.Account 					= GLAccounts.GLAccount;
	CurRow.ExtDimension1 			= GLAccounts.ExtDimension1;
	CurRow.ExtDimension2 			= GLAccounts.ExtDimension2;
	CurRow.ExtDimension3 			= GLAccounts.ExtDimension3;
	
	If Not ValueIsFilled(CurRow.ProductsAndServicesCategory) Then
		CurRow.ProductsAndServicesCategory 	= CommonUse.GetAttributeValue(CurRow.ProductsAndServices, "ProductsAndServicesCategory");
	EndIf;
	
	If Not ValueIsFilled(CurRow.Specification) Then
		CurRow.Specification 			= CurRow.ProductsAndServices.MainProductsAndServicesSpecification;
	EndIf;
	
EndDo;

// Fill in the required attributes in the Meterials tabular section
For Each CurRow IN Object.Materials Do
	
	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
	
	If Not ValueIsFilled(CurRow.Account) Then
		CurRow.Account					= GLAccounts.GLAccount;
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.ReflectionInUSN 		= Enums.ReflectionInUSN.Are Accepted;
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem 			= CommonUse.GetAttributeValue(CurRow.ProductsAndServices, "CostsItem");
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem 			= CommonUseClientServer.PredefinedItem("Catalog.CostItem.MaterialsWriteoff");
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem 			= CommonUseClientServer.PredefinedItem("Catalog.CostItem.OtherCosts");
	EndIf;
	
	If Not ValueIsFilled(CurRow.ProductsAndServicesCategory) Then
		CurRow.ProductsAndServicesCategory	= CommonUse.GetAttributeValue(CurRow.ProductsAndServices, "ProductsAndServicesCategory");
	EndIf;
	
	If ValueIsFilled(GLAccounts.VATAccountingMethod) Then
		CurRow.VATAccountingMethod		= GLAccounts.VATAccountingMethod;
	EndIf;
	
EndDo;

If ObjectParameters &lt;&gt; Undefined Then
	ParametersOfTP = ObjectParameters.Get("ReturnWasteTabularSection");
EndIf;

// Fill in required attributes in the Recyclable waste tabular section
For Each CurRow IN Object.ReturnWaste Do
	
	PricesTypePlannedPrimecost   = Constants.PricesTypePlannedPrimecostProductsAndServices.Get();
	CurrencyRegulatedAccounting = Parameters.CurrencyOfRegulatedAccounting;
	
	If ValueIsFilled(PricesTypePlannedPrimecost) Then
		CurRow.Price = Pricing.GetProductsAndServicesPrice(
			CurRow.ProductsAndServices,
			PricesTypePlannedPrimecost,
			Object.Date,
			CurrencyRegulatedAccounting,
			1
		);
	EndIf;
	
	CurRow.Amount = CurRow.Count * CurRow.Price;
	
	If Not ValueIsFilled(CurRow.Account) Then
		GLAccounts					= AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
		CurRow.Account				= GLAccounts.GLAccount;
	EndIf;
	
	If ObjectParameters &lt;&gt; Undefined 
		AND ParametersOfTP.Columns.Find("ProductInProcessing") &lt;&gt; Undefined
		AND ParametersOfTP[CurRow.LineNumber - 1].ProductInProcessing Then
		
		CurRow.Account 				= ChartsOfAccounts.SelfSupporting.MaterialsAcceptedForProcessingInProduction;
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem 		= CommonUse.GetAttributeValue(CurRow.ProductsAndServices, "CostsItem");
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem 		= CommonUseClientServer.PredefinedItem("Catalog.CostItem.MaterialsWriteoff");
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem 		= CommonUseClientServer.PredefinedItem("Catalog.CostItem.OtherCosts");
	EndIf;
	
	If Not ValueIsFilled(CurRow.ProductsAndServicesCategory) Then
		CurRow.ProductsAndServicesCategory = CommonUse.GetAttributeValue(CurRow.ProductsAndServices, "ProductsAndServicesCategory");
	EndIf;
	
EndDo;</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessProductsTransfer" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

GLAccounts = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(Object.Company, Object.Counterparty, Object.CounterpartyContract);

If Not ValueIsFilled(Object.SettlementsGLAccountByTare) Then
	Object.SettlementsGLAccountByTare = GLAccounts.GlAccountPackagingCustomer;
EndIf;

For Each CurRow IN Object.Products Do
	
	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
	
	If Not ValueIsFilled(CurRow.GLAccount) Then
		CurRow.GLAccount		= GLAccounts.GLAccount;
	EndIf;
	
	If Not ValueIsFilled(CurRow.TransferAccount) Then
		CurRow.TransferAccount	= ?(Object.OperationKind = Enums.OperationKindsProductsTransfer.InProcessing, GLAccounts.TransferAccount, GLAccounts.GLAccount);
	EndIf;
	
EndDo;</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="HandleReceiptAddCosts" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

GLAccounts = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(	Object.Company,
																					Object.Counterparty,
																					Object.CounterpartyContract);

If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
	Object.GlAccountSettlementsWithCounterparties = GLAccounts.AccountCalculations;
EndIf;

If Not ValueIsFilled(Object.GlAccountCalculationsOnAdvances) Then
	Object.GlAccountCalculationsOnAdvances = GLAccounts.AccountAdvances;
EndIf;

If Object.Products.Count()&gt;0 Then
	TabularSection = Object.Products;
	Execute(Algorithms.FillingReflectedInSTS);
EndIf;

//Fill in the Goods tabular section
For Each TableRow IN Object.Products Do

	If Not ValueIsFilled(TableRow.ProductsAndServices) Then
		Continue;
	EndIf;

	If Not ValueIsFilled(TableRow.ReflectionInUSN) Then
		TableRow.ReflectionInUSN = Enums.ReflectionInUSN.Are Accepted;
	EndIf;

	// Fill in the GL account of products and services
	Warehouse = Undefined;
	If ValueIsFilled(TableRow.DocumentBatch) AND CommonUseBNCallingServer.IsDocumentAttribute("Warehouse", TableRow.DocumentBatch.Metadata()) Then
		Warehouse = TableRow.DocumentBatch.Warehouse;
	EndIf;

	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(	Object.Company,
																					TableRow.ProductsAndServices, 
																					Warehouse);
	If Not ValueIsFilled(TableRow.GLAccount) Then
		TableRow.GLAccount = GLAccounts.GLAccount;
	EndIf;
	
	If Not ValueIsFilled(TableRow.GlAccountVAT) Then
		TableRow.GlAccountVAT = ChartsOfAccounts.SelfSupporting.VATByPurchasedServices;
	EndIf;
	
	If Not ValueIsFilled(TableRow.GLAccountTA) Then
		TableRow.GLAccountTA = GLAccounts.GLAccount;
	EndIf;
	
	If ValueIsFilled(GLAccounts.VATAccountingMethod) Then
		TableRow.VATAccountingMethod = GLAccounts.VATAccountingMethod;
	EndIf;
	
EndDo;

//Fill in parameters depending on the taxation mode
Execute(Algorithms.FillingReflectedVATInCost);</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="HandleReceiptFromProcessing" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

// Fill in GL account of expenses
If Not ValueIsFilled(Object.GLExpenseAccount) Then
	Object.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.MainProduction;
EndIf;

// Fill in the GL accounts of the counterparties settlements.
GLAccounts = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(
	Object.Company, 
	Object.Counterparty, 
	Object.CounterpartyContract
);

If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
	Object.GlAccountSettlementsWithCounterparties = GLAccounts.AccountCalculations;
EndIf;

If Not ValueIsFilled(Object.GlAccountCalculationsOnAdvances) Then
	Object.GlAccountCalculationsOnAdvances = GLAccounts.AccountAdvances;
EndIf;

// Fill in the required attributes in the Services tabular section 
For Each CurRow IN Object.Services Do
	
	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
	
	If Not ValueIsFilled (CurRow.GlAccountVAT) Then
		CurRow.GlAccountVAT = GLAccounts.GlAccountVAT;
	EndIf;
	
	If Not ValueIsFilled(CurRow.ReflectionInUSN) Then
		CurRow.ReflectionInUSN = Enums.ReflectionInUSN.Are Accepted;
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem = CommonUse.GetAttributeValue(CurRow.ProductsAndServices, "CostsItem");
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem = CommonUseClientServer.PredefinedItem("Catalog.CostItem.MaterialsWriteoff");
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem = CommonUseClientServer.PredefinedItem("Catalog.CostItem.OtherCosts");
	EndIf;
	
	If ValueIsFilled(GLAccounts.VATAccountingMethod) Then
		CurRow.VATAccountingMethod = GLAccounts.VATAccountingMethod;
	EndIf;
	
EndDo;

// Fill in accounts and required attributes in the Return materials tabular section
For Each CurRow IN Object.UsedMaterials Do
	
	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
	
	If Not ValueIsFilled(CurRow.GLAccount) Then
		CurRow.GLAccount 	= GLAccounts.TransferAccount;
	EndIf;
	
	If Not ValueIsFilled(CurRow.ReflectionInUSN) Then
		CurRow.ReflectionInUSN = Enums.ReflectionInUSN.Are Accepted;
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem = CommonUse.GetAttributeValue(CurRow.ProductsAndServices, "CostsItem");
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem = CommonUseClientServer.PredefinedItem("Catalog.CostItem.MaterialsWriteoff");
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem = CommonUseClientServer.PredefinedItem("Catalog.CostItem.OtherCosts");
	EndIf;
	
EndDo;

// Fill in accounts and required attributes in the Return materials tabular section
For Each CurRow IN Object.ReturnedMaterials Do
	
	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
	
	If Not ValueIsFilled(CurRow.GLAccount) Then
		CurRow.GLAccount = GLAccounts.TransferAccount;
	EndIf;
	
	If Not ValueIsFilled(CurRow.TransferAccount) Then
		CurRow.TransferAccount = GLAccounts.GLAccount;
	EndIf;
	
EndDo;

// Fill in accounts in the Products tabular section
For Each CurRow IN Object.Products Do
	
	If Not ValueIsFilled(CurRow.Account) Then
		
		GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
		
		If Not ValueIsFilled(CurRow.Account) Then
			CurRow.Account = GLAccounts.GLAccount;
		EndIf;
		
		If Not ValueIsFilled(CurRow.Specification) Then
			CurRow.Specification = CurRow.ProductsAndServices.MainProductsAndServicesSpecification;
		EndIf;
		
	EndIf;
	
	// Fill in the planned amount in the Products tabular section
	If Not ValueIsFilled(CurRow.AmountOfPlanned) Then    
		
		PricesTypePlannedPrimecost = Parameters.PricesTypePlannedPrimecost;
			CurrencyOfRegulatedAccounting = Parameters.CurrencyOfRegulatedAccounting;
			CurRow.PlannedCost = Pricing.GetProductsAndServicesPrice(
			CurRow.ProductsAndServices,
			PricesTypePlannedPrimecost,
			Object.Date,
			CurrencyOfRegulatedAccounting,
			1
		);
		
		DataProcessorClientServerTableParts.RecalculatePlannedSUM(CurRow);
		
	EndIf;
	
EndDo;

//Fill in parameters depending on the taxation mode
Execute(Algorithms.FillingReflectedVATInCost);</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessProductsReceipt" UsedOnImport="true">
					<Text>	// Parameters:
	// - Object
	// - ObjectParameters
	
	GLAccounts = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(	Object.Company, 
																						Object.Counterparty, 
																						Object.CounterpartyContract);
	ContractKindCounterparty = CommonUse.GetAttributeValue(Object.CounterpartyContract, "ContractKind");
	
	If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
		If ContractKindCounterparty = Enums.ContractKindsCounterparties.FromPrincipal Then
			Object.GlAccountSettlementsWithCounterparties = GLAccounts.SettlementsAccountWithPrincipal;
		ElsIf Object.OperationKind = Enums.OperationKindsFlowOfGoodsAndServices.InProcessing Then
			Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.EmptyRef();
		Else
			Object.GlAccountSettlementsWithCounterparties = GLAccounts.AccountCalculations;
		EndIf;
	EndIf;
	
	If Not ValueIsFilled(Object.GlAccountCalculationsOnAdvances) Then
		If Object.OperationKind = Enums.OperationKindsFlowOfGoodsAndServices.InProcessing
			Or ContractKindCounterparty = Enums.ContractKindsCounterparties.FromPrincipal Then
			Object.GlAccountCalculationsOnAdvances = ChartsOfAccounts.SelfSupporting.EmptyRef();
		Else
			Object.GlAccountCalculationsOnAdvances = GLAccounts.AccountAdvances;
		EndIf;
	EndIf;
	
	//Fill in the Goods tabular section
	For Each TableRow IN Object.Products Do
		
		If Not ValueIsFilled(TableRow.ProductsAndServices) Then
			Continue;
		EndIf;
		
		GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(	Object.Company,
																						TableRow.ProductsAndServices,
																						Object.Warehouse);
		
		If Not ValueIsFilled(TableRow.GLAccount) Then
			
			If Object.OperationKind = Enums.OperationKindsFlowOfGoodsAndServices.PurchaseComission
				AND CommonUse.GetAttributeValue(Object.CounterpartyContract, "ContractKind") = Enums.ContractKindsCounterparties.FromPrincipal Then
				
				If GLAccounts.GlAccountIsOffBalanceSheet = True Then
					TableRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
				Else
					TableRow.GLAccount = ChartsOfAccounts.SelfSupporting.EmptyRef();
				EndIf;
				
			ElsIf Object.OperationKind = Enums.OperationKindsFlowOfGoodsAndServices.InProcessing Then
				
				TableRow.GLAccount = GLAccounts.TolRawGLAccount;
				
			Else
				
				If GLAccounts.GlAccountIsOffBalanceSheet &lt;&gt; True Then
					TableRow.GLAccount = GLAccounts.GLAccount;
				Else
					TableRow.GLAccount = ChartsOfAccounts.SelfSupporting.EmptyRef();
				EndIf;
				
				TableRow.GlAccountVAT = GLAccounts.GlAccountVAT;
			EndIf;
			
		EndIf;
		
		If Object.OperationKind &lt;&gt; Enums.OperationKindsFlowOfGoodsAndServices.InProcessing
			AND ValueIsFilled(GLAccounts.VATAccountingMethod) Then
			
			TableRow.VATAccountingMethod = GLAccounts.VATAccountingMethod;
		EndIf;
		
	EndDo;
	
	If Object.Products.Count()&gt;0 Then
		TabularSection = Object.Products;
		Execute(Algorithms.FillingReflectedInSTS);
	EndIf;
	
	//Fill in the Services tabular section
	For Each TableRow IN Object.Services Do
		
		If Not ValueIsFilled(TableRow.ProductsAndServices) Then
			Continue;
		EndIf;
		
		GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(	Object.Company,
																						TableRow.ProductsAndServices,
																						Object.Warehouse);
		
		If Not ValueIsFilled(TableRow.GLExpenseAccount) Then
			TableRow.GLExpenseAccount = GLAccounts.GLAccount;
		EndIf;
		If Not ValueIsFilled(TableRow.ExtDimension1) Then
			TableRow.ExtDimension1 = GLAccounts.ExtDimension1;
		EndIf;
		If Not ValueIsFilled(TableRow.ExtDimension2) Then
			TableRow.ExtDimension2 = GLAccounts.ExtDimension2;
		EndIf;
		If Not ValueIsFilled(TableRow.ExtDimension3) Then
			TableRow.ExtDimension3 = GLAccounts.ExtDimension3;
		EndIf;
		
		If Not ValueIsFilled(TableRow.GLExpenseAccountWELL) Then
			TableRow.GLExpenseAccountWELL = GLAccounts.GLAccount;
		EndIf;
		If Not ValueIsFilled(TableRow.ExtDimensionTA1) Then
			TableRow.ExtDimensionTA1 = GLAccounts.ExtDimension1;
		EndIf;
		If Not ValueIsFilled(TableRow.ExtDimensionTA2) Then
			TableRow.ExtDimensionTA2 = GLAccounts.ExtDimension2;
		EndIf;
		If Not ValueIsFilled(TableRow.ExtDimensionTA3) Then
			TableRow.ExtDimensionTA3 = GLAccounts.ExtDimension3;
		EndIf;
		
		If Not ValueIsFilled(TableRow.GlAccountVAT) Then 
			TableRow.GlAccountVAT = GLAccounts.GlAccountVAT;
		EndIf;
		
		For Each ExtraDimensionKindsRow IN GLAccounts.GLAccount.ExtDimensionTypes Do
			
			If ValueIsFilled(TableRow["ExtDimension" + ExtraDimensionKindsRow.LineNumber]) Then
				Continue;
			EndIf;
			
			ExtraDimensionTypeDescription = ExtraDimensionKindsRow.ExtDimensionType.ValueType;
			If ExtraDimensionTypeDescription.ContainsType(Type("CatalogRef.CostItems")) Then
				TableRow["ExtDimension" + ExtraDimensionKindsRow.LineNumber] = CommonUseClientServer.PredefinedItem("Catalog.CostItem.OtherCosts");
			ElsIf ExtraDimensionTypeDescription.ContainsType(Type("CatalogRef.OtherIncomeAndExpenses")) Then
				TableRow["ExtDimension" + ExtraDimensionKindsRow.LineNumber] = CommonUseClientServer.PredefinedItem("Catalog.OtherIncomeAndExpenses.OtherExtraordinaryExpensesIncomes");
			ElsIf ExtraDimensionTypeDescription.ContainsType(Type("CatalogRef.ProductsAndServicesCategories")) Then
				TableRow["ExtDimension" + ExtraDimensionKindsRow.LineNumber] = CommonUse.GetAttributeValue(TableRow.ProductsAndServices, "ProductsAndServicesCategory");
			EndIf;
			
			TableRow["ExtraDimensionTaxation" + ExtraDimensionKindsRow.LineNumber] = TableRow["ExtDimension" + ExtraDimensionKindsRow.LineNumber];
		EndDo;
		
		If ValueIsFilled(GLAccounts.VATAccountingMethod) Then 
			TableRow.VATAccountingMethod = GLAccounts.VATAccountingMethod;
		EndIf;
		
	EndDo;
	
	If ObjectParameters &lt;&gt; Undefined Then
		
		ParametersOfTP = ObjectParameters.Get("ProductsTabularSection");
		If ParametersOfTP &lt;&gt; Undefined 
			AND ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined Then
			
			For Each TableRow IN Object.Products Do
				
				If Not ValueIsFilled(TableRow.GLAccount)
					AND ParametersOfTP[TableRow.LineNumber - 1].ProductOnCommission Then
					TableRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
				EndIf;
				
			EndDo;
		EndIf;
		
		ParametersOfTP = ObjectParameters.Get("ServicesTabularSection");
		If ParametersOfTP &lt;&gt; Undefined 
			AND ParametersOfTP.Columns.Find("ProductionExpense") &lt;&gt; Undefined Then
			
			For Each TableRow IN Object.Services Do	
				
				If Not ValueIsFilled(TableRow.GLExpenseAccount) Then
					If ParametersOfTP[TableRow.LineNumber - 1].ProductionExpense Then
						TableRow.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.GeneralExpenses;
					Else
						TableRow.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.CostOfTreatment;
					EndIf;
					TableRow.ExtDimension1 = CommonUse.GetAttributeValue(TableRow.ProductsAndServices, "CostsItem");
					
					TableRow.GLExpenseAccountWELL = TableRow.GLExpenseAccount;
					TableRow.ExtDimensionTA1 = TableRow.ExtDimension1;
					
					If Not ValueIsFilled(TableRow.ExtDimension1) Then
						TableRow.ExtDimension1 = CommonUseClientServer.PredefinedItem("Catalog.CostItem.OtherCosts");
						TableRow.ExtDimensionTA1 = TableRow.ExtDimension1;
					EndIf;
					
				EndIf;
			EndDo;
		EndIf;
	EndIf;
	
	//Fill in parameters depending on the taxation mode
	Execute(Algorithms.FillingReflectedVATInCost);
	
	If Object.Services.Count()&gt;0 Then
		TabularSection = Object.Services;
		Execute(Algorithms.FillingReflectedInSTS);
	EndIf;
	
	//Fill in parameters depending on the taxation mode
	Execute(Algorithms.FillReturnablePackagingAccounts);
</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessProductsSale" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

GLAccounts = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(	Object.Company,
																					Object.Counterparty,
																					Object.CounterpartyContract);
If (CommonUse.GetAttributeValue( Object.CounterpartyContract, "ContractKind") = Enums.ContractKindsCounterparties.WithAgent)
	Or (Object.OperationKind = Enums.OperationKindsImplementationProducts.ShipmentWithoutRightsOfOwnershipChange) Then
		Object.GlAccountSettlementsWithCounterparties = ChartsOfAccounts.SelfSupporting.EmptyRef();
		Object.GlAccountCalculationsOnAdvances = ChartsOfAccounts.SelfSupporting.EmptyRef();
Else
	If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
		Object.GlAccountSettlementsWithCounterparties = GLAccounts.CustomerCalculationsAccount;
	EndIf;
	If (Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.automatically)
		Or (Object.MethodCreditAdvances = Enums.WaysOfOffsettingAdvances.ByDocument) Then
		If Not ValueIsFilled(Object.GlAccountCalculationsOnAdvances) Then
			Object.GlAccountCalculationsOnAdvances = GLAccounts.AccountAdvancesCustomer;
		EndIf;
	Else
		Object.GlAccountCalculationsOnAdvances = ChartsOfAccounts.SelfSupporting.EmptyRef();
	EndIf;
EndIf;

If ObjectParameters &lt;&gt; Undefined Then
	
	ParametersOfTP = ObjectParameters.Get("ProductsTabularSection");
	If ParametersOfTP &lt;&gt; Undefined AND ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined Then
		
		For Each TableRow IN Object.Products Do	
			
			If Not ValueIsFilled(TableRow.GLAccount)
				AND ParametersOfTP[TableRow.LineNumber - 1].ProductOnCommission Then
				TableRow.GLAccount = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
			EndIf;
			
		EndDo;
	EndIf;
EndIf;

TabularSection = Object.Products;
ItServices      = False;
IsComission   = True;
Execute(Algorithms.FillGLAccountsProductsAndServicesSale);

TabularSection = Object.Services;
ItServices      = True;
IsComission   = False;
Execute(Algorithms.FillGLAccountsProductsAndServicesSale);</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessImplementationServicesForProcessing" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

// Fill in the GL accounts of the counterparties settlements.
GLAccounts = AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(
	Object.Company,
	Object.Counterparty,
	Object.CounterpartyContract
);

If Not ValueIsFilled(Object.GlAccountSettlementsWithCounterparties) Then
	Object.GlAccountSettlementsWithCounterparties = GLAccounts.CustomerCalculationsAccount;
EndIf;

If Not ValueIsFilled(Object.GlAccountCalculationsOnAdvances) Then
	Object.GlAccountCalculationsOnAdvances     = GLAccounts.AccountAdvancesCustomer;
EndIf;

PricesTypePlannedPrimecost = Constants.PricesTypePlannedPrimecostProductsAndServices.Get();
CurrencyRegulatedAccounting = Parameters.CurrencyOfRegulatedAccounting;

// Fill in the required attributes in the Services tabular section 
For Each CurRow IN Object.Services Do
	
	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices);
	
	If Not ValueIsFilled(CurRow.AccountIncome) Then
		CurRow.AccountIncome				= GLAccounts.AccountIncome;
	EndIf;
	
	If Not ValueIsFilled(CurRow.AccountCosts) Then
		CurRow.AccountCosts 				= GLAccounts.AccountCosts;
	EndIf;
	
	If Not ValueIsFilled(CurRow.GlAccountVATBySale) Then
		CurRow.GlAccountVATBySale	= GLAccounts.GlAccountVATSale;
	EndIf;
	
	If Not ValueIsFilled(CurRow.GLAccount) Then
		CurRow.GLAccount					= GLAccounts.GLAccount;
	EndIf;
	
	If Not ValueIsFilled(CurRow.AmountOfPlanned) Then
		CurRow.PlannedCost = Pricing.GetProductsAndServicesPrice(
			CurRow.ProductsAndServices,
			PricesTypePlannedPrimecost,
			Object.Date,
			CurrencyRegulatedAccounting,
			1
		);
		
		DataProcessorClientServerTableParts.RecalculatePlannedSUM(CurRow);
	EndIf;
	
	If ValueIsFilled(CurRow.ProductsAndServices) Then
		Content = CommonUse.GetAttributeValue(CurRow.ProductsAndServices, "DescriptionFull");
	EndIf;
	
	CurRow.Content = ?(ValueIsFilled(Content), Content, CommonUse.GetAttributeValue(CurRow.ProductsAndServices, "Description"));
	
EndDo;

For Each CurRow IN Object.ConsumerMaterials Do
	
	If ValueIsFilled(CurRow.GLAccount) Then
		Continue;
	EndIf;
	
	GLAccounts 			= AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices);
	CurRow.GLAccount = GLAccounts.AccountTransferOffBal;
	
	If Not ValueIsFilled(CurRow.GLAccount) Then
		CurRow.GLAccount = ChartsOfAccounts.SelfSupporting.MaterialsAcceptedForProcessingInProduction;	
	EndIf;
	
EndDo;</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessProductsWriteOff" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

TabularSection = Object.Products;

For Each TableRow IN Object.Products Do
	If Not ValueIsFilled(TableRow.GLAccount) Then
		GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(	Object.Company,
																						TableRow.ProductsAndServices,
																						Object.Warehouse);
		TableRow.GLAccount = GLAccounts.GLAccount;
	EndIf;
EndDo;

Execute(Algorithms.FillReturnablePackagingAccounts);

Execute(Algorithms.FillingReflectedInSTS);

Object.DocumentAmount = Object.Products.Total("Amount");</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="ProcessTabularSectionDocumentDebtAdjustment" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters
// - TabularSection

FillCorrAccount = Object.OperationKind = Enums.OperationKindsDebtAdjustment.DebtTransfer;
FillAccountsAccountingAdvances = Object.DebtAdvanceKind = Enums.DebtAdvanceKinds.CustomerAdvances
	OR Object.DebtAdvanceKind = Enums.DebtAdvanceKinds.AdvancesToVendor;

For Each TableRow IN Object[TSName] Do
	
	If Not ValueIsFilled(TableRow.GlAccountCalculations)
		OR Not ValueIsFilled(TableRow.BalancedAccountSettlements) Then
		
		If ValueIsFilled(TableRow.CounterpartyContract) Then
			Attributes 	= AccountingAccountingOverridable.GetCounterpartyContractAttributes(TableRow.CounterpartyContract);
			GLAccounts 	= AccountingAccountingOverridable.GetAccountsCalculationsWithCounterparty(	Object.Company,
																								TableRow.CounterpartyContract.Owner,
																								TableRow.CounterpartyContract);
																								
			If ObjectParameters &lt;&gt; Undefined Then																					
				ParametersOfTP = ObjectParameters.Get(TSName + "TabularSection");
				If ParametersOfTP &lt;&gt; Undefined 
					AND ParametersOfTP.Columns.Find("AdvanceFlag") &lt;&gt; Undefined
					AND ParametersOfTP[TableRow.LineNumber - 1].AdvanceFlag = True Then
					
					FillAccountsAccountingAdvances = True;
				EndIf;
			EndIf;
																								
			If Attributes.ContractKind = Enums.ContractKindsCounterparties.WithVendor
				Or Attributes.ContractKind = Enums.ContractKindsCounterparties.FromPrincipal Then
				
				If Not ValueIsFilled(TableRow.GlAccountCalculations) Then
					If FillAccountsAccountingAdvances Then
						TableRow.GlAccountCalculations = GLAccounts.AccountAdvances;
					Else
						TableRow.GlAccountCalculations = GLAccounts.AccountCalculations;
					EndIf;
				EndIf;
				
				If FillCorrAccount 
					AND Not ValueIsFilled(TableRow.BalancedAccountSettlements) Then
					If FillAccountsAccountingAdvances Then
						TableRow.BalancedAccountSettlements = GLAccounts.AccountAdvances;
					Else
						TableRow.BalancedAccountSettlements = GLAccounts.AccountCalculations;
					EndIf;
				EndIf;
				
			Else
				
				If Not ValueIsFilled(TableRow.GlAccountCalculations) Then
					If FillAccountsAccountingAdvances Then
						TableRow.GlAccountCalculations = GLAccounts.AccountAdvancesCustomer;
					Else
						TableRow.GlAccountCalculations = GLAccounts.CustomerCalculationsAccount;
					EndIf;
				EndIf;
				
				If FillCorrAccount 
					AND Not ValueIsFilled(TableRow.BalancedAccountSettlements) Then
					If FillAccountsAccountingAdvances Then
						TableRow.BalancedAccountSettlements = GLAccounts.AccountAdvancesCustomer;
					Else
						TableRow.BalancedAccountSettlements = GLAccounts.CustomerCalculationsAccount;
					EndIf;
				EndIf;
				
			EndIf;
			
		EndIf;
		
	EndIf;
		
EndDo;</Text>
					<Parameters>Object, ObjectParameters, TSName</Parameters>
				</Algorithm>
				<Algorithm Name="HandleSaleInvoiceRequirement" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - ObjectParameters

// Fill in the header attributes
If Not ValueIsFilled(Object.VATInProductsCost) Then
	Object.VATInProductsCost = Enums.ActionVATInProductsCost.DontChange;
EndIf;

Object.ForWriteOffVATUseAccountAndCostAccountingAnalyst = True;

If ObjectParameters &lt;&gt; Undefined Then
	ParametersOfTP = ObjectParameters.Get("MaterialsTabularSection");
EndIf;

ObjectParametersAreRelevant 	= (ObjectParameters &lt;&gt; Undefined);
If TypeOf(ParametersOfTP) = Type("ValueTable") Then
	IsColumnProductsOnCommission = (ParametersOfTP.Columns.Find("ProductOnCommission") &lt;&gt; Undefined);
Else
	IsColumnProductsOnCommission  = False;
EndIf;

// Fill in the Gl accounts in the Materials tabular section
For Each CurRow IN Object.Materials Do
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem = CommonUse.GetAttributeValue(CurRow.ProductsAndServices, "CostsItem");
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem = CommonUseClientServer.PredefinedItem("Catalog.CostItem.MaterialsWriteoff");
	EndIf;
	
	If Not ValueIsFilled(CurRow.CostsItem) Then
		CurRow.CostsItem = CommonUseClientServer.PredefinedItem("Catalog.CostItem.OtherCosts");
	EndIf;
	
	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices);
	
	If Not ValueIsFilled(CurRow.Account) Then
		CurRow.Account = GLAccounts.GLAccount;
	EndIf;
	
	If ObjectParametersAreRelevant
		AND IsColumnProductsOnCommission
		AND ParametersOfTP[CurRow.LineNumber - 1].ProductOnCommission Then
		
		CurRow.Account = ChartsOfAccounts.SelfSupporting.ProductsAtWarehouse;
		
	EndIf;
	
	If Not ValueIsFilled(CurRow.GLExpenseAccount) Then
		CurRow.GLExpenseAccount = ChartsOfAccounts.SelfSupporting.MainProduction;
	EndIf;
	
	If ValueIsFilled(GLAccounts.VATAccountingMethod) Then 
		CurRow.VATAccountingMethod = GLAccounts.VATAccountingMethod;
	EndIf;
	
EndDo;

// Fill in the Gl accounts in the Materials tabular section
For Each CurRow IN Object.ConsumerMaterials Do
	
	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, CurRow.ProductsAndServices, Object.Warehouse);
	If Not ValueIsFilled(CurRow.Account) Then
		CurRow.Account = GLAccounts.TolRawGLAccount;
	EndIf;
	
	If Not ValueIsFilled(CurRow.TransferAccount) Then
		CurRow.TransferAccount = GLAccounts.AccountTransferOffBal;
	EndIf;
	
	If Not ValueIsFilled(CurRow.TransferAccount) Then
		CurRow.TransferAccount = ChartsOfAccounts.SelfSupporting.MaterialsAcceptedForProcessingInProduction;
	EndIf;
	
EndDo;</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
				<Algorithm Name="DimensionInAccordanceToAccountAccounting" UsedOnImport="true">
					<Text>ItemsExtDimensions = New Structure("ExtDimension1,ExtDimension2,ExtDimension3", Object.ExtDimension1, Object.ExtDimension2, Object.ExtDimension3);
NumberActiveSubkonto = ?(ValueIsFilled(GLAccount), GLAccount.ExtDimensionTypes.Count(), 0);

For Ct = 1 To NumberActiveSubkonto Do
	TypeSubk = GLAccount.ExtDimensionTypes[Ct - 1].ExtDimensionType.ValueType;
	
	If TypeSubk.AdjustValue(ItemsExtDimensions["ExtDimension" + Ct]) &lt;&gt; ItemsExtDimensions["ExtDimension" + Ct] Then
		ItemsExtDimensions["ExtDimension" + Ct] = TypeSubk.AdjustValue(ItemsExtDimensions["ExtDimension" + Ct]);
	EndIf;
	
EndDo;

For Ct = (NumberActiveSubkonto + 1) To 3 Do
	
	If Not ItemsExtDimensions["ExtDimension" + Ct] = Undefined Then
		ItemsExtDimensions["ExtDimension" + Ct] = Undefined;
	EndIf;
	
EndDo;</Text>
					<Parameters>Object, GLAccount</Parameters>
				</Algorithm>
			</Group>
			<Group Name="_HandlersFillAccounts">
				<Algorithm Name="FillReturnablePackagingAccounts" UsedOnImport="true">
					<Text>For Each TableRow IN Object.ReturnTare Do
	
	If Not ValueIsFilled(TableRow.ProductsAndServices) Then
		Continue;
	EndIf; 
	
	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(	Object.Company,
																					TableRow.ProductsAndServices,
																					Object.Warehouse);
	If Not ValueIsFilled(TableRow.GLAccount) Then
		TableRow.GLAccount = GLAccounts.GLAccount;
	EndIf;
	
EndDo;</Text>
					<Parameters>Object</Parameters>
				</Algorithm>
				<Algorithm Name="FillGLAccountsProductsAndServices" UsedOnImport="true">
					<Text>// Parameters:
// - Object
// - TabularSection

For Each TableRow IN TabularSection Do

	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, TableRow.ProductsAndServices);

	If Not ValueIsFilled(TableRow.GLAccount) Then
		TableRow.GLAccount  = GLAccounts.TransferAccount;
	EndIf;

	If Not ValueIsFilled(TableRow.AccountIncome) Then
		TableRow.AccountIncome  = GLAccounts.AccountIncome;
	EndIf;

	If Not ValueIsFilled(TableRow.AccountCosts) Then
		TableRow.AccountCosts = GLAccounts.AccountCosts;
	EndIf;

	If Not ValueIsFilled(TableRow.GlAccountVATBySale) Then
		TableRow.GlAccountVATBySale = GLAccounts.GlAccountVATSale;
	EndIf;

	If TableRow.AccountIncome.ExtDimensionTypes.Count() &gt; 0 Then
		TableRow.ExtDimension = New(TableRow.AccountIncome.ExtDimensionTypes[0].ExtDimensionType.ValueType.Types()[0]);
		If TypeOf(TableRow.ExtDimension) = Type("CatalogRef.ProductsAndServicesCategories") Then
			TableRow.ExtDimension = TableRow.ProductsAndServices.ProductsAndServicesCategory;
		EndIf;
	Else
		TableRow.ExtDimension = Undefined;
	EndIf;
		
EndDo;</Text>
					<Parameters>Object, TabularSection</Parameters>
				</Algorithm>
				<Algorithm Name="FillGLAccountsProductsAndServicesSale" UsedOnImport="true">
					<Text>
// Parameters:
// - Object
// - ObjectParameters
// - TabularSection
// - ItServices
// - IsComission

For Each TableRow IN TabularSection Do
	
	Warehouse = Undefined;
	If Object.Metadata().Attributes.Find("Warehouse") &lt;&gt; Undefined Then
		Warehouse = Object.Warehouse;
	EndIf;
	
	GLAccounts = AccountingAccountingOverridable.GetGLAccountsProductsAndServices(	Object.Company,
																					TableRow.ProductsAndServices,
																					Warehouse);
																	
	If Not ItServices AND Not ValueIsFilled(TableRow.GLAccount) Then
		TableRow.GLAccount = GLAccounts.GLAccount;
		If IsComission Then
			TableRow.TransferredGlAccount = GLAccounts.TransferAccount;
		EndIf;
	EndIf;

	If Not ValueIsFilled(TableRow.AccountIncome) Then
		TableRow.AccountIncome = GLAccounts.AccountIncome;
	EndIf;
	If Not ValueIsFilled(TableRow.AccountCosts) Then
		TableRow.AccountCosts = GLAccounts.AccountCosts;
	EndIf;
	If Not ValueIsFilled(TableRow.GlAccountVATBySale) Then
		TableRow.GlAccountVATBySale = GLAccounts.GlAccountVATSale;
	EndIf;

	If TableRow.AccountIncome.ExtDimensionTypes.Count() &gt; 0 Then
		TableRow.ExtDimension = New(TableRow.AccountIncome.ExtDimensionTypes[0].ExtDimensionType.ValueType.Types()[0]);
		If TypeOf(TableRow.ExtDimension) = Type("CatalogRef.ProductsAndServicesCategories") Then
			TableRow.ExtDimension = TableRow.ProductsAndServices.ProductsAndServicesCategory;
		EndIf;
	Else
		TableRow.ExtDimension = Undefined;
	EndIf;
		
EndDo;</Text>
					<Parameters>Object, ObjectParameters, TabularSection, ItServices, IsComission</Parameters>
				</Algorithm>
				<Algorithm Name="FillAccountsGLAccounts" UsedOnImport="true">
					<Text>// For the objects imported for the first time
If Not ObjectFound Then
	
 	// Fill in the GL accounts of settlements	
	Object.FillAccountsGLAccounts();
	
EndIf;</Text>
					<Parameters>Object, ObjectFound</Parameters>
				</Algorithm>
				<Algorithm Name="FillGlAccountPettyCashes" UsedOnImport="true">
					<Text>
// Parameters:
// - Object
// - ObjectParameters

If Not ValueIsFilled(Object.PettyCash) Then

	If Not ValueIsFilled(Object.DocumentCurrency)
		OR Object.DocumentCurrency = Constants.CurrencyOfRegulatedAccounting.Get() Then
		
		Object.PettyCash = ChartsOfAccounts.SelfSupporting.PettyCashCompanies;
		
	Else
		
		Object.PettyCash = ChartsOfAccounts.SelfSupporting.PettyCashCompaniesCur;
		
	EndIf;

EndIf;</Text>
					<Parameters>Object, ObjectParameters</Parameters>
				</Algorithm>
			</Group>
			<Algorithm Name="FillDocumentAttributes" UsedOnImport="true">
				<Text>// The algorithm is designed to
// fill up the attributes of documents, called in the handler of the "after object import" event conversion.

DocumentMetadata = Object.Metadata();

If CommonUseBNCallingServer.IsDocumentAttribute("ReflectInTaxRegistered", DocumentMetadata) Then
	
	Object.ReflectInTaxRegistered = Not AccountingAccountingOverridable.GetDefaultValue("NotReflectDocumentsInTaxAccounting", Users.CurrentUser());
	
EndIf;
	
If CommonUseBNCallingServer.IsDocumentAttribute("ReflectInAccounting", DocumentMetadata) Then
	
	//All documents require to be recorded in the accounting by default
	Object.ReflectInAccounting = True
	
EndIf;</Text>
				<Parameters>Object</Parameters>
			</Algorithm>
			<Algorithm Name="ImportInformationAboutAlcoholicProducts" UsedOnImport="true">
				<Text>If Object.IsNew() Then
	ObjectReference = Catalogs.ProductsAndServices.GetRef(New UUID);
	Object.SetNewObjectRef(ObjectReference);
Else
	ObjectReference = Object.Ref;
EndIf;
If Not Object.IsFolder Then
	
	// Receive information about alcoholic products
	If ObjectParameters["AlcoholicProducts"] Then
		
		AlcoholicProductsManufacturerImporter = ObjectParameters["AlcoholicProductsManufacturerImporter"];
		
		If ObjectParameters["ImportedAlcoholicProducts"] Then
			Object.Importer      = AlcoholicProductsManufacturerImporter;
			Object.Manufacturer = Undefined;
		Else
			Object.Importer      = Undefined;
			Object.Manufacturer = AlcoholicProductsManufacturerImporter;
		EndIf;
		
		AlcoIRSet = InformationRegisters.InformationAboutAlcoholicProducts.CreateRecordSet();
		AlcoIRSet.Filter.ProductsAndServices.Set(ObjectReference);
		
		AlcoIRRecord = AlcoIRSet.Add();
		
		AlcoIRRecord.ProductsAndServices       = ObjectReference;
		AlcoIRRecord.ProductsKind       = ObjectParameters["AlcoholicProductsKind"];
		AlcoIRRecord.LicenseKind        = ObjectParameters["LicenseKind"];
		AlcoIRRecord.RecalculationRatioDal  = ObjectParameters["VolumeDAL"];
		
		WriteObjectToIB(AlcoIRSet, Type("InformationRegisterRecordSet.InformationAboutAlcoholicProducts"));
		
	EndIf;
	
EndIf;</Text>
				<Parameters>Object, ObjectParameters</Parameters>
			</Algorithm>
			<Algorithm Name="FillPartyTransferMaterialsToCommissioning" UsedOnImport="true">
				<Text>IncludeOffBalance = Not (TypeOf(Object) = Type("DocumentObject.ReturnMaterialsFromService"));
ExpiredUsefulLifeUse	= False;

Query = New Query();
Query.TempTablesManager = New TempTablesManager;

Query.SetParameter("Date",			Object.Date);
Query.SetParameter("Company",	Object.Company);
Query.SetParameter("Division",	Object.CounterpartyDivision);
Query.SetParameter("IncludeOffBalance",                  IncludeOffBalance);
Query.SetParameter("ExpiredUsefulLifeUse", ExpiredUsefulLifeUse);
Query.SetParameter("Period", 		New Boundary(Object.Date, BoundaryType.Excluding));

Query.Text = "
	|/////////////////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	SelfsupportingBalanceLC.ExtDimension1           AS ExtDimension1,
	|	SelfsupportingBalanceLC.ExtDimension2           AS ExtDimension2,
	|	SelfsupportingBalanceLC.ExtDimension3           AS ExtDimension3,
	|	SelfsupportingBalanceLC.QuantityBalanceDt AS QuantityBalanceDt
	|INTO
	|	TU_BalanceMC_Transfer
	|FROM
	|	AccountingRegister.SelfSupporting.Balance(
	|		&amp;Period,
	|		Account = VALUE(ChartOfAccounts.SelfSupporting.WorkingClothesInServiceSupport),
	|		,
	|		Company = &amp;Company
	|			AND (Division = &amp;Division OR Division IS NULL)
	|			AND ExtDimension2 REFS Document.TransferOfMaterialsInOperation
	|	) AS SelfsupportingBalanceLC
	|INDEX BY
	|	ExtDimension1,
	|	ExtDimension2,
	|	ExtDimension3
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	SelfSupportingBalance.Account                AS Account,
	|	SelfSupportingBalance.ExtDimension1           AS ExtDimension1,
	|	SelfSupportingBalance.ExtDimension2           AS ExtDimension2,
	|	SelfSupportingBalance.ExtDimension3           AS ExtDimension3,
	|	SelfSupportingBalance.AmountBalanceDt      AS AmountBalanceDt,
	|	SelfSupportingBalance.QuantityBalanceDt AS QuantityBalanceDt
	|INTO
	|	TU_Balance_Transfer
	|FROM
	|	AccountingRegister.SelfSupporting.Balance(
	|		&amp;Period,
	|		Account Not IN (
	|			VALUE(ChartOfAccounts.SelfSupporting.WorkingClothesInServiceSupport),
	|			VALUE(ChartOfAccounts.SelfSupporting.SpecialisedInServiceSupport)),
	|		,
	|		Company = &amp;Company
	|			AND (Division = &amp;Division OR Division IS NULL)
	|			AND ExtDimension2 REFS Document.TransferOfMaterialsInOperation
	|	) AS SelfSupportingBalance
	|INDEX BY
	|	ExtDimension1,
	|	ExtDimension2,
	|	ExtDimension3
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	SelfsupportingBalanceLC.ExtDimension1           AS ExtDimension1,
	|	SelfsupportingBalanceLC.ExtDimension2           AS ExtDimension2,
	|	SelfsupportingBalanceLC.ExtDimension3           AS ExtDimension3,
	|	SelfsupportingBalanceLC.QuantityBalanceDt AS QuantityBalanceDt
	|INTO
	|	TU_BalanceMC_Batch
	|FROM
	|	AccountingRegister.SelfSupporting.Balance(
	|		&amp;Period,
	|		Account = VALUE(ChartOfAccounts.SelfSupporting.WorkingClothesInServiceSupport),
	|		,
	|		Company = &amp;Company
	|			AND (Division = &amp;Division OR Division IS NULL)
	|			AND ExtDimension2 REFS Document.BatchMaterialsInOperation
	|	) AS SelfsupportingBalanceLC
	|INDEX BY
	|	ExtDimension1,
	|	ExtDimension2,
	|	ExtDimension3
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	SelfSupportingBalance.Account                AS Account,
	|	SelfSupportingBalance.ExtDimension1           AS ExtDimension1,
	|	SelfSupportingBalance.ExtDimension2           AS ExtDimension2,
	|	SelfSupportingBalance.ExtDimension3           AS ExtDimension3,
	|	SelfSupportingBalance.AmountBalanceDt      AS AmountBalanceDt,
	|	SelfSupportingBalance.QuantityBalanceDt AS QuantityBalanceDt
	|INTO
	|	TU_Balance_Batch
	|FROM
	|	AccountingRegister.SelfSupporting.Balance(
	|		&amp;Period,
	|		Account Not IN (
	|			VALUE(ChartOfAccounts.SelfSupporting.WorkingClothesInServiceSupport),
	|			VALUE(ChartOfAccounts.SelfSupporting.SpecialisedInServiceSupport)),
	|		,
	|		Company = &amp;Company
	|			AND (Division = &amp;Division OR Division IS NULL)
	|			AND ExtDimension2 REFS Document.BatchMaterialsInOperation
	|	) AS SelfSupportingBalance
	|INDEX BY
	|	ExtDimension1,
	|	ExtDimension2,
	|	ExtDimension3
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	TU_BalanceMC_Transfer.ExtDimension1                                                              AS ProductsAndServices,
	|	TU_BalanceMC_Transfer.ExtDimension2                                                              AS BatchMaterialsInOperation,
	|	TU_BalanceMC_Transfer.ExtDimension3                                                              AS Ind,
	|	ISNULL(TU_Balance_Transfer.QuantityBalanceDt, TU_BalanceMC_Transfer.QuantityBalanceDt) AS Count,
	|	CASE WHEN ISNULL(TU_Balance_Transfer.QuantityBalanceDt, 0) = 0 THEN
	|		VALUE(ChartOfAccounts.SelfSupporting.WorkingClothesInServiceSupport)
	|	ELSE
	|		TU_Balance_Transfer.Account
	|	END                                                                                        AS TransferAccount
	|FROM
	|	TU_BalanceMC_Transfer
	|
	|	LEFT JOIN
	|	TU_Balance_Transfer
	|	BY
	|		TU_BalanceMC_Transfer.ExtDimension1 = TU_Balance_Transfer.ExtDimension1
	|		AND TU_BalanceMC_Transfer.ExtDimension2 = TU_Balance_Transfer.ExtDimension2
	|		AND TU_BalanceMC_Transfer.ExtDimension3 = TU_Balance_Transfer.ExtDimension3
	|
	|	LEFT JOIN
	|	Document.TransferOfMaterialsInOperation.Working Clothes AS TransferMaterialsInWorkingClothes
	|	BY
	|		TU_BalanceMC_Transfer.ExtDimension1 = TransferMaterialsInWorkingClothes.ProductsAndServices
	|		AND TU_BalanceMC_Transfer.ExtDimension2 = TransferMaterialsInWorkingClothes.Ref
	|		AND TU_BalanceMC_Transfer.ExtDimension3 = TransferMaterialsInWorkingClothes.Ind
	|WHERE
	|	// Include the off-balance ones
	|	((&amp;IncludeOffBalance = FALSE
	|		AND (ISNULL(TU_Balance_Transfer.QuantityBalanceDt, 0) &gt; 0) AND (ISNULL(TU_Balance_Transfer.AmountBalanceDt, 0) &gt; 0))
	|	OR (&amp;IncludeOffBalance))
	|
	|	AND
	|	// Storage expired period
	|	((&amp;ExpiredUsefulLifeUse
	|		AND DATEADD(TU_BalanceMC_Transfer.ExtDimension2.Date, MONTH, TransferMaterialsInWorkingClothes.PurposeUse.UsefulTerm) &lt; &amp;Date)
	|	OR (&amp;ExpiredUsefulLifeUse = FALSE))
	|
	|UNION ALL
	|
	|SELECT
	|	TU_BalanceMC_Batch.ExtDimension1,
	|	TU_BalanceMC_Batch.ExtDimension2,
	|	TU_BalanceMC_Batch.ExtDimension3,
	|	ISNULL(TU_Balance_Batch.QuantityBalanceDt, TU_BalanceMC_Batch.QuantityBalanceDt),
	|	CASE WHEN ISNULL(TU_Balance_Batch.QuantityBalanceDt, 0) = 0 THEN
	|		VALUE(ChartOfAccounts.SelfSupporting.WorkingClothesInServiceSupport)
	|	ELSE
	|		TU_Balance_Batch.Account
	|	END
	|FROM
	|	TU_BalanceMC_Batch
	|
	|	LEFT JOIN
	|	TU_Balance_Batch
	|	BY
	|		TU_BalanceMC_Batch.ExtDimension1 = TU_Balance_Batch.ExtDimension1
	|		AND TU_BalanceMC_Batch.ExtDimension2 = TU_Balance_Batch.ExtDimension2
	|		AND TU_BalanceMC_Batch.ExtDimension3 = TU_Balance_Batch.ExtDimension3
	|WHERE
	|	// Include the off-balance ones
	|	((&amp;IncludeOffBalance = FALSE
	|		AND (ISNULL(TU_Balance_Batch.QuantityBalanceDt, 0) &gt; 0) AND (ISNULL(TU_Balance_Batch.AmountBalanceDt, 0) &gt; 0))
	|	OR (&amp;IncludeOffBalance))
	|
	|	AND
	|	// Storage expired period
	|	((&amp;ExpiredUsefulLifeUse
	|		AND DATEADD(TU_BalanceMC_Batch.ExtDimension2.Date, MONTH, TU_BalanceMC_Batch.ExtDimension2.PurposeUse.UsefulTerm) &lt; &amp;Date)
	|	OR (&amp;ExpiredUsefulLifeUse = FALSE))
	|";

MaterialsRemains 			= Query.Execute().Unload();
TabularSectionSpecialClothing	= Object.Working Clothes.Unload();
FilledSpecialClothing		= TabularSectionSpecialClothing.Copy();

FilledSpecialClothing.Clear();

For Each RowWriteOff from TabularSectionSpecialClothing Do
	
	FilterStructure		= New Structure("ProductsAndServices, Individual", RowWriteOff.ProductsAndServices, RowWriteOff.Ind);
	ArrayBatches		= MaterialsRemains.FindRows(FilterStructure);
	CountBatches	= ArrayBatches.Count();
	
	If CountBatches &lt; 1 Then
		
		NewRow	= FilledSpecialClothing.Add();
		FillPropertyValues(NewRow, RowWriteOff);
		
		//See below
		NewRow.TransferAccount					= ChartsOfAccounts.SelfSupporting.WorkingClothesInOperation;
		If TypeOf(Object) = Type("DocumentObject.ReturnMaterialsFromService") Then
			
			GLAccounts 				= AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, RowWriteOff.ProductsAndServices, Object.Warehouse);
			NewRow.GLAccount	= GLAccounts.GLAccount;
				
		EndIf;
		
		Continue;
		
	EndIf;
	
	QuantityWantedWriteOff	= RowWriteOff.Count;
	BatchNumberInArray			= 0;
	
	While QuantityWantedWriteOff &gt; 0 
		AND BatchNumberInArray &lt;= (CountBatches - 1) Do
		
		Batch = ArrayBatches[BatchNumberInArray];
		
		NewRow									= FilledSpecialClothing.Add();
		NewRow.ProductsAndServices					= RowWriteOff.ProductsAndServices;
		NewRow.BatchMaterialsInOperation 	= Batch.BatchMaterialsInOperation;
		NewRow.Ind							= RowWriteOff.Ind;
		
		//Spec. clothes is always 10.11.1. You do not need to look at GLAccount.TransferAccount.
		NewRow.TransferAccount					= ChartsOfAccounts.SelfSupporting.WorkingClothesInOperation;
		
		If TypeOf(Object) = Type("DocumentObject.ReturnMaterialsFromService") Then
			
			GLAccounts 				= AccountingAccountingOverridable.GetGLAccountsProductsAndServices(Object.Company, RowWriteOff.ProductsAndServices, Object.Warehouse);
			NewRow.GLAccount	= GLAccounts.GLAccount;
				
		EndIf;
		
		If Batch.Count &lt; QuantityWantedWriteOff Then
			
			NewRow.Count	= Batch.Count;
			Batch.Count 		= 0;
			
		Else
			
			NewRow.Count	= QuantityWantedWriteOff;
			Batch.Count 		= Batch.Count - QuantityWantedWriteOff;
			
		EndIf;
		
		QuantityWantedWriteOff	= QuantityWantedWriteOff - NewRow.Count;
		BatchNumberInArray 		= BatchNumberInArray + 1;
		
	EndDo;
	
EndDo;

Object.Working Clothes.Clear();
Object.Working Clothes.Load(FilledSpecialClothing);</Text>
				<Parameters>Object</Parameters>
			</Algorithm>
			<Algorithm Name="FillContentTablePartsServices" UsedOnImport="true">
				<Text>// The algorithm is designed to fill the Content attribute in
// the Documents services TS rows Called from the handler "After import" OCR document
For Each CurRow IN Object.Services Do	
	
	//TabularSectionsProcessor.FillTabSectionContent(CurrString, Object);
	If ValueIsFilled(CurRow.ProductsAndServices) Then
		
		Content = CurRow.ProductsAndServices.DescriptionFull;
		
	EndIf;
	
	CurRow.Content = ?(ValueIsFilled(Content), Content, CommonUse.GetAttributeValue(CurRow.ProductsAndServices, "Description"));
	
EndDo;</Text>
				<Parameters>Object</Parameters>
			</Algorithm>
			<Algorithm Name="FillDocumentAmountByServices" UsedOnImport="true">
				<Text>// The algorithm is designed to calculate document amount by the
// Services tabular section and write it to the corresponding header
// attribute for showing in the logs Called from the handler "after import" document OCR
DocumentAmount = AccountingVATOverridable.GetDocumentSumWithVAT(Object, "Services");</Text>
				<Parameters>DocumentAmount, Object</Parameters>
			</Algorithm>
			<Algorithm Name="HandleCounterpartyContract" UsedOnImport="true">
				<Text>
If TypeOf(Object) = Type("DocumentObject.CashGoodsReceipt")
	OR TypeOf(Object) = Type("DocumentObject.CashGoodsExpense")
	OR TypeOf(Object) = Type("DocumentObject.ReceiptOnBankAccount")
	OR TypeOf(Object) = Type("DocumentObject.WriteOffFromAccount") Then
	
	For Each TabularSectionRow IN Object.PaymentDetails Do
		
		CounterpartyContract = TabularSectionRow.CounterpartyContract;
		If ValueIsFilled(CounterpartyContract) Then
			
			Contract = CounterpartyContract.GetObject();
			If Contract &lt;&gt; Undefined AND Not ValueIsFilled(Contract.Code) Then
				Contract.DataExchange.Load = True;
				Contract.AdditionalProperties.Insert("RecordObjectChangeAtSenderNode", False);
				Contract.AdditionalProperties.Insert("DisableObjectChangeRecordMechanism", True);
				Contract.SetNewCode();
				Contract.Write();
				Break;
			EndIf;
			
		EndIf;		
	EndDo;

Else

	CounterpartyContract = Object.CounterpartyContract;
	If ValueIsFilled(CounterpartyContract) Then
		
		Contract = CounterpartyContract.GetObject();
		If Contract &lt;&gt; Undefined AND Not ValueIsFilled(Contract.Code) Then
			Contract.DataExchange.Load = True;
			Contract.AdditionalProperties.Insert("RecordObjectChangeAtSenderNode", False);
			Contract.AdditionalProperties.Insert("DisableObjectChangeRecordMechanism", True);
			Contract.SetNewCode();
			Contract.Write();
		EndIf;
		
	EndIf;
	
EndIf;</Text>
				<Parameters>Object</Parameters>
			</Algorithm>
			<Algorithm Name="ProcessTablePartDocumentActWorks" UsedOnImport="true">
				<Text>ObjectParameters = New Structure("Company, Date, Ref, PricesType, DocumentCurrency, DocumentExchangeRate, DocumentMultiplicity, SettlementsExchangeRate, SettlementsMultiplicity, Warehouse, RegulatedAccountingCurrency, AmountIncludesVAT");
ObjectParameters.CurrencyOfRegulatedAccounting = CommonUseBPCallingServerReUse.GetCurrencyRegulatedAccounting();
FillPropertyValues(ObjectParameters, Object);

// Fill in the required attributes in the Services tabular section
For Each TabularSectionRow IN Object.Services Do
	
	If Not ValueIsFilled(TabularSectionRow.VATRate) Then
		DataProcessorTabularSections.FillVatRateTabParts(
			TabularSectionRow,
			ObjectParameters,
			"Services",
			Metadata.Documents.ActOnProvisionOfIndustrialServices);
	EndIf;
		
	// Calculate the attributes of the tabular section.
	TabularSectionRow.Price = TabularSectionRow.Amount / ?(TabularSectionRow.Count =0, 1, TabularSectionRow.Quantity);
	DataProcessorClientServerTableParts.CalculateTabSectionVATSUM(TabularSectionRow, ObjectParameters.AmountIncludesVAT);
	
EndDo;</Text>
				<Parameters>Object</Parameters>
			</Algorithm>
			<Algorithm Name="CheckUseImportGoodsOptionValue" UsedOnImport="true">
				<Text>
	Query = New Query;
	Query.Text =
	"SELECT
	|	COUNT(*) AS Count
	|FROM
	|	Catalog.CCDNumbers AS CCDNumbers";
	
	Selection = Query.Execute().Select();
	
	If Not GetFunctionalOption("ImportedGoodsAccountingInProgress")
		AND Selection.Count() &gt; 0 Then
		
		SetPrivilegedMode(True);
		Constants.ImportedGoodsAccountingInProgress.Set(True);
		SetPrivilegedMode(False);
		
	EndIf;</Text>
			</Algorithm>
			<Algorithm Name="CheckOptionValueUseCommissionOnSale" UsedOnImport="true">
				<Text>
	Query = New Query;
	Query.Text =
	"SELECT
	|	COUNT(*) AS Count
	|FROM
	|	Document.SalesReportToPrincipal AS SalesReportToPrincipal
	|WHERE
	|	SalesReportToPrincipal.OperationKind = VALUE(Enum.OperationKindsSalesReportToPrincipal.SalesReport)";
	
	Selection = Query.Execute().Select();

	If Not GetFunctionalOption("ImplementConsignersGoodsServices")
		AND Selection.Count() &gt; 0 Then
	
		SetPrivilegedMode(True);
		Constants.ImplementConsignersGoodsServices.Set(True);
		SetPrivilegedMode(False);
	
	EndIf;</Text>
			</Algorithm>
			<Algorithm Name="CheckOptionValueUseMultipleCompanies" UsedOnImport="true">
				<Text>
Catalogs.Companies.UpdateUsedCompaniesKinds();

If Not Catalogs.Companies.SeveralCompaniesAreUsed()
	AND Catalogs.Companies.CompaniesCount() &gt; 1 Then
	
	SetPrivilegedMode(True);
	Constants.UseSeveralCompanies.Set(True);
	SetPrivilegedMode(False);
	
EndIf;</Text>
			</Algorithm>
			<Algorithm Name="CheckOptionValueUseMultipleWarehouses" UsedOnImport="true">
				<Text>	
Catalogs.Warehouses.CheckOptionValueUseMultipleWarehouses();</Text>
			</Algorithm>
			<Algorithm Name="CheckOptionValueUseAccountingCurrency" UsedOnImport="true">
				<Text>
	Query = New Query;
	Query.Text =
	"SELECT
	|	COUNT(*) AS Count
	|FROM
	|	Catalog.Currencies AS Currencies";
	
	Selection = Query.Execute().Select();
	
	If Not GetFunctionalOption("UseAccountingCurrency")
		AND Selection.Count() &gt; 1 Then
		
		SetPrivilegedMode(True);
		Constants.UseAccountingCurrency.Set(True);
		Catalogs.OtherIncomeAndExpenses.CreateSetPredefinedItemsAccountingCurrency();
		SetPrivilegedMode(False);
		
	EndIf;</Text>
			</Algorithm>
			<Algorithm Name="CreateDefaultPolicyForCompanies" UsedOnImport="true">
				<Text>	
	For Each CompanyObject IN CompaniesArray Do
		
		If TypeOf(CompanyObject) &lt;&gt; Type("CatalogObject.Companies")
			OR Not ValueIsFilled(CompanyObject.Ref) Then
			Continue;
		EndIf;
		
		Try
			
			Company = CompanyObject.Ref; 
			
			RecordSet = InformationRegisters.AccountingPolicyCompanies.CreateRecordSet();
			RecordSet.Filter.Company.Set(Company);
			RecordSet.Read();
			
			If RecordSet.Count() &gt; 0 Then
				Continue;
			EndIf;
			
			RecordSetRow = RecordSet.Add();
			RecordSetRow.Active = True;
			RecordSetRow.Period = BegOfYear(CurrentDate());
			
			ThisIsInd	= Company.LegalIndividual = Enums.LegalIndividual.Individual;
			TaxationSystem = "Common";
			
			FillingData = New Structure("Company", Company);
			
			FillingData.Insert("TaxationSystem", Enums.TaxationSystems.Common);
			FillingData.Insert("USNApplies", False);
			FillingData.Insert("AppliedAIIncomes", False);
			FillingData.Insert("CSSIsAppliedNIncomeMinusExpenses", False);
			FillingData.Insert("CSSIsAppliedNPatent", False);
			FillingData.Insert("ProfitTaxPayer", True);
			FillingData.Insert("VATPayer", True);
			FillingData.Insert("UTIIPayer", False);
			If ThisIsInd Then
				FillingData.Insert("InventoryEvaluationMethod", Enums.WaysToEvaluate.FIFO);
			EndIf;
			
			InformationRegisters.AccountingPolicyCompanies.ParametersSetDefaultRegistrationPolicy(RecordSetRow, FillingData);
			InformationRegisters.AccountingPolicyCompanies.SetParametersForDefaultPeriodOfAccountingPolicy(RecordSetRow);
			
			RecordSet.AdditionalProperties.Insert("SkipChangeProhibitionCheck", True);
			RecordSet.Write();
			
			// Part of the accounting policy - list of direct costs for calculating the income tax
			If Not ThisIsInd AND TaxationSystem = "Common" Then
				InformationRegisters.MethodsOfDefinitionOfDirectCostsOfProductionVNU.Configure(
					Company,
					BegOfYear(RecordSetRow.Period),
					False, // Do not copy records of the previous period
					False
				);// Do not rewrite records if they already exist
			EndIf;
			
		Except
		EndTry;
		
	EndDo;</Text>
				<Parameters>CompaniesArray</Parameters>
			</Algorithm>
		</Group>
	</Algorithms>
	<Queries/>
</ExchangeRules>