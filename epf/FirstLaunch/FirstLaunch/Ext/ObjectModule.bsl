Var Serializer;
Var TableOfPredifined;
Var СоответствиеЗаменыСсылок;

// Function start filling data for choisen country
// 
// Parameters:
//    FileName - string - 
//
Procedure PredefinedDataAtServer(Val FileName) Export
	
	Файл = New Файл(FileName);
	
	If Файл.Расширение = ".fi" Then
		
		ЧтениеXML = New ЧтениеFastInfoset;
		ЧтениеXML.Прочитать();
		ЧтениеXML.ОткрытьФайл(FileName);
		
		ЗаписьXML = New ЗаписьXML;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
		
		While ЧтениеXML.Прочитать() Do
			
			ЗаписьXML.ЗаписатьТекущий(ЧтениеXML);
			
		EndDo;
		
		ЗаписьXML.Закрыть();
		
		FileName = ИмяВременногоФайла;
		
	EndIf;
	
	ЧтениеXML = New ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(FileName);
	// проверка формата файла обмена
	If Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Then
		
		CommonUseClientServer.MessageToUser(NStr("ru = 'Неверный формат файла выгрузки'"));
		Return;
		
	EndIf;
	
	If Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "Data" Then
		
		CommonUseClientServer.MessageToUser(NStr("ru = 'Неверный формат файла выгрузки'"));
		Return;
		
	EndIf;
	
	ЗагрузитьТаблицуПредопределенных(ЧтениеXML);
	ЗаменитьСсылкиНаПредопределенные(FileName);
	
	ЧтениеXML.ОткрытьФайл(FileName);
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	
	// чтение и запись в ИБ записанных в выгрузке объектов
	If Не ЧтениеXML.Прочитать() Then 
		
		CommonUseClientServer.MessageToUser(NStr("ru = 'Неверный формат файла выгрузки'"));
		Return;
		
	EndIf;
	
	Загружено = 0;
	
	ИнициализироватьСериализаторXDTOСАннотациейТипов();
	
	While Serializer.ВозможностьЧтенияXML(ЧтениеXML) Do
		
		Попытка
			ЗаписанноеЗначение = Serializer.ПрочитатьXML(ЧтениеXML);
		Исключение
			Raise;
		КонецПопытки;
		
		Попытка // Планы обмена свойства ОбменДанными не имеют
			ЗаписанноеЗначение.ОбменДанными.Загрузка = True;
		Исключение
		КонецПопытки;
		
		Попытка
			ЗаписанноеЗначение.Записать();
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			
			
			Попытка
				ТекстСообщения = NStr("ru = 'При загрузке объекта %1(%2) возникла ошибка:
					|%3'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ЗаписанноеЗначение, ТипЗнч(ЗаписанноеЗначение), ТекстОшибки);
			Исключение
				ТекстСообщения = NStr("ru = 'При загрузке данных возникла ошибка:
					|%1'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ТекстОшибки);
			КонецПопытки;
			
			CommonUseClientServer.MessageToUser(ТекстСообщения);
			
			Загружено = Загружено - 1;
			
		КонецПопытки;	
		
		Загружено = Загружено + 1;
		
	EndDo;
	
	// проверка формата файла обмена
	If ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "Data" Then
		
		CommonUseClientServer.MessageToUser(NStr("ru = 'Неверный формат файла выгрузки'"));
		Return;
		
	EndIf;
	
	If Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "PredefinedData" Then
		
		CommonUseClientServer.MessageToUser(NStr("ru = 'Неверный формат файла выгрузки'"));
		Return;
		
	EndIf;
	
	ЧтениеXML.Пропустить();
	
	If Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Then
		
		CommonUseClientServer.MessageToUser(NStr("ru = 'Неверный формат файла выгрузки'"));
		Return;
		
	EndIf;
	
	ЧтениеXML.Закрыть();
	
EndProcedure

#Region XMLLoad

Procedure InitializateTableOfPredifined()
	
	TableOfPredifined = New ValueTable;
	TableOfPredifined.Columns.Add("ИмяТаблицы");
	TableOfPredifined.Columns.Add("Ссылка");
	TableOfPredifined.Columns.Add("ИмяПредопределенныхДанных");
	
EndProcedure

Procedure ЗагрузитьТаблицуПредопределенных(ЧтениеXML)
	
	ЧтениеXML.Пропустить(); // При первом чтении пропускам основной блок данных
	ЧтениеXML.Прочитать();
	
	InitializateTableOfPredifined();
	ВременнаяСтрока = TableOfPredifined.Добавить();
	
	СоответствиеЗаменыСсылок = New Соответствие;
	
	While ЧтениеXML.Прочитать() Do
		
		If ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Then
			
			If ЧтениеXML.ЛокальноеИмя <> "item" Then
				
				ВременнаяСтрока.ИмяТаблицы = ЧтениеXML.ЛокальноеИмя;
				
				ТекстЗапроса = 
				"ВЫБРАТЬ
				|	Таблица.Ссылка КАК Ссылка
				|ИЗ
				|	" + ВременнаяСтрока.ИмяТаблицы + " КАК Таблица
				|ГДЕ
				|	Таблица.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
				Query = New Query(ТекстЗапроса);
				
			Else
				
				While ЧтениеXML.ПрочитатьАтрибут() Do
					
					ВременнаяСтрока[ЧтениеXML.ЛокальноеИмя] = ЧтениеXML.Значение;
					
				EndDo;
				
				Query.УстановитьПараметр("ИмяПредопределенныхДанных", ВременнаяСтрока.ИмяПредопределенныхДанных);
				
				РезультатЗапроса = Query.Выполнить();
				If Не РезультатЗапроса.Пустой() Then
					
					Выборка = РезультатЗапроса.Выбрать();
					
					If Выборка.Количество() = 1 Then
						
						Выборка.Следующий();
						
						СсылкаВБазе = XMLСтрока(Выборка.Ссылка);
						СсылкаВФайле = ВременнаяСтрока.Ссылка;
						
						If СсылкаВБазе <> СсылкаВФайле Then
							
							XMLТип = XMLTypeOfRef(Выборка.Ссылка);
							
							СоответствиеТипа = СоответствиеЗаменыСсылок.Получить(XMLТип);
							
							If СоответствиеТипа = Неопределено Then
								
								СоответствиеТипа = New Соответствие;
								СоответствиеТипа.Вставить(СсылкаВФайле, СсылкаВБазе);
								СоответствиеЗаменыСсылок.Вставить(XMLТип, СоответствиеТипа);
								
							Else
								
								СоответствиеТипа.Вставить(СсылкаВФайле, СсылкаВБазе);
								
							EndIf;
							
						EndIf;
						
					Else
						
						ExeptionText = NStr("ru = 'Обнаружено дублирование предопределенных элементов %1 в таблице %2!'");
						ExeptionText = StrReplace(ExeptionText, "%1", ВременнаяСтрока.ИмяПредопределенныхДанных);
						ExeptionText = StrReplace(ExeptionText, "%2", ВременнаяСтрока.ИмяТаблицы);
						
						Raise ExeptionText;
						
					EndIf;
					
				EndIf;
				
			EndIf;
			
		EndIf;
		
	EndDo;
	
	ЧтениеXML.Закрыть();
	
EndProcedure

// Возвращает менеджер объекта по полному имени объекта метаданных.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер.
// 
Function МенеджерОбъектаПоПолномуИмени(ПолноеИмя)
	
	ЧастиИмени = StrSplit(ПолноеИмя, ".");
	
	If ЧастиИмени.Количество() >= 2 Then
		КлассОМ = ЧастиИмени[0];
		ИмяОМ = ЧастиИмени[1];
	EndIf;
	
	//If ВРег(КлассОМ) = "СПРАВОЧНИК" Then
	If ВРег(КлассОМ) = "CATALOG" Then
		Менеджер = Справочники;
	//ElseIf ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Then
	ElsIf ВРег(КлассОМ) = "CHARTOFCHARACTERISTICTYPES" Then
		Менеджер = ПланыВидовХарактеристик;
	//ElseIf ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Then
	ElsIf ВРег(КлассОМ) = "CHARTOFACCOUNTS" Then
		Менеджер = ПланыСчетов;
	//ElseIf ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Then
	ElsIf ВРег(КлассОМ) = "CHARTOFCALCULATIONTYPES" Then
		Менеджер = ПланыВидовРасчета;
	EndIf;
	
	Return Менеджер[ИмяОМ];
	
EndFunction

// Возвращает СериализаторXDTO с аннотацией типов.
//
// Возвращаемое значение:
//	СериализаторXDTO - сериализатор.
//
Procedure ИнициализироватьСериализаторXDTOСАннотациейТипов()
	
	ТипыСАннотациейСсылок = ПредопределенныеТипыПриВыгрузке();
	
	If ТипыСАннотациейСсылок.Количество() > 0 Then
		
		Фабрика = ПолучитьФабрикуСУказаниемТипов(ТипыСАннотациейСсылок);
		Serializer = New СериализаторXDTO(Фабрика);
		
	Else
		
		Serializer = СериализаторXDTO;
		
	EndIf;
	
EndProcedure

Function ПредопределенныеТипыПриВыгрузке()
	
	Типы = New Массив;
	
	For Each ОбъектМетаданных Из Метаданные.Справочники Do
		Типы.Добавить(ОбъектМетаданных);
	EndDo;
	
	For Each ОбъектМетаданных Из Метаданные.ПланыСчетов Do
		Типы.Добавить(ОбъектМетаданных);
	EndDo;
	
	For Each ОбъектМетаданных Из Метаданные.ПланыВидовХарактеристик Do
		Типы.Добавить(ОбъектМетаданных);
	EndDo;
	
	For Each ОбъектМетаданных Из Метаданные.ПланыВидовРасчета Do
		Типы.Добавить(ОбъектМетаданных);
	EndDo;
	
	Return Типы;
	
EndFunction

// Возвращает фабрику с указанием типов.
//
// Параметры:
//	Типы - ФиксированныйМассив (Метаданные) - массив типов.
//
// Возвращаемое значение:
//	ФабрикаXDTO - фабрика.
//
Function ПолучитьФабрикуСУказаниемТипов(Знач Типы)
	
	НаборСхем = ФабрикаXDTO.ЭкспортСхемыXML("http://v8.1c.ru/8.1/data/enterprise/current-config");
	Схема = НаборСхем[0];
	Схема.ОбновитьЭлементDOM();
	
	УказанныеТипы = New Соответствие;
	For Each Тип Из Типы Do
		УказанныеТипы.Вставить(XMLTypeOfRef(Тип), True);
	EndDo;
	
	ПространствоИмен = New Соответствие;
	ПространствоИмен.Вставить("xs", "http://www.w3.org/2001/XMLSchema");
	РазыменовательПространствИменDOM = New РазыменовательПространствИменDOM(ПространствоИмен);
	ТекстXPath = "/xs:schema/xs:complexType/xs:sequence/xs:element[starts-with(@type,'tns:')]";
	
	Запрос = Схема.ДокументDOM.СоздатьВыражениеXPath(ТекстXPath, РазыменовательПространствИменDOM);
	Результат = Запрос.Вычислить(Схема.ДокументDOM);

	While True Do
		
		УзелПоля = Результат.ПолучитьСледующий();
		If УзелПоля = Неопределено Then
			Прервать;
		EndIf;
		АтрибутТип = УзелПоля.Атрибуты.ПолучитьИменованныйЭлемент("type");
		ТипБезNSПрефикса = Сред(АтрибутТип.ТекстовоеСодержимое, СтрДлина("tns:") + 1);
		
		If УказанныеТипы.Получить(ТипБезNSПрефикса) = Неопределено Then
			Продолжить;
		EndIf;
		
		УзелПоля.УстановитьАтрибут("nillable", "true");
		УзелПоля.УдалитьАтрибут("type");
	EndDo;
	
	ЗаписьXML = New ЗаписьXML;
	ИмяФайлаСхемы = ПолучитьИмяВременногоФайла("xsd");
	ЗаписьXML.ОткрытьФайл(ИмяФайлаСхемы);
	ЗаписьDOM = New ЗаписьDOM;
	ЗаписьDOM.Записать(Схема.ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	Фабрика = СоздатьФабрикуXDTO(ИмяФайлаСхемы);
	
	Попытка
		УдалитьФайлы(ИмяФайлаСхемы);
	Исключение
	КонецПопытки;
	
	Return Фабрика;
	
EndFunction

// Возвращает имя типа, который будет использован в xml файле для указанного объекта метаданных
// Используется при поиске и замене ссылок при загрузке, при модификации схемы current-config при записи
// 
// Параметры:
//  Значение - Объект метаданных или Ссылка
//
// Возвращаемое значение:
//  Строка - Строка вида AccountingRegisterRecordSet.Хозрасчетный, описывающая объект метаданных 
//
Function XMLTypeOfRef(Знач Value)
	
	If ТипЗнч(Value) = Тип("ОбъектМетаданных") Then
		ОбъектМетаданных = Value;
		МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Ref = МенеджерОбъекта.ПолучитьСсылку();
	Else
		ОбъектМетаданных = Value.Метаданные();
		Ref = Value;
	EndIf;
	
	If ОбъектОбразуетСсылочныйТип(ОбъектМетаданных) Then
		
		Return СериализаторXDTO.XMLТипЗнч(Ref).ИмяТипа;
		
	Else
		
		ExeptionText = NStr("ru = 'Ошибка при определении XMLТипа ссылки для объекта %1: объект не является ссылочным!'");
		ExeptionText = StrReplace(ExeptionText, "%1", ОбъектМетаданных.ПолноеИмя());
		
		Raise ExeptionText;
		
	EndIf;
	
EndFunction

// Function определяет имеет ли переданный объект метаданных ссылочный тип
//
// Return - True, If переданный объект метаданных имеет ссылочный тип, False - противном случае
Function ОбъектОбразуетСсылочныйТип(ОбъектМД)
	
	If ОбъектМД = Неопределено Then
		Return False;
	EndIf;
	
	If Метаданные.Справочники.Содержит(ОбъектМД)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыОбмена.Содержит(ОбъектМД)
		ИЛИ Метаданные.БизнесПроцессы.Содержит(ОбъектМД)
		ИЛИ Метаданные.Задачи.Содержит(ОбъектМД) Then
		Return True;
	EndIf;
	
	Return False;
EndFunction

Procedure ЗаменитьСсылкиНаПредопределенные(ИмяФайла)
	
	ПотокЧтения = New ЧтениеТекста(ИмяФайла);
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	
	ПотокЗаписи = New ЗаписьТекста(ВременныйФайл);
	
	// Константы для разбора текста
	НачалоТипа = "xsi:type=""v8:";
	ДлинаНачалаТипа = СтрДлина(НачалоТипа);
	КонецТипа = """>";
	ДлинаКонцаТипа = СтрДлина(КонецТипа);
	
	ИсходнаяСтрока = ПотокЧтения.ПрочитатьСтроку();
	While ИсходнаяСтрока <> Неопределено Do
		
		ОстатокСтроки = Неопределено;
		
		ТекущаяПозиция = 1;
		ПозицияТипа = Найти(ИсходнаяСтрока, НачалоТипа);
		While ПозицияТипа > 0 Do
			
			ПотокЗаписи.Записать(Сред(ИсходнаяСтрока, ТекущаяПозиция, ПозицияТипа - 1 + ДлинаНачалаТипа));
			
			ОстатокСтроки = Сред(ИсходнаяСтрока, ТекущаяПозиция + ПозицияТипа + ДлинаНачалаТипа - 1);
			ТекущаяПозиция = ТекущаяПозиция + ПозицияТипа + ДлинаНачалаТипа - 1;
			
			ПозицияКонцаТипа = Найти(ОстатокСтроки, КонецТипа);
			If ПозицияКонцаТипа = 0 Then
				Прервать;
			EndIf;
			
			ИмяТипа = Лев(ОстатокСтроки, ПозицияКонцаТипа - 1);
			СоответствиеЗамены = СоответствиеЗаменыСсылок.Получить(ИмяТипа);
			If СоответствиеЗамены = Неопределено Then
				ПозицияТипа = Найти(ОстатокСтроки, НачалоТипа);
				Продолжить;
			EndIf;
			
			ПотокЗаписи.Записать(ИмяТипа);
			ПотокЗаписи.Записать(КонецТипа);
			
			ИсходнаяСсылкаXML = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа, 36);
			
			НайденнаяСсылкаXML = СоответствиеЗамены.Получить(ИсходнаяСсылкаXML);
			
			If НайденнаяСсылкаXML = Неопределено Then
				ПотокЗаписи.Записать(ИсходнаяСсылкаXML);
			Else
				ПотокЗаписи.Записать(НайденнаяСсылкаXML);
			EndIf;
			
			ТекущаяПозиция = ТекущаяПозиция + ПозицияКонцаТипа - 1 + ДлинаКонцаТипа + 36;
			ОстатокСтроки = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа + 36);
			ПозицияТипа = Найти(ОстатокСтроки, НачалоТипа);
			
		EndDo;
		
		If ОстатокСтроки <> Неопределено Then
			ПотокЗаписи.ЗаписатьСтроку(ОстатокСтроки);
		Else
			ПотокЗаписи.ЗаписатьСтроку(ИсходнаяСтрока);
		EndIf;
		
		ИсходнаяСтрока = ПотокЧтения.ПрочитатьСтроку();
		
	EndDo;
	
	ПотокЧтения.Закрыть();
	ПотокЗаписи.Закрыть();
	
	ИмяФайла = ВременныйФайл;
	
EndProcedure

#EndRegion
